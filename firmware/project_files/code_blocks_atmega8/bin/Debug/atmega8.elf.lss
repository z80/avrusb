
bin\Debug\atmega8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001c12  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  00001c12  00001ca6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000158  00800076  00800076  00001cbc  2**0
                  ALLOC
  3 .debug_aranges 000001e0  00000000  00000000  00001cbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000478  00000000  00000000  00001e9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002b5e  00000000  00000000  00002314  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000145a  00000000  00000000  00004e72  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001a47  00000000  00000000  000062cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003b0  00000000  00000000  00007d14  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000077d  00000000  00000000  000080c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007ce  00000000  00000000  00008841  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  0000900f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	63 c6       	rjmp	.+3270   	; 0xcca <__vector_1>
       4:	5e c0       	rjmp	.+188    	; 0xc2 <__bad_interrupt>
       6:	5d c0       	rjmp	.+186    	; 0xc2 <__bad_interrupt>
       8:	5c c0       	rjmp	.+184    	; 0xc2 <__bad_interrupt>
       a:	5b c0       	rjmp	.+182    	; 0xc2 <__bad_interrupt>
       c:	5a c0       	rjmp	.+180    	; 0xc2 <__bad_interrupt>
       e:	59 c0       	rjmp	.+178    	; 0xc2 <__bad_interrupt>
      10:	58 c0       	rjmp	.+176    	; 0xc2 <__bad_interrupt>
      12:	57 c0       	rjmp	.+174    	; 0xc2 <__bad_interrupt>
      14:	56 c0       	rjmp	.+172    	; 0xc2 <__bad_interrupt>
      16:	55 c0       	rjmp	.+170    	; 0xc2 <__bad_interrupt>
      18:	54 c0       	rjmp	.+168    	; 0xc2 <__bad_interrupt>
      1a:	53 c0       	rjmp	.+166    	; 0xc2 <__bad_interrupt>
      1c:	52 c0       	rjmp	.+164    	; 0xc2 <__bad_interrupt>
      1e:	51 c0       	rjmp	.+162    	; 0xc2 <__bad_interrupt>
      20:	50 c0       	rjmp	.+160    	; 0xc2 <__bad_interrupt>
      22:	4f c0       	rjmp	.+158    	; 0xc2 <__bad_interrupt>
      24:	4e c0       	rjmp	.+156    	; 0xc2 <__bad_interrupt>

00000026 <usbDescriptorString0>:
      26:	04 03 09 04                                         ....

0000002a <usbDescriptorStringVendor>:
      2a:	1e 03 74 00 72 00 61 00 6e 00 73 00 6d 00 61 00     ..t.r.a.n.s.m.a.
      3a:	67 00 6e 00 65 00 74 00 69 00 63 00 73 00           g.n.e.t.i.c.s.

00000048 <usbDescriptorStringDevice>:
      48:	20 03 62 00 72 00 75 00 73 00 68 00 6c 00 65 00      .b.r.u.s.h.l.e.
      58:	73 00 73 00 5f 00 6d 00 6f 00 74 00 6f 00 72 00     s.s._.m.o.t.o.r.

00000068 <usbDescriptorDevice>:
      68:	12 01 10 01 ff 00 00 08 c0 16 dd 05 00 01 01 02     ................
      78:	00 01                                               ..

0000007a <usbDescriptorConfiguration>:
      7a:	09 02 12 00 01 01 00 80 0a 09 04 00 00 00 00 00     ................
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf e5       	ldi	r28, 0x5F	; 95
      92:	d4 e0       	ldi	r29, 0x04	; 4
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	10 e0       	ldi	r17, 0x00	; 0
      9a:	a0 e6       	ldi	r26, 0x60	; 96
      9c:	b0 e0       	ldi	r27, 0x00	; 0
      9e:	e2 e1       	ldi	r30, 0x12	; 18
      a0:	fc e1       	ldi	r31, 0x1C	; 28
      a2:	02 c0       	rjmp	.+4      	; 0xa8 <.do_copy_data_start>

000000a4 <.do_copy_data_loop>:
      a4:	05 90       	lpm	r0, Z+
      a6:	0d 92       	st	X+, r0

000000a8 <.do_copy_data_start>:
      a8:	a6 37       	cpi	r26, 0x76	; 118
      aa:	b1 07       	cpc	r27, r17
      ac:	d9 f7       	brne	.-10     	; 0xa4 <.do_copy_data_loop>

000000ae <__do_clear_bss>:
      ae:	11 e0       	ldi	r17, 0x01	; 1
      b0:	a6 e7       	ldi	r26, 0x76	; 118
      b2:	b0 e0       	ldi	r27, 0x00	; 0
      b4:	01 c0       	rjmp	.+2      	; 0xb8 <.do_clear_bss_start>

000000b6 <.do_clear_bss_loop>:
      b6:	1d 92       	st	X+, r1

000000b8 <.do_clear_bss_start>:
      b8:	ae 3c       	cpi	r26, 0xCE	; 206
      ba:	b1 07       	cpc	r27, r17
      bc:	e1 f7       	brne	.-8      	; 0xb6 <.do_clear_bss_loop>
      be:	8e d2       	rcall	.+1308   	; 0x5dc <main>
      c0:	a6 cd       	rjmp	.-1204   	; 0xfffffc0e <__eeprom_end+0xff7efc0e>

000000c2 <__bad_interrupt>:
      c2:	9e cf       	rjmp	.-196    	; 0x0 <__vectors>

000000c4 <initLeds>:
#define LED_DDR  DDRD
#define LED0     (1<<0)
#define LED1     (1<<1)

void initLeds( void )
{
      c4:	df 93       	push	r29
      c6:	cf 93       	push	r28
      c8:	cd b7       	in	r28, 0x3d	; 61
      ca:	de b7       	in	r29, 0x3e	; 62
    LED_DDR  |= LED0 | LED1;
      cc:	a1 e3       	ldi	r26, 0x31	; 49
      ce:	b0 e0       	ldi	r27, 0x00	; 0
      d0:	e1 e3       	ldi	r30, 0x31	; 49
      d2:	f0 e0       	ldi	r31, 0x00	; 0
      d4:	80 81       	ld	r24, Z
      d6:	83 60       	ori	r24, 0x03	; 3
      d8:	8c 93       	st	X, r24
    LED_PORT |= 0b00000000;
      da:	a2 e3       	ldi	r26, 0x32	; 50
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e2 e3       	ldi	r30, 0x32	; 50
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	80 81       	ld	r24, Z
      e4:	8c 93       	st	X, r24
}
      e6:	cf 91       	pop	r28
      e8:	df 91       	pop	r29
      ea:	08 95       	ret

000000ec <setLeds>:

void setLeds( unsigned char val )
{
      ec:	df 93       	push	r29
      ee:	cf 93       	push	r28
      f0:	0f 92       	push	r0
      f2:	cd b7       	in	r28, 0x3d	; 61
      f4:	de b7       	in	r29, 0x3e	; 62
      f6:	89 83       	std	Y+1, r24	; 0x01
    LED_PORT = (LED_PORT & (~(LED0|LED1))) | val;
      f8:	a2 e3       	ldi	r26, 0x32	; 50
      fa:	b0 e0       	ldi	r27, 0x00	; 0
      fc:	e2 e3       	ldi	r30, 0x32	; 50
      fe:	f0 e0       	ldi	r31, 0x00	; 0
     100:	80 81       	ld	r24, Z
     102:	98 2f       	mov	r25, r24
     104:	9c 7f       	andi	r25, 0xFC	; 252
     106:	89 81       	ldd	r24, Y+1	; 0x01
     108:	89 2b       	or	r24, r25
     10a:	8c 93       	st	X, r24
}
     10c:	0f 90       	pop	r0
     10e:	cf 91       	pop	r28
     110:	df 91       	pop	r29
     112:	08 95       	ret

00000114 <setLed0>:

void setLed0( unsigned char val )
{
     114:	df 93       	push	r29
     116:	cf 93       	push	r28
     118:	0f 92       	push	r0
     11a:	cd b7       	in	r28, 0x3d	; 61
     11c:	de b7       	in	r29, 0x3e	; 62
     11e:	89 83       	std	Y+1, r24	; 0x01
    LED_PORT = (LED_PORT & (~(LED0))) | val;
     120:	a2 e3       	ldi	r26, 0x32	; 50
     122:	b0 e0       	ldi	r27, 0x00	; 0
     124:	e2 e3       	ldi	r30, 0x32	; 50
     126:	f0 e0       	ldi	r31, 0x00	; 0
     128:	80 81       	ld	r24, Z
     12a:	98 2f       	mov	r25, r24
     12c:	9e 7f       	andi	r25, 0xFE	; 254
     12e:	89 81       	ldd	r24, Y+1	; 0x01
     130:	89 2b       	or	r24, r25
     132:	8c 93       	st	X, r24
}
     134:	0f 90       	pop	r0
     136:	cf 91       	pop	r28
     138:	df 91       	pop	r29
     13a:	08 95       	ret

0000013c <setLed1>:

void setLed1( unsigned char val )
{
     13c:	df 93       	push	r29
     13e:	cf 93       	push	r28
     140:	0f 92       	push	r0
     142:	cd b7       	in	r28, 0x3d	; 61
     144:	de b7       	in	r29, 0x3e	; 62
     146:	89 83       	std	Y+1, r24	; 0x01
    LED_PORT = (LED_PORT & (~(LED1))) | val;
     148:	a2 e3       	ldi	r26, 0x32	; 50
     14a:	b0 e0       	ldi	r27, 0x00	; 0
     14c:	e2 e3       	ldi	r30, 0x32	; 50
     14e:	f0 e0       	ldi	r31, 0x00	; 0
     150:	80 81       	ld	r24, Z
     152:	98 2f       	mov	r25, r24
     154:	9d 7f       	andi	r25, 0xFD	; 253
     156:	89 81       	ldd	r24, Y+1	; 0x01
     158:	89 2b       	or	r24, r25
     15a:	8c 93       	st	X, r24
}
     15c:	0f 90       	pop	r0
     15e:	cf 91       	pop	r28
     160:	df 91       	pop	r29
     162:	08 95       	ret

00000164 <blinkLed0>:

void blinkLed0( void )
{
     164:	df 93       	push	r29
     166:	cf 93       	push	r28
     168:	00 d0       	rcall	.+0      	; 0x16a <blinkLed0+0x6>
     16a:	cd b7       	in	r28, 0x3d	; 61
     16c:	de b7       	in	r29, 0x3e	; 62
    uint8_t led = (LED_PORT & LED0) ? 0 : LED0;
     16e:	e2 e3       	ldi	r30, 0x32	; 50
     170:	f0 e0       	ldi	r31, 0x00	; 0
     172:	80 81       	ld	r24, Z
     174:	88 2f       	mov	r24, r24
     176:	90 e0       	ldi	r25, 0x00	; 0
     178:	81 70       	andi	r24, 0x01	; 1
     17a:	90 70       	andi	r25, 0x00	; 0
     17c:	88 23       	and	r24, r24
     17e:	11 f0       	breq	.+4      	; 0x184 <blinkLed0+0x20>
     180:	1a 82       	std	Y+2, r1	; 0x02
     182:	02 c0       	rjmp	.+4      	; 0x188 <blinkLed0+0x24>
     184:	81 e0       	ldi	r24, 0x01	; 1
     186:	8a 83       	std	Y+2, r24	; 0x02
     188:	8a 81       	ldd	r24, Y+2	; 0x02
     18a:	89 83       	std	Y+1, r24	; 0x01
    LED_PORT = (LED_PORT & (~(LED0))) | led;
     18c:	a2 e3       	ldi	r26, 0x32	; 50
     18e:	b0 e0       	ldi	r27, 0x00	; 0
     190:	e2 e3       	ldi	r30, 0x32	; 50
     192:	f0 e0       	ldi	r31, 0x00	; 0
     194:	80 81       	ld	r24, Z
     196:	98 2f       	mov	r25, r24
     198:	9e 7f       	andi	r25, 0xFE	; 254
     19a:	89 81       	ldd	r24, Y+1	; 0x01
     19c:	89 2b       	or	r24, r25
     19e:	8c 93       	st	X, r24
}
     1a0:	0f 90       	pop	r0
     1a2:	0f 90       	pop	r0
     1a4:	cf 91       	pop	r28
     1a6:	df 91       	pop	r29
     1a8:	08 95       	ret

000001aa <blinkLed1>:

void blinkLed1( void )
{
     1aa:	df 93       	push	r29
     1ac:	cf 93       	push	r28
     1ae:	00 d0       	rcall	.+0      	; 0x1b0 <blinkLed1+0x6>
     1b0:	cd b7       	in	r28, 0x3d	; 61
     1b2:	de b7       	in	r29, 0x3e	; 62
    uint8_t led = (LED_PORT & LED1) ? 0 : LED1;
     1b4:	e2 e3       	ldi	r30, 0x32	; 50
     1b6:	f0 e0       	ldi	r31, 0x00	; 0
     1b8:	80 81       	ld	r24, Z
     1ba:	88 2f       	mov	r24, r24
     1bc:	90 e0       	ldi	r25, 0x00	; 0
     1be:	82 70       	andi	r24, 0x02	; 2
     1c0:	90 70       	andi	r25, 0x00	; 0
     1c2:	00 97       	sbiw	r24, 0x00	; 0
     1c4:	11 f0       	breq	.+4      	; 0x1ca <blinkLed1+0x20>
     1c6:	1a 82       	std	Y+2, r1	; 0x02
     1c8:	02 c0       	rjmp	.+4      	; 0x1ce <blinkLed1+0x24>
     1ca:	82 e0       	ldi	r24, 0x02	; 2
     1cc:	8a 83       	std	Y+2, r24	; 0x02
     1ce:	8a 81       	ldd	r24, Y+2	; 0x02
     1d0:	89 83       	std	Y+1, r24	; 0x01
    LED_PORT = (LED_PORT & (~(LED1))) | led;
     1d2:	a2 e3       	ldi	r26, 0x32	; 50
     1d4:	b0 e0       	ldi	r27, 0x00	; 0
     1d6:	e2 e3       	ldi	r30, 0x32	; 50
     1d8:	f0 e0       	ldi	r31, 0x00	; 0
     1da:	80 81       	ld	r24, Z
     1dc:	98 2f       	mov	r25, r24
     1de:	9d 7f       	andi	r25, 0xFD	; 253
     1e0:	89 81       	ldd	r24, Y+1	; 0x01
     1e2:	89 2b       	or	r24, r25
     1e4:	8c 93       	st	X, r24
}
     1e6:	0f 90       	pop	r0
     1e8:	0f 90       	pop	r0
     1ea:	cf 91       	pop	r28
     1ec:	df 91       	pop	r29
     1ee:	08 95       	ret

000001f0 <invoke>:
static void param( uchar * io );
static void setEepromParam( uchar * io );
static void eepromParam( uchar * io );

void invoke( uchar id, uchar * io )
{
     1f0:	df 93       	push	r29
     1f2:	cf 93       	push	r28
     1f4:	00 d0       	rcall	.+0      	; 0x1f6 <invoke+0x6>
     1f6:	00 d0       	rcall	.+0      	; 0x1f8 <invoke+0x8>
     1f8:	0f 92       	push	r0
     1fa:	cd b7       	in	r28, 0x3d	; 61
     1fc:	de b7       	in	r29, 0x3e	; 62
     1fe:	89 83       	std	Y+1, r24	; 0x01
     200:	7b 83       	std	Y+3, r23	; 0x03
     202:	6a 83       	std	Y+2, r22	; 0x02
    switch ( id )
     204:	89 81       	ldd	r24, Y+1	; 0x01
     206:	28 2f       	mov	r18, r24
     208:	30 e0       	ldi	r19, 0x00	; 0
     20a:	3d 83       	std	Y+5, r19	; 0x05
     20c:	2c 83       	std	Y+4, r18	; 0x04
     20e:	8c 81       	ldd	r24, Y+4	; 0x04
     210:	9d 81       	ldd	r25, Y+5	; 0x05
     212:	83 30       	cpi	r24, 0x03	; 3
     214:	91 05       	cpc	r25, r1
     216:	01 f1       	breq	.+64     	; 0x258 <invoke+0x68>
     218:	2c 81       	ldd	r18, Y+4	; 0x04
     21a:	3d 81       	ldd	r19, Y+5	; 0x05
     21c:	24 30       	cpi	r18, 0x04	; 4
     21e:	31 05       	cpc	r19, r1
     220:	5c f4       	brge	.+22     	; 0x238 <invoke+0x48>
     222:	8c 81       	ldd	r24, Y+4	; 0x04
     224:	9d 81       	ldd	r25, Y+5	; 0x05
     226:	81 30       	cpi	r24, 0x01	; 1
     228:	91 05       	cpc	r25, r1
     22a:	51 f1       	breq	.+84     	; 0x280 <invoke+0x90>
     22c:	2c 81       	ldd	r18, Y+4	; 0x04
     22e:	3d 81       	ldd	r19, Y+5	; 0x05
     230:	22 30       	cpi	r18, 0x02	; 2
     232:	31 05       	cpc	r19, r1
     234:	09 f1       	breq	.+66     	; 0x278 <invoke+0x88>
     236:	27 c0       	rjmp	.+78     	; 0x286 <invoke+0x96>
     238:	8c 81       	ldd	r24, Y+4	; 0x04
     23a:	9d 81       	ldd	r25, Y+5	; 0x05
     23c:	85 30       	cpi	r24, 0x05	; 5
     23e:	91 05       	cpc	r25, r1
     240:	99 f0       	breq	.+38     	; 0x268 <invoke+0x78>
     242:	2c 81       	ldd	r18, Y+4	; 0x04
     244:	3d 81       	ldd	r19, Y+5	; 0x05
     246:	25 30       	cpi	r18, 0x05	; 5
     248:	31 05       	cpc	r19, r1
     24a:	54 f0       	brlt	.+20     	; 0x260 <invoke+0x70>
     24c:	8c 81       	ldd	r24, Y+4	; 0x04
     24e:	9d 81       	ldd	r25, Y+5	; 0x05
     250:	86 30       	cpi	r24, 0x06	; 6
     252:	91 05       	cpc	r25, r1
     254:	69 f0       	breq	.+26     	; 0x270 <invoke+0x80>
     256:	17 c0       	rjmp	.+46     	; 0x286 <invoke+0x96>
    {
    case FUNC_SET_PARAM:
        setParam( io );
     258:	8a 81       	ldd	r24, Y+2	; 0x02
     25a:	9b 81       	ldd	r25, Y+3	; 0x03
     25c:	d1 d0       	rcall	.+418    	; 0x400 <setParam>
     25e:	13 c0       	rjmp	.+38     	; 0x286 <invoke+0x96>
        break;
    case FUNC_PARAM:
        param( io );
     260:	8a 81       	ldd	r24, Y+2	; 0x02
     262:	9b 81       	ldd	r25, Y+3	; 0x03
     264:	0b d1       	rcall	.+534    	; 0x47c <param>
     266:	0f c0       	rjmp	.+30     	; 0x286 <invoke+0x96>
        break;
    case FUNC_SET_EEPROM_PARAM:
        setEepromParam( io );
     268:	8a 81       	ldd	r24, Y+2	; 0x02
     26a:	9b 81       	ldd	r25, Y+3	; 0x03
     26c:	41 d1       	rcall	.+642    	; 0x4f0 <setEepromParam>
     26e:	0b c0       	rjmp	.+22     	; 0x286 <invoke+0x96>
        break;
    case FUNC_EEPROM_PARAM:
        eepromParam( io );
     270:	8a 81       	ldd	r24, Y+2	; 0x02
     272:	9b 81       	ldd	r25, Y+3	; 0x03
     274:	7a d1       	rcall	.+756    	; 0x56a <eepromParam>
     276:	07 c0       	rjmp	.+14     	; 0x286 <invoke+0x96>
        break;
    case FUNC_FIRMWARE:
        firmware( io );
     278:	8a 81       	ldd	r24, Y+2	; 0x02
     27a:	9b 81       	ldd	r25, Y+3	; 0x03
     27c:	68 d0       	rcall	.+208    	; 0x34e <firmware>
     27e:	03 c0       	rjmp	.+6      	; 0x286 <invoke+0x96>
        break;
    case FUNC_VERSION:
        version( io );
     280:	8a 81       	ldd	r24, Y+2	; 0x02
     282:	9b 81       	ldd	r25, Y+3	; 0x03
     284:	08 d0       	rcall	.+16     	; 0x296 <version>
        break;
    }
}
     286:	0f 90       	pop	r0
     288:	0f 90       	pop	r0
     28a:	0f 90       	pop	r0
     28c:	0f 90       	pop	r0
     28e:	0f 90       	pop	r0
     290:	cf 91       	pop	r28
     292:	df 91       	pop	r29
     294:	08 95       	ret

00000296 <version>:

static void version( uchar * io )
{
     296:	df 93       	push	r29
     298:	cf 93       	push	r28
     29a:	cd b7       	in	r28, 0x3d	; 61
     29c:	de b7       	in	r29, 0x3e	; 62
     29e:	2f 97       	sbiw	r28, 0x0f	; 15
     2a0:	0f b6       	in	r0, 0x3f	; 63
     2a2:	f8 94       	cli
     2a4:	de bf       	out	0x3e, r29	; 62
     2a6:	0f be       	out	0x3f, r0	; 63
     2a8:	cd bf       	out	0x3d, r28	; 61
     2aa:	9a 87       	std	Y+10, r25	; 0x0a
     2ac:	89 87       	std	Y+9, r24	; 0x09
    //blinkLed1();
    const uchar maxLen = 16;
     2ae:	80 e1       	ldi	r24, 0x10	; 16
     2b0:	8a 83       	std	Y+2, r24	; 0x02
    uchar ver[] = VERSION;
     2b2:	ce 01       	movw	r24, r28
     2b4:	03 96       	adiw	r24, 0x03	; 3
     2b6:	9c 87       	std	Y+12, r25	; 0x0c
     2b8:	8b 87       	std	Y+11, r24	; 0x0b
     2ba:	e0 e6       	ldi	r30, 0x60	; 96
     2bc:	f0 e0       	ldi	r31, 0x00	; 0
     2be:	fe 87       	std	Y+14, r31	; 0x0e
     2c0:	ed 87       	std	Y+13, r30	; 0x0d
     2c2:	f6 e0       	ldi	r31, 0x06	; 6
     2c4:	ff 87       	std	Y+15, r31	; 0x0f
     2c6:	ed 85       	ldd	r30, Y+13	; 0x0d
     2c8:	fe 85       	ldd	r31, Y+14	; 0x0e
     2ca:	00 80       	ld	r0, Z
     2cc:	8d 85       	ldd	r24, Y+13	; 0x0d
     2ce:	9e 85       	ldd	r25, Y+14	; 0x0e
     2d0:	01 96       	adiw	r24, 0x01	; 1
     2d2:	9e 87       	std	Y+14, r25	; 0x0e
     2d4:	8d 87       	std	Y+13, r24	; 0x0d
     2d6:	eb 85       	ldd	r30, Y+11	; 0x0b
     2d8:	fc 85       	ldd	r31, Y+12	; 0x0c
     2da:	00 82       	st	Z, r0
     2dc:	8b 85       	ldd	r24, Y+11	; 0x0b
     2de:	9c 85       	ldd	r25, Y+12	; 0x0c
     2e0:	01 96       	adiw	r24, 0x01	; 1
     2e2:	9c 87       	std	Y+12, r25	; 0x0c
     2e4:	8b 87       	std	Y+11, r24	; 0x0b
     2e6:	9f 85       	ldd	r25, Y+15	; 0x0f
     2e8:	91 50       	subi	r25, 0x01	; 1
     2ea:	9f 87       	std	Y+15, r25	; 0x0f
     2ec:	ef 85       	ldd	r30, Y+15	; 0x0f
     2ee:	ee 23       	and	r30, r30
     2f0:	51 f7       	brne	.-44     	; 0x2c6 <version+0x30>
    uchar i = 0;
     2f2:	19 82       	std	Y+1, r1	; 0x01
    do {
        io[i] = ver[i];
     2f4:	89 81       	ldd	r24, Y+1	; 0x01
     2f6:	28 2f       	mov	r18, r24
     2f8:	30 e0       	ldi	r19, 0x00	; 0
     2fa:	89 85       	ldd	r24, Y+9	; 0x09
     2fc:	9a 85       	ldd	r25, Y+10	; 0x0a
     2fe:	dc 01       	movw	r26, r24
     300:	a2 0f       	add	r26, r18
     302:	b3 1f       	adc	r27, r19
     304:	89 81       	ldd	r24, Y+1	; 0x01
     306:	28 2f       	mov	r18, r24
     308:	30 e0       	ldi	r19, 0x00	; 0
     30a:	ce 01       	movw	r24, r28
     30c:	03 96       	adiw	r24, 0x03	; 3
     30e:	fc 01       	movw	r30, r24
     310:	e2 0f       	add	r30, r18
     312:	f3 1f       	adc	r31, r19
     314:	80 81       	ld	r24, Z
     316:	8c 93       	st	X, r24
        i++;
     318:	89 81       	ldd	r24, Y+1	; 0x01
     31a:	8f 5f       	subi	r24, 0xFF	; 255
     31c:	89 83       	std	Y+1, r24	; 0x01
    } while ( ( ver[i] != '\0' ) && ( i < maxLen ) );
     31e:	89 81       	ldd	r24, Y+1	; 0x01
     320:	28 2f       	mov	r18, r24
     322:	30 e0       	ldi	r19, 0x00	; 0
     324:	ce 01       	movw	r24, r28
     326:	03 96       	adiw	r24, 0x03	; 3
     328:	fc 01       	movw	r30, r24
     32a:	e2 0f       	add	r30, r18
     32c:	f3 1f       	adc	r31, r19
     32e:	80 81       	ld	r24, Z
     330:	88 23       	and	r24, r24
     332:	21 f0       	breq	.+8      	; 0x33c <version+0xa6>
     334:	99 81       	ldd	r25, Y+1	; 0x01
     336:	8a 81       	ldd	r24, Y+2	; 0x02
     338:	98 17       	cp	r25, r24
     33a:	e0 f2       	brcs	.-72     	; 0x2f4 <version+0x5e>
}
     33c:	2f 96       	adiw	r28, 0x0f	; 15
     33e:	0f b6       	in	r0, 0x3f	; 63
     340:	f8 94       	cli
     342:	de bf       	out	0x3e, r29	; 62
     344:	0f be       	out	0x3f, r0	; 63
     346:	cd bf       	out	0x3d, r28	; 61
     348:	cf 91       	pop	r28
     34a:	df 91       	pop	r29
     34c:	08 95       	ret

0000034e <firmware>:

static void firmware( uchar * io )
{
     34e:	df 93       	push	r29
     350:	cf 93       	push	r28
     352:	cd b7       	in	r28, 0x3d	; 61
     354:	de b7       	in	r29, 0x3e	; 62
     356:	2e 97       	sbiw	r28, 0x0e	; 14
     358:	0f b6       	in	r0, 0x3f	; 63
     35a:	f8 94       	cli
     35c:	de bf       	out	0x3e, r29	; 62
     35e:	0f be       	out	0x3f, r0	; 63
     360:	cd bf       	out	0x3d, r28	; 61
     362:	99 87       	std	Y+9, r25	; 0x09
     364:	88 87       	std	Y+8, r24	; 0x08
    const uchar maxLen = 16;
     366:	80 e1       	ldi	r24, 0x10	; 16
     368:	8a 83       	std	Y+2, r24	; 0x02
    uchar ver[] = FIRMWARE;
     36a:	ce 01       	movw	r24, r28
     36c:	03 96       	adiw	r24, 0x03	; 3
     36e:	9b 87       	std	Y+11, r25	; 0x0b
     370:	8a 87       	std	Y+10, r24	; 0x0a
     372:	e6 e6       	ldi	r30, 0x66	; 102
     374:	f0 e0       	ldi	r31, 0x00	; 0
     376:	fd 87       	std	Y+13, r31	; 0x0d
     378:	ec 87       	std	Y+12, r30	; 0x0c
     37a:	f5 e0       	ldi	r31, 0x05	; 5
     37c:	fe 87       	std	Y+14, r31	; 0x0e
     37e:	ec 85       	ldd	r30, Y+12	; 0x0c
     380:	fd 85       	ldd	r31, Y+13	; 0x0d
     382:	00 80       	ld	r0, Z
     384:	8c 85       	ldd	r24, Y+12	; 0x0c
     386:	9d 85       	ldd	r25, Y+13	; 0x0d
     388:	01 96       	adiw	r24, 0x01	; 1
     38a:	9d 87       	std	Y+13, r25	; 0x0d
     38c:	8c 87       	std	Y+12, r24	; 0x0c
     38e:	ea 85       	ldd	r30, Y+10	; 0x0a
     390:	fb 85       	ldd	r31, Y+11	; 0x0b
     392:	00 82       	st	Z, r0
     394:	8a 85       	ldd	r24, Y+10	; 0x0a
     396:	9b 85       	ldd	r25, Y+11	; 0x0b
     398:	01 96       	adiw	r24, 0x01	; 1
     39a:	9b 87       	std	Y+11, r25	; 0x0b
     39c:	8a 87       	std	Y+10, r24	; 0x0a
     39e:	9e 85       	ldd	r25, Y+14	; 0x0e
     3a0:	91 50       	subi	r25, 0x01	; 1
     3a2:	9e 87       	std	Y+14, r25	; 0x0e
     3a4:	ee 85       	ldd	r30, Y+14	; 0x0e
     3a6:	ee 23       	and	r30, r30
     3a8:	51 f7       	brne	.-44     	; 0x37e <firmware+0x30>
    uchar i = 0;
     3aa:	19 82       	std	Y+1, r1	; 0x01
    do {
        io[i] = ver[i];
     3ac:	89 81       	ldd	r24, Y+1	; 0x01
     3ae:	28 2f       	mov	r18, r24
     3b0:	30 e0       	ldi	r19, 0x00	; 0
     3b2:	88 85       	ldd	r24, Y+8	; 0x08
     3b4:	99 85       	ldd	r25, Y+9	; 0x09
     3b6:	dc 01       	movw	r26, r24
     3b8:	a2 0f       	add	r26, r18
     3ba:	b3 1f       	adc	r27, r19
     3bc:	89 81       	ldd	r24, Y+1	; 0x01
     3be:	28 2f       	mov	r18, r24
     3c0:	30 e0       	ldi	r19, 0x00	; 0
     3c2:	ce 01       	movw	r24, r28
     3c4:	03 96       	adiw	r24, 0x03	; 3
     3c6:	fc 01       	movw	r30, r24
     3c8:	e2 0f       	add	r30, r18
     3ca:	f3 1f       	adc	r31, r19
     3cc:	80 81       	ld	r24, Z
     3ce:	8c 93       	st	X, r24
    } while ( ( ver[i] != '\0' ) && ( i < maxLen ) );
     3d0:	89 81       	ldd	r24, Y+1	; 0x01
     3d2:	28 2f       	mov	r18, r24
     3d4:	30 e0       	ldi	r19, 0x00	; 0
     3d6:	ce 01       	movw	r24, r28
     3d8:	03 96       	adiw	r24, 0x03	; 3
     3da:	fc 01       	movw	r30, r24
     3dc:	e2 0f       	add	r30, r18
     3de:	f3 1f       	adc	r31, r19
     3e0:	80 81       	ld	r24, Z
     3e2:	88 23       	and	r24, r24
     3e4:	21 f0       	breq	.+8      	; 0x3ee <firmware+0xa0>
     3e6:	99 81       	ldd	r25, Y+1	; 0x01
     3e8:	8a 81       	ldd	r24, Y+2	; 0x02
     3ea:	98 17       	cp	r25, r24
     3ec:	f8 f2       	brcs	.-66     	; 0x3ac <firmware+0x5e>
}
     3ee:	2e 96       	adiw	r28, 0x0e	; 14
     3f0:	0f b6       	in	r0, 0x3f	; 63
     3f2:	f8 94       	cli
     3f4:	de bf       	out	0x3e, r29	; 62
     3f6:	0f be       	out	0x3f, r0	; 63
     3f8:	cd bf       	out	0x3d, r28	; 61
     3fa:	cf 91       	pop	r28
     3fc:	df 91       	pop	r29
     3fe:	08 95       	ret

00000400 <setParam>:

static void setParam( uchar * io )
{
     400:	df 93       	push	r29
     402:	cf 93       	push	r28
     404:	00 d0       	rcall	.+0      	; 0x406 <setParam+0x6>
     406:	00 d0       	rcall	.+0      	; 0x408 <setParam+0x8>
     408:	0f 92       	push	r0
     40a:	cd b7       	in	r28, 0x3d	; 61
     40c:	de b7       	in	r29, 0x3e	; 62
     40e:	9d 83       	std	Y+5, r25	; 0x05
     410:	8c 83       	std	Y+4, r24	; 0x04
    blinkLed0();
     412:	a8 de       	rcall	.-688    	; 0x164 <blinkLed0>
    uchar at = io[0];
     414:	ec 81       	ldd	r30, Y+4	; 0x04
     416:	fd 81       	ldd	r31, Y+5	; 0x05
     418:	80 81       	ld	r24, Z
     41a:	8b 83       	std	Y+3, r24	; 0x03
    uchar sz = io[1];
     41c:	8c 81       	ldd	r24, Y+4	; 0x04
     41e:	9d 81       	ldd	r25, Y+5	; 0x05
     420:	fc 01       	movw	r30, r24
     422:	31 96       	adiw	r30, 0x01	; 1
     424:	80 81       	ld	r24, Z
     426:	8a 83       	std	Y+2, r24	; 0x02
    uchar i;
    for ( i=0; i<sz; i++ )
     428:	19 82       	std	Y+1, r1	; 0x01
     42a:	1c c0       	rjmp	.+56     	; 0x464 <__stack+0x5>
        g_ramParams[ at+i ] = io[i+2];
     42c:	8b 81       	ldd	r24, Y+3	; 0x03
     42e:	28 2f       	mov	r18, r24
     430:	30 e0       	ldi	r19, 0x00	; 0
     432:	89 81       	ldd	r24, Y+1	; 0x01
     434:	88 2f       	mov	r24, r24
     436:	90 e0       	ldi	r25, 0x00	; 0
     438:	a9 01       	movw	r20, r18
     43a:	48 0f       	add	r20, r24
     43c:	59 1f       	adc	r21, r25
     43e:	89 81       	ldd	r24, Y+1	; 0x01
     440:	88 2f       	mov	r24, r24
     442:	90 e0       	ldi	r25, 0x00	; 0
     444:	9c 01       	movw	r18, r24
     446:	2e 5f       	subi	r18, 0xFE	; 254
     448:	3f 4f       	sbci	r19, 0xFF	; 255
     44a:	8c 81       	ldd	r24, Y+4	; 0x04
     44c:	9d 81       	ldd	r25, Y+5	; 0x05
     44e:	fc 01       	movw	r30, r24
     450:	e2 0f       	add	r30, r18
     452:	f3 1f       	adc	r31, r19
     454:	80 81       	ld	r24, Z
     456:	fa 01       	movw	r30, r20
     458:	ec 57       	subi	r30, 0x7C	; 124
     45a:	ff 4f       	sbci	r31, 0xFF	; 255
     45c:	80 83       	st	Z, r24
{
    blinkLed0();
    uchar at = io[0];
    uchar sz = io[1];
    uchar i;
    for ( i=0; i<sz; i++ )
     45e:	89 81       	ldd	r24, Y+1	; 0x01
     460:	8f 5f       	subi	r24, 0xFF	; 255
     462:	89 83       	std	Y+1, r24	; 0x01
     464:	99 81       	ldd	r25, Y+1	; 0x01
     466:	8a 81       	ldd	r24, Y+2	; 0x02
     468:	98 17       	cp	r25, r24
     46a:	00 f3       	brcs	.-64     	; 0x42c <setParam+0x2c>
        g_ramParams[ at+i ] = io[i+2];
}
     46c:	0f 90       	pop	r0
     46e:	0f 90       	pop	r0
     470:	0f 90       	pop	r0
     472:	0f 90       	pop	r0
     474:	0f 90       	pop	r0
     476:	cf 91       	pop	r28
     478:	df 91       	pop	r29
     47a:	08 95       	ret

0000047c <param>:

static void param( uchar * io )
{
     47c:	df 93       	push	r29
     47e:	cf 93       	push	r28
     480:	00 d0       	rcall	.+0      	; 0x482 <param+0x6>
     482:	00 d0       	rcall	.+0      	; 0x484 <param+0x8>
     484:	0f 92       	push	r0
     486:	cd b7       	in	r28, 0x3d	; 61
     488:	de b7       	in	r29, 0x3e	; 62
     48a:	9d 83       	std	Y+5, r25	; 0x05
     48c:	8c 83       	std	Y+4, r24	; 0x04
    blinkLed1();
     48e:	8d de       	rcall	.-742    	; 0x1aa <blinkLed1>
    uchar at = io[0];
     490:	ec 81       	ldd	r30, Y+4	; 0x04
     492:	fd 81       	ldd	r31, Y+5	; 0x05
     494:	80 81       	ld	r24, Z
     496:	8b 83       	std	Y+3, r24	; 0x03
    uchar sz = io[1];
     498:	8c 81       	ldd	r24, Y+4	; 0x04
     49a:	9d 81       	ldd	r25, Y+5	; 0x05
     49c:	fc 01       	movw	r30, r24
     49e:	31 96       	adiw	r30, 0x01	; 1
     4a0:	80 81       	ld	r24, Z
     4a2:	8a 83       	std	Y+2, r24	; 0x02
    uchar i;
    for ( i=0; i<sz; i++ )
     4a4:	19 82       	std	Y+1, r1	; 0x01
     4a6:	18 c0       	rjmp	.+48     	; 0x4d8 <param+0x5c>
        io[i] = g_ramParams[ at+i ];
     4a8:	89 81       	ldd	r24, Y+1	; 0x01
     4aa:	28 2f       	mov	r18, r24
     4ac:	30 e0       	ldi	r19, 0x00	; 0
     4ae:	8c 81       	ldd	r24, Y+4	; 0x04
     4b0:	9d 81       	ldd	r25, Y+5	; 0x05
     4b2:	dc 01       	movw	r26, r24
     4b4:	a2 0f       	add	r26, r18
     4b6:	b3 1f       	adc	r27, r19
     4b8:	8b 81       	ldd	r24, Y+3	; 0x03
     4ba:	28 2f       	mov	r18, r24
     4bc:	30 e0       	ldi	r19, 0x00	; 0
     4be:	89 81       	ldd	r24, Y+1	; 0x01
     4c0:	88 2f       	mov	r24, r24
     4c2:	90 e0       	ldi	r25, 0x00	; 0
     4c4:	82 0f       	add	r24, r18
     4c6:	93 1f       	adc	r25, r19
     4c8:	fc 01       	movw	r30, r24
     4ca:	ec 57       	subi	r30, 0x7C	; 124
     4cc:	ff 4f       	sbci	r31, 0xFF	; 255
     4ce:	80 81       	ld	r24, Z
     4d0:	8c 93       	st	X, r24
{
    blinkLed1();
    uchar at = io[0];
    uchar sz = io[1];
    uchar i;
    for ( i=0; i<sz; i++ )
     4d2:	89 81       	ldd	r24, Y+1	; 0x01
     4d4:	8f 5f       	subi	r24, 0xFF	; 255
     4d6:	89 83       	std	Y+1, r24	; 0x01
     4d8:	99 81       	ldd	r25, Y+1	; 0x01
     4da:	8a 81       	ldd	r24, Y+2	; 0x02
     4dc:	98 17       	cp	r25, r24
     4de:	20 f3       	brcs	.-56     	; 0x4a8 <param+0x2c>
        io[i] = g_ramParams[ at+i ];
}
     4e0:	0f 90       	pop	r0
     4e2:	0f 90       	pop	r0
     4e4:	0f 90       	pop	r0
     4e6:	0f 90       	pop	r0
     4e8:	0f 90       	pop	r0
     4ea:	cf 91       	pop	r28
     4ec:	df 91       	pop	r29
     4ee:	08 95       	ret

000004f0 <setEepromParam>:

static void setEepromParam( uchar * io )
{
     4f0:	df 93       	push	r29
     4f2:	cf 93       	push	r28
     4f4:	00 d0       	rcall	.+0      	; 0x4f6 <setEepromParam+0x6>
     4f6:	00 d0       	rcall	.+0      	; 0x4f8 <setEepromParam+0x8>
     4f8:	0f 92       	push	r0
     4fa:	cd b7       	in	r28, 0x3d	; 61
     4fc:	de b7       	in	r29, 0x3e	; 62
     4fe:	9d 83       	std	Y+5, r25	; 0x05
     500:	8c 83       	std	Y+4, r24	; 0x04
    uchar at = io[0];
     502:	ec 81       	ldd	r30, Y+4	; 0x04
     504:	fd 81       	ldd	r31, Y+5	; 0x05
     506:	80 81       	ld	r24, Z
     508:	8b 83       	std	Y+3, r24	; 0x03
    uchar sz = io[1];
     50a:	8c 81       	ldd	r24, Y+4	; 0x04
     50c:	9d 81       	ldd	r25, Y+5	; 0x05
     50e:	fc 01       	movw	r30, r24
     510:	31 96       	adiw	r30, 0x01	; 1
     512:	80 81       	ld	r24, Z
     514:	8a 83       	std	Y+2, r24	; 0x02
    uchar i;
    for ( i=0; i<sz; i++ )
     516:	19 82       	std	Y+1, r1	; 0x01
     518:	1c c0       	rjmp	.+56     	; 0x552 <setEepromParam+0x62>
        g_eepromParams[ at+i ] = io[i+2];
     51a:	8b 81       	ldd	r24, Y+3	; 0x03
     51c:	28 2f       	mov	r18, r24
     51e:	30 e0       	ldi	r19, 0x00	; 0
     520:	89 81       	ldd	r24, Y+1	; 0x01
     522:	88 2f       	mov	r24, r24
     524:	90 e0       	ldi	r25, 0x00	; 0
     526:	a9 01       	movw	r20, r18
     528:	48 0f       	add	r20, r24
     52a:	59 1f       	adc	r21, r25
     52c:	89 81       	ldd	r24, Y+1	; 0x01
     52e:	88 2f       	mov	r24, r24
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	9c 01       	movw	r18, r24
     534:	2e 5f       	subi	r18, 0xFE	; 254
     536:	3f 4f       	sbci	r19, 0xFF	; 255
     538:	8c 81       	ldd	r24, Y+4	; 0x04
     53a:	9d 81       	ldd	r25, Y+5	; 0x05
     53c:	fc 01       	movw	r30, r24
     53e:	e2 0f       	add	r30, r18
     540:	f3 1f       	adc	r31, r19
     542:	80 81       	ld	r24, Z
     544:	fa 01       	movw	r30, r20
     546:	ec 5f       	subi	r30, 0xFC	; 252
     548:	fe 4f       	sbci	r31, 0xFE	; 254
     54a:	80 83       	st	Z, r24
static void setEepromParam( uchar * io )
{
    uchar at = io[0];
    uchar sz = io[1];
    uchar i;
    for ( i=0; i<sz; i++ )
     54c:	89 81       	ldd	r24, Y+1	; 0x01
     54e:	8f 5f       	subi	r24, 0xFF	; 255
     550:	89 83       	std	Y+1, r24	; 0x01
     552:	99 81       	ldd	r25, Y+1	; 0x01
     554:	8a 81       	ldd	r24, Y+2	; 0x02
     556:	98 17       	cp	r25, r24
     558:	00 f3       	brcs	.-64     	; 0x51a <setEepromParam+0x2a>
        g_eepromParams[ at+i ] = io[i+2];
}
     55a:	0f 90       	pop	r0
     55c:	0f 90       	pop	r0
     55e:	0f 90       	pop	r0
     560:	0f 90       	pop	r0
     562:	0f 90       	pop	r0
     564:	cf 91       	pop	r28
     566:	df 91       	pop	r29
     568:	08 95       	ret

0000056a <eepromParam>:

static void eepromParam( uchar * io )
{
     56a:	df 93       	push	r29
     56c:	cf 93       	push	r28
     56e:	00 d0       	rcall	.+0      	; 0x570 <eepromParam+0x6>
     570:	00 d0       	rcall	.+0      	; 0x572 <eepromParam+0x8>
     572:	0f 92       	push	r0
     574:	cd b7       	in	r28, 0x3d	; 61
     576:	de b7       	in	r29, 0x3e	; 62
     578:	9d 83       	std	Y+5, r25	; 0x05
     57a:	8c 83       	std	Y+4, r24	; 0x04
    uchar at = io[0];
     57c:	ec 81       	ldd	r30, Y+4	; 0x04
     57e:	fd 81       	ldd	r31, Y+5	; 0x05
     580:	80 81       	ld	r24, Z
     582:	8b 83       	std	Y+3, r24	; 0x03
    uchar sz = io[1];
     584:	8c 81       	ldd	r24, Y+4	; 0x04
     586:	9d 81       	ldd	r25, Y+5	; 0x05
     588:	fc 01       	movw	r30, r24
     58a:	31 96       	adiw	r30, 0x01	; 1
     58c:	80 81       	ld	r24, Z
     58e:	8a 83       	std	Y+2, r24	; 0x02
    uchar i;
    for ( i=0; i<sz; i++ )
     590:	19 82       	std	Y+1, r1	; 0x01
     592:	18 c0       	rjmp	.+48     	; 0x5c4 <eepromParam+0x5a>
        io[i] = g_eepromParams[ at+i ];
     594:	89 81       	ldd	r24, Y+1	; 0x01
     596:	28 2f       	mov	r18, r24
     598:	30 e0       	ldi	r19, 0x00	; 0
     59a:	8c 81       	ldd	r24, Y+4	; 0x04
     59c:	9d 81       	ldd	r25, Y+5	; 0x05
     59e:	dc 01       	movw	r26, r24
     5a0:	a2 0f       	add	r26, r18
     5a2:	b3 1f       	adc	r27, r19
     5a4:	8b 81       	ldd	r24, Y+3	; 0x03
     5a6:	28 2f       	mov	r18, r24
     5a8:	30 e0       	ldi	r19, 0x00	; 0
     5aa:	89 81       	ldd	r24, Y+1	; 0x01
     5ac:	88 2f       	mov	r24, r24
     5ae:	90 e0       	ldi	r25, 0x00	; 0
     5b0:	82 0f       	add	r24, r18
     5b2:	93 1f       	adc	r25, r19
     5b4:	fc 01       	movw	r30, r24
     5b6:	ec 5f       	subi	r30, 0xFC	; 252
     5b8:	fe 4f       	sbci	r31, 0xFE	; 254
     5ba:	80 81       	ld	r24, Z
     5bc:	8c 93       	st	X, r24
static void eepromParam( uchar * io )
{
    uchar at = io[0];
    uchar sz = io[1];
    uchar i;
    for ( i=0; i<sz; i++ )
     5be:	89 81       	ldd	r24, Y+1	; 0x01
     5c0:	8f 5f       	subi	r24, 0xFF	; 255
     5c2:	89 83       	std	Y+1, r24	; 0x01
     5c4:	99 81       	ldd	r25, Y+1	; 0x01
     5c6:	8a 81       	ldd	r24, Y+2	; 0x02
     5c8:	98 17       	cp	r25, r24
     5ca:	20 f3       	brcs	.-56     	; 0x594 <eepromParam+0x2a>
        io[i] = g_eepromParams[ at+i ];
}
     5cc:	0f 90       	pop	r0
     5ce:	0f 90       	pop	r0
     5d0:	0f 90       	pop	r0
     5d2:	0f 90       	pop	r0
     5d4:	0f 90       	pop	r0
     5d6:	cf 91       	pop	r28
     5d8:	df 91       	pop	r29
     5da:	08 95       	ret

000005dc <main>:
#include "dbg.h"

usbMsgLen_t usbFunctionSetup( uchar data[8] );

void __attribute__((noreturn)) main( void )
{
     5dc:	df 93       	push	r29
     5de:	cf 93       	push	r28
     5e0:	cd b7       	in	r28, 0x3d	; 61
     5e2:	de b7       	in	r29, 0x3e	; 62
     5e4:	60 97       	sbiw	r28, 0x10	; 16
     5e6:	0f b6       	in	r0, 0x3f	; 63
     5e8:	f8 94       	cli
     5ea:	de bf       	out	0x3e, r29	; 62
     5ec:	0f be       	out	0x3f, r0	; 63
     5ee:	cd bf       	out	0x3d, r28	; 61
    cli();
     5f0:	f8 94       	cli
    initLeds();
     5f2:	68 dd       	rcall	.-1328   	; 0xc4 <initLeds>

    wdt_enable( WDTO_1S );
     5f4:	88 e1       	ldi	r24, 0x18	; 24
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	2e e0       	ldi	r18, 0x0E	; 14
     5fa:	0f b6       	in	r0, 0x3f	; 63
     5fc:	f8 94       	cli
     5fe:	a8 95       	wdr
     600:	81 bd       	out	0x21, r24	; 33
     602:	0f be       	out	0x3f, r0	; 63
     604:	21 bd       	out	0x21, r18	; 33

    // USB initialization.
    usbInit();
     606:	2b d3       	rcall	.+1622   	; 0xc5e <usbInit>
    usbDeviceDisconnect();  // enforce re-enumeration, do this while interrupts are disabled!
     608:	a1 e3       	ldi	r26, 0x31	; 49
     60a:	b0 e0       	ldi	r27, 0x00	; 0
     60c:	e1 e3       	ldi	r30, 0x31	; 49
     60e:	f0 e0       	ldi	r31, 0x00	; 0
     610:	80 81       	ld	r24, Z
     612:	88 60       	ori	r24, 0x08	; 8
     614:	8c 93       	st	X, r24
    unsigned char b = 150;
     616:	86 e9       	ldi	r24, 0x96	; 150
     618:	8f 87       	std	Y+15, r24	; 0x0f
     61a:	6d c0       	rjmp	.+218    	; 0x6f6 <main+0x11a>
    while ( b-- )
     61c:	80 e0       	ldi	r24, 0x00	; 0
     61e:	90 e0       	ldi	r25, 0x00	; 0
     620:	a0 e8       	ldi	r26, 0x80	; 128
     622:	bf e3       	ldi	r27, 0x3F	; 63
     624:	8b 87       	std	Y+11, r24	; 0x0b
     626:	9c 87       	std	Y+12, r25	; 0x0c
     628:	ad 87       	std	Y+13, r26	; 0x0d
     62a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     62c:	6b 85       	ldd	r22, Y+11	; 0x0b
     62e:	7c 85       	ldd	r23, Y+12	; 0x0c
     630:	8d 85       	ldd	r24, Y+13	; 0x0d
     632:	9e 85       	ldd	r25, Y+14	; 0x0e
     634:	20 e0       	ldi	r18, 0x00	; 0
     636:	30 e8       	ldi	r19, 0x80	; 128
     638:	4b e3       	ldi	r20, 0x3B	; 59
     63a:	55 e4       	ldi	r21, 0x45	; 69
     63c:	1d d7       	rcall	.+3642   	; 0x1478 <__mulsf3>
     63e:	dc 01       	movw	r26, r24
     640:	cb 01       	movw	r24, r22
     642:	8f 83       	std	Y+7, r24	; 0x07
     644:	98 87       	std	Y+8, r25	; 0x08
     646:	a9 87       	std	Y+9, r26	; 0x09
     648:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     64a:	6f 81       	ldd	r22, Y+7	; 0x07
     64c:	78 85       	ldd	r23, Y+8	; 0x08
     64e:	89 85       	ldd	r24, Y+9	; 0x09
     650:	9a 85       	ldd	r25, Y+10	; 0x0a
     652:	20 e0       	ldi	r18, 0x00	; 0
     654:	30 e0       	ldi	r19, 0x00	; 0
     656:	40 e8       	ldi	r20, 0x80	; 128
     658:	5f e3       	ldi	r21, 0x3F	; 63
     65a:	59 d8       	rcall	.-3918   	; 0xfffff70e <__eeprom_end+0xff7ef70e>
     65c:	88 23       	and	r24, r24
     65e:	2c f4       	brge	.+10     	; 0x66a <main+0x8e>
		__ticks = 1;
     660:	81 e0       	ldi	r24, 0x01	; 1
     662:	90 e0       	ldi	r25, 0x00	; 0
     664:	9e 83       	std	Y+6, r25	; 0x06
     666:	8d 83       	std	Y+5, r24	; 0x05
     668:	3b c0       	rjmp	.+118    	; 0x6e0 <main+0x104>
	else if (__tmp > 65535)
     66a:	6f 81       	ldd	r22, Y+7	; 0x07
     66c:	78 85       	ldd	r23, Y+8	; 0x08
     66e:	89 85       	ldd	r24, Y+9	; 0x09
     670:	9a 85       	ldd	r25, Y+10	; 0x0a
     672:	20 e0       	ldi	r18, 0x00	; 0
     674:	3f ef       	ldi	r19, 0xFF	; 255
     676:	4f e7       	ldi	r20, 0x7F	; 127
     678:	57 e4       	ldi	r21, 0x47	; 71
     67a:	f3 d7       	rcall	.+4070   	; 0x1662 <__gtsf2>
     67c:	18 16       	cp	r1, r24
     67e:	3c f5       	brge	.+78     	; 0x6ce <main+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     680:	6b 85       	ldd	r22, Y+11	; 0x0b
     682:	7c 85       	ldd	r23, Y+12	; 0x0c
     684:	8d 85       	ldd	r24, Y+13	; 0x0d
     686:	9e 85       	ldd	r25, Y+14	; 0x0e
     688:	20 e0       	ldi	r18, 0x00	; 0
     68a:	30 e0       	ldi	r19, 0x00	; 0
     68c:	40 e2       	ldi	r20, 0x20	; 32
     68e:	51 e4       	ldi	r21, 0x41	; 65
     690:	f3 d6       	rcall	.+3558   	; 0x1478 <__mulsf3>
     692:	dc 01       	movw	r26, r24
     694:	cb 01       	movw	r24, r22
     696:	bc 01       	movw	r22, r24
     698:	cd 01       	movw	r24, r26
     69a:	2a d5       	rcall	.+2644   	; 0x10f0 <__fixunssfsi>
     69c:	dc 01       	movw	r26, r24
     69e:	cb 01       	movw	r24, r22
     6a0:	9e 83       	std	Y+6, r25	; 0x06
     6a2:	8d 83       	std	Y+5, r24	; 0x05
     6a4:	0f c0       	rjmp	.+30     	; 0x6c4 <main+0xe8>
     6a6:	8c e2       	ldi	r24, 0x2C	; 44
     6a8:	91 e0       	ldi	r25, 0x01	; 1
     6aa:	9c 83       	std	Y+4, r25	; 0x04
     6ac:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     6ae:	8b 81       	ldd	r24, Y+3	; 0x03
     6b0:	9c 81       	ldd	r25, Y+4	; 0x04
     6b2:	01 97       	sbiw	r24, 0x01	; 1
     6b4:	f1 f7       	brne	.-4      	; 0x6b2 <main+0xd6>
     6b6:	9c 83       	std	Y+4, r25	; 0x04
     6b8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6ba:	8d 81       	ldd	r24, Y+5	; 0x05
     6bc:	9e 81       	ldd	r25, Y+6	; 0x06
     6be:	01 97       	sbiw	r24, 0x01	; 1
     6c0:	9e 83       	std	Y+6, r25	; 0x06
     6c2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6c4:	8d 81       	ldd	r24, Y+5	; 0x05
     6c6:	9e 81       	ldd	r25, Y+6	; 0x06
     6c8:	00 97       	sbiw	r24, 0x00	; 0
     6ca:	69 f7       	brne	.-38     	; 0x6a6 <main+0xca>
     6cc:	13 c0       	rjmp	.+38     	; 0x6f4 <main+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     6ce:	6f 81       	ldd	r22, Y+7	; 0x07
     6d0:	78 85       	ldd	r23, Y+8	; 0x08
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	9a 85       	ldd	r25, Y+10	; 0x0a
     6d6:	0c d5       	rcall	.+2584   	; 0x10f0 <__fixunssfsi>
     6d8:	dc 01       	movw	r26, r24
     6da:	cb 01       	movw	r24, r22
     6dc:	9e 83       	std	Y+6, r25	; 0x06
     6de:	8d 83       	std	Y+5, r24	; 0x05
     6e0:	8d 81       	ldd	r24, Y+5	; 0x05
     6e2:	9e 81       	ldd	r25, Y+6	; 0x06
     6e4:	9a 83       	std	Y+2, r25	; 0x02
     6e6:	89 83       	std	Y+1, r24	; 0x01
     6e8:	89 81       	ldd	r24, Y+1	; 0x01
     6ea:	9a 81       	ldd	r25, Y+2	; 0x02
     6ec:	01 97       	sbiw	r24, 0x01	; 1
     6ee:	f1 f7       	brne	.-4      	; 0x6ec <main+0x110>
     6f0:	9a 83       	std	Y+2, r25	; 0x02
     6f2:	89 83       	std	Y+1, r24	; 0x01
    {
        _delay_ms( 1 );
        wdt_reset();
     6f4:	a8 95       	wdr

    // USB initialization.
    usbInit();
    usbDeviceDisconnect();  // enforce re-enumeration, do this while interrupts are disabled!
    unsigned char b = 150;
    while ( b-- )
     6f6:	8f 85       	ldd	r24, Y+15	; 0x0f
     6f8:	88 8b       	std	Y+16, r24	; 0x10
     6fa:	88 89       	ldd	r24, Y+16	; 0x10
     6fc:	88 23       	and	r24, r24
     6fe:	11 f0       	breq	.+4      	; 0x704 <main+0x128>
     700:	81 e0       	ldi	r24, 0x01	; 1
     702:	88 8b       	std	Y+16, r24	; 0x10
     704:	88 89       	ldd	r24, Y+16	; 0x10
     706:	9f 85       	ldd	r25, Y+15	; 0x0f
     708:	91 50       	subi	r25, 0x01	; 1
     70a:	9f 87       	std	Y+15, r25	; 0x0f
     70c:	88 23       	and	r24, r24
     70e:	09 f0       	breq	.+2      	; 0x712 <main+0x136>
     710:	85 cf       	rjmp	.-246    	; 0x61c <main+0x40>
    {
        _delay_ms( 1 );
        wdt_reset();
    }
    cpuIoInit();
     712:	08 d4       	rcall	.+2064   	; 0xf24 <cpuIoInit>

    usbDeviceConnect();
     714:	a1 e3       	ldi	r26, 0x31	; 49
     716:	b0 e0       	ldi	r27, 0x00	; 0
     718:	e1 e3       	ldi	r30, 0x31	; 49
     71a:	f0 e0       	ldi	r31, 0x00	; 0
     71c:	80 81       	ld	r24, Z
     71e:	87 7f       	andi	r24, 0xF7	; 247
     720:	8c 93       	st	X, r24
    sei();
     722:	78 94       	sei

    for ( ;; )
    {
        // main event loop
        usbPoll();
     724:	d1 d0       	rcall	.+418    	; 0x8c8 <usbPoll>
        wdt_reset();
     726:	a8 95       	wdr
        cpuIoPoll();
     728:	0e d4       	rcall	.+2076   	; 0xf46 <cpuIoPoll>
     72a:	fc cf       	rjmp	.-8      	; 0x724 <main+0x148>

0000072c <usbFunctionSetup>:
        //_delay_ms( 10 );
    }
}

usbMsgLen_t usbFunctionSetup( uchar data[8] )
{
     72c:	df 93       	push	r29
     72e:	cf 93       	push	r28
     730:	00 d0       	rcall	.+0      	; 0x732 <usbFunctionSetup+0x6>
     732:	00 d0       	rcall	.+0      	; 0x734 <usbFunctionSetup+0x8>
     734:	0f 92       	push	r0
     736:	cd b7       	in	r28, 0x3d	; 61
     738:	de b7       	in	r29, 0x3e	; 62
     73a:	9c 83       	std	Y+4, r25	; 0x04
     73c:	8b 83       	std	Y+3, r24	; 0x03
    usbRequest_t    * rq = (void *)data;
     73e:	8b 81       	ldd	r24, Y+3	; 0x03
     740:	9c 81       	ldd	r25, Y+4	; 0x04
     742:	9a 83       	std	Y+2, r25	; 0x02
     744:	89 83       	std	Y+1, r24	; 0x01
    static uchar    dataBuffer[8];  // buffer must stay valid when usbFunctionSetup returns
    usbMsgPtr = dataBuffer;
     746:	86 e7       	ldi	r24, 0x76	; 118
     748:	90 e0       	ldi	r25, 0x00	; 0
     74a:	90 93 93 01 	sts	0x0193, r25
     74e:	80 93 92 01 	sts	0x0192, r24
    if( (rq->bmRequestType & USBRQ_TYPE_MASK) != 0 /*== USBRQ_TYPE_CLASS*/ )
     752:	e9 81       	ldd	r30, Y+1	; 0x01
     754:	fa 81       	ldd	r31, Y+2	; 0x02
     756:	80 81       	ld	r24, Z
     758:	88 2f       	mov	r24, r24
     75a:	90 e0       	ldi	r25, 0x00	; 0
     75c:	80 76       	andi	r24, 0x60	; 96
     75e:	90 70       	andi	r25, 0x00	; 0
     760:	00 97       	sbiw	r24, 0x00	; 0
     762:	81 f0       	breq	.+32     	; 0x784 <usbFunctionSetup+0x58>
    {    // HID class request
        if(rq->bRequest == USBRQ_HID_GET_REPORT)
     764:	e9 81       	ldd	r30, Y+1	; 0x01
     766:	fa 81       	ldd	r31, Y+2	; 0x02
     768:	81 81       	ldd	r24, Z+1	; 0x01
     76a:	81 30       	cpi	r24, 0x01	; 1
     76c:	19 f4       	brne	.+6      	; 0x774 <usbFunctionSetup+0x48>
        {
            // wValue: ReportType (highbyte), ReportID (lowbyte)
            return USB_NO_MSG;  // use usbFunctionRead() to obtain data
     76e:	8f ef       	ldi	r24, 0xFF	; 255
     770:	8d 83       	std	Y+5, r24	; 0x05
     772:	09 c0       	rjmp	.+18     	; 0x786 <usbFunctionSetup+0x5a>
        }
        else if(rq->bRequest == USBRQ_HID_SET_REPORT)
     774:	e9 81       	ldd	r30, Y+1	; 0x01
     776:	fa 81       	ldd	r31, Y+2	; 0x02
     778:	81 81       	ldd	r24, Z+1	; 0x01
     77a:	89 30       	cpi	r24, 0x09	; 9
     77c:	19 f4       	brne	.+6      	; 0x784 <usbFunctionSetup+0x58>
        {
            return USB_NO_MSG;  // use usbFunctionWrite() to receive data from host
     77e:	8f ef       	ldi	r24, 0xFF	; 255
     780:	8d 83       	std	Y+5, r24	; 0x05
     782:	01 c0       	rjmp	.+2      	; 0x786 <usbFunctionSetup+0x5a>
        }
    }
    return 0;
     784:	1d 82       	std	Y+5, r1	; 0x05
     786:	8d 81       	ldd	r24, Y+5	; 0x05
    //return USB_NO_MSG;
}
     788:	0f 90       	pop	r0
     78a:	0f 90       	pop	r0
     78c:	0f 90       	pop	r0
     78e:	0f 90       	pop	r0
     790:	0f 90       	pop	r0
     792:	cf 91       	pop	r28
     794:	df 91       	pop	r29
     796:	08 95       	ret

00000798 <usbFunctionRead>:

uchar usbFunctionRead(uchar *data, uchar len)
{
     798:	df 93       	push	r29
     79a:	cf 93       	push	r28
     79c:	00 d0       	rcall	.+0      	; 0x79e <usbFunctionRead+0x6>
     79e:	0f 92       	push	r0
     7a0:	cd b7       	in	r28, 0x3d	; 61
     7a2:	de b7       	in	r29, 0x3e	; 62
     7a4:	9a 83       	std	Y+2, r25	; 0x02
     7a6:	89 83       	std	Y+1, r24	; 0x01
     7a8:	6b 83       	std	Y+3, r22	; 0x03
    return len;*/
    //uchar i;
    //for ( i=0; i<len; i++ )
    //    data[i] = 'a' + i;
    //blinkLed1();
    cpuIoPop( data, len );
     7aa:	89 81       	ldd	r24, Y+1	; 0x01
     7ac:	9a 81       	ldd	r25, Y+2	; 0x02
     7ae:	6b 81       	ldd	r22, Y+3	; 0x03
     7b0:	66 d4       	rcall	.+2252   	; 0x107e <cpuIoPop>
    return len;
     7b2:	8b 81       	ldd	r24, Y+3	; 0x03
}
     7b4:	0f 90       	pop	r0
     7b6:	0f 90       	pop	r0
     7b8:	0f 90       	pop	r0
     7ba:	cf 91       	pop	r28
     7bc:	df 91       	pop	r29
     7be:	08 95       	ret

000007c0 <usbFunctionWrite>:

uchar usbFunctionWrite( uchar *data, uchar len )
{
     7c0:	df 93       	push	r29
     7c2:	cf 93       	push	r28
     7c4:	00 d0       	rcall	.+0      	; 0x7c6 <usbFunctionWrite+0x6>
     7c6:	0f 92       	push	r0
     7c8:	cd b7       	in	r28, 0x3d	; 61
     7ca:	de b7       	in	r29, 0x3e	; 62
     7cc:	9a 83       	std	Y+2, r25	; 0x02
     7ce:	89 83       	std	Y+1, r24	; 0x01
     7d0:	6b 83       	std	Y+3, r22	; 0x03
    return bytesRemaining == 0; // return 1 if this was the last chunk
    */
    // Return 1 if don't know if data should come or not.
    //if ( ( data[0] == 0 ) && ( data[1] == 1 ) )
    //blinkLed0();
    cpuIoPush( data, len );
     7d2:	89 81       	ldd	r24, Y+1	; 0x01
     7d4:	9a 81       	ldd	r25, Y+2	; 0x02
     7d6:	6b 81       	ldd	r22, Y+3	; 0x03
     7d8:	e5 d3       	rcall	.+1994   	; 0xfa4 <cpuIoPush>
    return 1;
     7da:	81 e0       	ldi	r24, 0x01	; 1
}
     7dc:	0f 90       	pop	r0
     7de:	0f 90       	pop	r0
     7e0:	0f 90       	pop	r0
     7e2:	cf 91       	pop	r28
     7e4:	df 91       	pop	r29
     7e6:	08 95       	ret

000007e8 <usbDeviceRead>:

/* This function is similar to usbFunctionRead(), but it's also called for
 * data handled automatically by the driver (e.g. descriptor reads).
 */
static uchar usbDeviceRead(uchar *data, uchar len)
{
     7e8:	df 93       	push	r29
     7ea:	cf 93       	push	r28
     7ec:	cd b7       	in	r28, 0x3d	; 61
     7ee:	de b7       	in	r29, 0x3e	; 62
     7f0:	2a 97       	sbiw	r28, 0x0a	; 10
     7f2:	0f b6       	in	r0, 0x3f	; 63
     7f4:	f8 94       	cli
     7f6:	de bf       	out	0x3e, r29	; 62
     7f8:	0f be       	out	0x3f, r0	; 63
     7fa:	cd bf       	out	0x3d, r28	; 61
     7fc:	99 87       	std	Y+9, r25	; 0x09
     7fe:	88 87       	std	Y+8, r24	; 0x08
     800:	6a 87       	std	Y+10, r22	; 0x0a
    if(len > 0){    /* don't bother app with 0 sized reads */
     802:	8a 85       	ldd	r24, Y+10	; 0x0a
     804:	88 23       	and	r24, r24
     806:	09 f4       	brne	.+2      	; 0x80a <usbDeviceRead+0x22>
     808:	55 c0       	rjmp	.+170    	; 0x8b4 <usbDeviceRead+0xcc>
#if USB_CFG_IMPLEMENT_FN_READ
        if(usbMsgFlags & USB_FLG_USE_USER_RW){
     80a:	80 91 7e 00 	lds	r24, 0x007E
     80e:	88 23       	and	r24, r24
     810:	34 f4       	brge	.+12     	; 0x81e <usbDeviceRead+0x36>
            len = usbFunctionRead(data, len);
     812:	88 85       	ldd	r24, Y+8	; 0x08
     814:	99 85       	ldd	r25, Y+9	; 0x09
     816:	6a 85       	ldd	r22, Y+10	; 0x0a
     818:	bf df       	rcall	.-130    	; 0x798 <usbFunctionRead>
     81a:	8a 87       	std	Y+10, r24	; 0x0a
     81c:	4b c0       	rjmp	.+150    	; 0x8b4 <usbDeviceRead+0xcc>
        }else
#endif
        {
            uchar i = len, *r = usbMsgPtr;
     81e:	8a 85       	ldd	r24, Y+10	; 0x0a
     820:	8f 83       	std	Y+7, r24	; 0x07
     822:	80 91 92 01 	lds	r24, 0x0192
     826:	90 91 93 01 	lds	r25, 0x0193
     82a:	9e 83       	std	Y+6, r25	; 0x06
     82c:	8d 83       	std	Y+5, r24	; 0x05
            if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
     82e:	80 91 7e 00 	lds	r24, 0x007E
     832:	88 2f       	mov	r24, r24
     834:	90 e0       	ldi	r25, 0x00	; 0
     836:	80 74       	andi	r24, 0x40	; 64
     838:	90 70       	andi	r25, 0x00	; 0
     83a:	00 97       	sbiw	r24, 0x00	; 0
     83c:	f9 f0       	breq	.+62     	; 0x87c <usbDeviceRead+0x94>
                do{
                    uchar c = USB_READ_FLASH(r);    /* assign to char size variable to enforce byte ops */
     83e:	8d 81       	ldd	r24, Y+5	; 0x05
     840:	9e 81       	ldd	r25, Y+6	; 0x06
     842:	9b 83       	std	Y+3, r25	; 0x03
     844:	8a 83       	std	Y+2, r24	; 0x02
     846:	ea 81       	ldd	r30, Y+2	; 0x02
     848:	fb 81       	ldd	r31, Y+3	; 0x03
     84a:	84 91       	lpm	r24, Z+
     84c:	89 83       	std	Y+1, r24	; 0x01
     84e:	89 81       	ldd	r24, Y+1	; 0x01
     850:	8c 83       	std	Y+4, r24	; 0x04
                    *data++ = c;
     852:	e8 85       	ldd	r30, Y+8	; 0x08
     854:	f9 85       	ldd	r31, Y+9	; 0x09
     856:	8c 81       	ldd	r24, Y+4	; 0x04
     858:	80 83       	st	Z, r24
     85a:	88 85       	ldd	r24, Y+8	; 0x08
     85c:	99 85       	ldd	r25, Y+9	; 0x09
     85e:	01 96       	adiw	r24, 0x01	; 1
     860:	99 87       	std	Y+9, r25	; 0x09
     862:	88 87       	std	Y+8, r24	; 0x08
                    r++;
     864:	8d 81       	ldd	r24, Y+5	; 0x05
     866:	9e 81       	ldd	r25, Y+6	; 0x06
     868:	01 96       	adiw	r24, 0x01	; 1
     86a:	9e 83       	std	Y+6, r25	; 0x06
     86c:	8d 83       	std	Y+5, r24	; 0x05
                }while(--i);
     86e:	8f 81       	ldd	r24, Y+7	; 0x07
     870:	81 50       	subi	r24, 0x01	; 1
     872:	8f 83       	std	Y+7, r24	; 0x07
     874:	8f 81       	ldd	r24, Y+7	; 0x07
     876:	88 23       	and	r24, r24
     878:	11 f7       	brne	.-60     	; 0x83e <usbDeviceRead+0x56>
     87a:	16 c0       	rjmp	.+44     	; 0x8a8 <usbDeviceRead+0xc0>
            }else{  /* RAM data */
                do{
                    *data++ = *r++;
     87c:	ed 81       	ldd	r30, Y+5	; 0x05
     87e:	fe 81       	ldd	r31, Y+6	; 0x06
     880:	80 81       	ld	r24, Z
     882:	e8 85       	ldd	r30, Y+8	; 0x08
     884:	f9 85       	ldd	r31, Y+9	; 0x09
     886:	80 83       	st	Z, r24
     888:	88 85       	ldd	r24, Y+8	; 0x08
     88a:	99 85       	ldd	r25, Y+9	; 0x09
     88c:	01 96       	adiw	r24, 0x01	; 1
     88e:	99 87       	std	Y+9, r25	; 0x09
     890:	88 87       	std	Y+8, r24	; 0x08
     892:	8d 81       	ldd	r24, Y+5	; 0x05
     894:	9e 81       	ldd	r25, Y+6	; 0x06
     896:	01 96       	adiw	r24, 0x01	; 1
     898:	9e 83       	std	Y+6, r25	; 0x06
     89a:	8d 83       	std	Y+5, r24	; 0x05
                }while(--i);
     89c:	8f 81       	ldd	r24, Y+7	; 0x07
     89e:	81 50       	subi	r24, 0x01	; 1
     8a0:	8f 83       	std	Y+7, r24	; 0x07
     8a2:	8f 81       	ldd	r24, Y+7	; 0x07
     8a4:	88 23       	and	r24, r24
     8a6:	51 f7       	brne	.-44     	; 0x87c <usbDeviceRead+0x94>
            }
            usbMsgPtr = r;
     8a8:	8d 81       	ldd	r24, Y+5	; 0x05
     8aa:	9e 81       	ldd	r25, Y+6	; 0x06
     8ac:	90 93 93 01 	sts	0x0193, r25
     8b0:	80 93 92 01 	sts	0x0192, r24
        }
    }
    return len;
     8b4:	8a 85       	ldd	r24, Y+10	; 0x0a
}
     8b6:	2a 96       	adiw	r28, 0x0a	; 10
     8b8:	0f b6       	in	r0, 0x3f	; 63
     8ba:	f8 94       	cli
     8bc:	de bf       	out	0x3e, r29	; 62
     8be:	0f be       	out	0x3f, r0	; 63
     8c0:	cd bf       	out	0x3d, r28	; 61
     8c2:	cf 91       	pop	r28
     8c4:	df 91       	pop	r29
     8c6:	08 95       	ret

000008c8 <usbPoll>:
}

/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbPoll(void)
{
     8c8:	df 93       	push	r29
     8ca:	cf 93       	push	r28
     8cc:	00 d0       	rcall	.+0      	; 0x8ce <usbPoll+0x6>
     8ce:	0f 92       	push	r0
     8d0:	cd b7       	in	r28, 0x3d	; 61
     8d2:	de b7       	in	r29, 0x3e	; 62
schar   len;
uchar   i;

    len = usbRxLen - 3;
     8d4:	80 91 94 01 	lds	r24, 0x0194
     8d8:	83 50       	subi	r24, 0x03	; 3
     8da:	8b 83       	std	Y+3, r24	; 0x03
    if(len >= 0){
     8dc:	8b 81       	ldd	r24, Y+3	; 0x03
     8de:	88 23       	and	r24, r24
     8e0:	7c f0       	brlt	.+30     	; 0x900 <usbPoll+0x38>
 * need data integrity checks with this driver, check the CRC in your app
 * code and report errors back to the host. Since the ACK was already sent,
 * retries must be handled on application level.
 * unsigned crc = usbCrc16(buffer + 1, usbRxLen - 3);
 */
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
     8e2:	80 91 91 01 	lds	r24, 0x0191
     8e6:	28 2f       	mov	r18, r24
     8e8:	30 e0       	ldi	r19, 0x00	; 0
     8ea:	8c e0       	ldi	r24, 0x0C	; 12
     8ec:	90 e0       	ldi	r25, 0x00	; 0
     8ee:	82 1b       	sub	r24, r18
     8f0:	93 0b       	sbc	r25, r19
     8f2:	88 56       	subi	r24, 0x68	; 104
     8f4:	9e 4f       	sbci	r25, 0xFE	; 254
     8f6:	2b 81       	ldd	r18, Y+3	; 0x03
     8f8:	62 2f       	mov	r22, r18
     8fa:	2d d0       	rcall	.+90     	; 0x956 <usbProcessRx>
#if USB_CFG_HAVE_FLOWCONTROL
        if(usbRxLen > 0)    /* only mark as available if not inactivated */
            usbRxLen = 0;
#else
        usbRxLen = 0;       /* mark rx buffer as available */
     8fc:	10 92 94 01 	sts	0x0194, r1
#endif
    }
    if(usbTxLen & 0x10){    /* transmit system idle */
     900:	80 91 6b 00 	lds	r24, 0x006B
     904:	88 2f       	mov	r24, r24
     906:	90 e0       	ldi	r25, 0x00	; 0
     908:	80 71       	andi	r24, 0x10	; 16
     90a:	90 70       	andi	r25, 0x00	; 0
     90c:	00 97       	sbiw	r24, 0x00	; 0
     90e:	29 f0       	breq	.+10     	; 0x91a <usbPoll+0x52>
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
     910:	80 91 6c 00 	lds	r24, 0x006C
     914:	8f 3f       	cpi	r24, 0xFF	; 255
     916:	09 f0       	breq	.+2      	; 0x91a <usbPoll+0x52>
            usbBuildTxBlock();
     918:	53 d1       	rcall	.+678    	; 0xbc0 <usbBuildTxBlock>
        }
    }
    for(i = 20; i > 0; i--){
     91a:	84 e1       	ldi	r24, 0x14	; 20
     91c:	8a 83       	std	Y+2, r24	; 0x02
     91e:	0b c0       	rjmp	.+22     	; 0x936 <usbPoll+0x6e>
        uchar usbLineStatus = USBIN & USBMASK;
     920:	e0 e3       	ldi	r30, 0x30	; 48
     922:	f0 e0       	ldi	r31, 0x00	; 0
     924:	80 81       	ld	r24, Z
     926:	8c 70       	andi	r24, 0x0C	; 12
     928:	89 83       	std	Y+1, r24	; 0x01
        if(usbLineStatus != 0)  /* SE0 has ended */
     92a:	89 81       	ldd	r24, Y+1	; 0x01
     92c:	88 23       	and	r24, r24
     92e:	59 f4       	brne	.+22     	; 0x946 <usbPoll+0x7e>
    if(usbTxLen & 0x10){    /* transmit system idle */
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
     930:	8a 81       	ldd	r24, Y+2	; 0x02
     932:	81 50       	subi	r24, 0x01	; 1
     934:	8a 83       	std	Y+2, r24	; 0x02
     936:	8a 81       	ldd	r24, Y+2	; 0x02
     938:	88 23       	and	r24, r24
     93a:	91 f7       	brne	.-28     	; 0x920 <usbPoll+0x58>
        uchar usbLineStatus = USBIN & USBMASK;
        if(usbLineStatus != 0)  /* SE0 has ended */
            goto isNotReset;
    }
    /* RESET condition, called multiple times during reset */
    usbNewDeviceAddr = 0;
     93c:	10 92 95 01 	sts	0x0195, r1
    usbDeviceAddr = 0;
     940:	10 92 8f 01 	sts	0x018F, r1
    usbResetStall();
     944:	7b d1       	rcall	.+758    	; 0xc3c <usbResetStall>
    DBG1(0xff, 0, 0);
isNotReset:
    usbHandleResetHook(i);
     946:	8a 81       	ldd	r24, Y+2	; 0x02
     948:	80 d1       	rcall	.+768    	; 0xc4a <usbHandleResetHook>
}
     94a:	0f 90       	pop	r0
     94c:	0f 90       	pop	r0
     94e:	0f 90       	pop	r0
     950:	cf 91       	pop	r28
     952:	df 91       	pop	r29
     954:	08 95       	ret

00000956 <usbProcessRx>:
/* usbProcessRx() is called for every message received by the interrupt
 * routine. It distinguishes between SETUP and DATA packets and processes
 * them accordingly.
 */
static inline void usbProcessRx(uchar *data, uchar len)
{
     956:	df 93       	push	r29
     958:	cf 93       	push	r28
     95a:	cd b7       	in	r28, 0x3d	; 61
     95c:	de b7       	in	r29, 0x3e	; 62
     95e:	28 97       	sbiw	r28, 0x08	; 8
     960:	0f b6       	in	r0, 0x3f	; 63
     962:	f8 94       	cli
     964:	de bf       	out	0x3e, r29	; 62
     966:	0f be       	out	0x3f, r0	; 63
     968:	cd bf       	out	0x3d, r28	; 61
     96a:	9f 83       	std	Y+7, r25	; 0x07
     96c:	8e 83       	std	Y+6, r24	; 0x06
     96e:	68 87       	std	Y+8, r22	; 0x08
usbRequest_t    *rq = (void *)data;
     970:	8e 81       	ldd	r24, Y+6	; 0x06
     972:	9f 81       	ldd	r25, Y+7	; 0x07
     974:	9d 83       	std	Y+5, r25	; 0x05
     976:	8c 83       	std	Y+4, r24	; 0x04
    if(usbRxToken < 0x10){  /* OUT to endpoint != 0: endpoint number in usbRxToken */
        usbFunctionWriteOut(data, len);
        return;
    }
#endif
    if(usbRxToken == (uchar)USBPID_SETUP){
     978:	80 91 90 01 	lds	r24, 0x0190
     97c:	8d 32       	cpi	r24, 0x2D	; 45
     97e:	09 f0       	breq	.+2      	; 0x982 <usbProcessRx+0x2c>
     980:	40 c0       	rjmp	.+128    	; 0xa02 <usbProcessRx+0xac>
        if(len != 8)    /* Setup size must be always 8 bytes. Ignore otherwise. */
     982:	88 85       	ldd	r24, Y+8	; 0x08
     984:	88 30       	cpi	r24, 0x08	; 8
     986:	09 f0       	breq	.+2      	; 0x98a <usbProcessRx+0x34>
     988:	51 c0       	rjmp	.+162    	; 0xa2c <usbProcessRx+0xd6>
            return;
        usbMsgLen_t replyLen;
        usbTxBuf[0] = USBPID_DATA0;         /* initialize data toggling */
     98a:	83 ec       	ldi	r24, 0xC3	; 195
     98c:	80 93 84 01 	sts	0x0184, r24
        usbTxLen = USBPID_NAK;              /* abort pending transmit */
     990:	8a e5       	ldi	r24, 0x5A	; 90
     992:	80 93 6b 00 	sts	0x006B, r24
        usbMsgFlags = 0;
     996:	10 92 7e 00 	sts	0x007E, r1
        uchar type = rq->bmRequestType & USBRQ_TYPE_MASK;
     99a:	ec 81       	ldd	r30, Y+4	; 0x04
     99c:	fd 81       	ldd	r31, Y+5	; 0x05
     99e:	80 81       	ld	r24, Z
     9a0:	80 76       	andi	r24, 0x60	; 96
     9a2:	8a 83       	std	Y+2, r24	; 0x02
        if(type != USBRQ_TYPE_STANDARD){    /* standard requests are handled by driver */
     9a4:	8a 81       	ldd	r24, Y+2	; 0x02
     9a6:	88 23       	and	r24, r24
     9a8:	29 f0       	breq	.+10     	; 0x9b4 <usbProcessRx+0x5e>
            replyLen = usbFunctionSetup(data);
     9aa:	8e 81       	ldd	r24, Y+6	; 0x06
     9ac:	9f 81       	ldd	r25, Y+7	; 0x07
     9ae:	be de       	rcall	.-644    	; 0x72c <usbFunctionSetup>
     9b0:	8b 83       	std	Y+3, r24	; 0x03
     9b2:	04 c0       	rjmp	.+8      	; 0x9bc <usbProcessRx+0x66>
        }else{
            replyLen = usbDriverSetup(rq);
     9b4:	8c 81       	ldd	r24, Y+4	; 0x04
     9b6:	9d 81       	ldd	r25, Y+5	; 0x05
     9b8:	42 d0       	rcall	.+132    	; 0xa3e <usbDriverSetup>
     9ba:	8b 83       	std	Y+3, r24	; 0x03
        }
#if USB_CFG_IMPLEMENT_FN_READ || USB_CFG_IMPLEMENT_FN_WRITE
        if(replyLen == USB_NO_MSG){         /* use user-supplied read/write function */
     9bc:	8b 81       	ldd	r24, Y+3	; 0x03
     9be:	8f 3f       	cpi	r24, 0xFF	; 255
     9c0:	69 f4       	brne	.+26     	; 0x9dc <usbProcessRx+0x86>
            /* do some conditioning on replyLen, but on IN transfers only */
            if((rq->bmRequestType & USBRQ_DIR_MASK) != USBRQ_DIR_HOST_TO_DEVICE){
     9c2:	ec 81       	ldd	r30, Y+4	; 0x04
     9c4:	fd 81       	ldd	r31, Y+5	; 0x05
     9c6:	80 81       	ld	r24, Z
     9c8:	88 23       	and	r24, r24
     9ca:	24 f4       	brge	.+8      	; 0x9d4 <usbProcessRx+0x7e>
                if(sizeof(replyLen) < sizeof(rq->wLength.word)){ /* help compiler with optimizing */
                    replyLen = rq->wLength.bytes[0];
     9cc:	ec 81       	ldd	r30, Y+4	; 0x04
     9ce:	fd 81       	ldd	r31, Y+5	; 0x05
     9d0:	86 81       	ldd	r24, Z+6	; 0x06
     9d2:	8b 83       	std	Y+3, r24	; 0x03
                }else{
                    replyLen = rq->wLength.word;
                }
            }
            usbMsgFlags = USB_FLG_USE_USER_RW;
     9d4:	80 e8       	ldi	r24, 0x80	; 128
     9d6:	80 93 7e 00 	sts	0x007E, r24
     9da:	0f c0       	rjmp	.+30     	; 0x9fa <usbProcessRx+0xa4>
        }else   /* The 'else' prevents that we limit a replyLen of USB_NO_MSG to the maximum transfer len. */
#endif
        if(sizeof(replyLen) < sizeof(rq->wLength.word)){ /* help compiler with optimizing */
            if(!rq->wLength.bytes[1] && replyLen > rq->wLength.bytes[0])    /* limit length to max */
     9dc:	ec 81       	ldd	r30, Y+4	; 0x04
     9de:	fd 81       	ldd	r31, Y+5	; 0x05
     9e0:	87 81       	ldd	r24, Z+7	; 0x07
     9e2:	88 23       	and	r24, r24
     9e4:	51 f4       	brne	.+20     	; 0x9fa <usbProcessRx+0xa4>
     9e6:	ec 81       	ldd	r30, Y+4	; 0x04
     9e8:	fd 81       	ldd	r31, Y+5	; 0x05
     9ea:	96 81       	ldd	r25, Z+6	; 0x06
     9ec:	8b 81       	ldd	r24, Y+3	; 0x03
     9ee:	98 17       	cp	r25, r24
     9f0:	20 f4       	brcc	.+8      	; 0x9fa <usbProcessRx+0xa4>
                replyLen = rq->wLength.bytes[0];
     9f2:	ec 81       	ldd	r30, Y+4	; 0x04
     9f4:	fd 81       	ldd	r31, Y+5	; 0x05
     9f6:	86 81       	ldd	r24, Z+6	; 0x06
     9f8:	8b 83       	std	Y+3, r24	; 0x03
        }else{
            if(replyLen > rq->wLength.word)     /* limit length to max */
                replyLen = rq->wLength.word;
        }
        usbMsgLen = replyLen;
     9fa:	8b 81       	ldd	r24, Y+3	; 0x03
     9fc:	80 93 6c 00 	sts	0x006C, r24
     a00:	15 c0       	rjmp	.+42     	; 0xa2c <usbProcessRx+0xd6>
    }else{  /* usbRxToken must be USBPID_OUT, which means data phase of setup (control-out) */
#if USB_CFG_IMPLEMENT_FN_WRITE
        if(usbMsgFlags & USB_FLG_USE_USER_RW){
     a02:	80 91 7e 00 	lds	r24, 0x007E
     a06:	88 23       	and	r24, r24
     a08:	8c f4       	brge	.+34     	; 0xa2c <usbProcessRx+0xd6>
            uchar rval = usbFunctionWrite(data, len);
     a0a:	8e 81       	ldd	r24, Y+6	; 0x06
     a0c:	9f 81       	ldd	r25, Y+7	; 0x07
     a0e:	68 85       	ldd	r22, Y+8	; 0x08
     a10:	d7 de       	rcall	.-594    	; 0x7c0 <usbFunctionWrite>
     a12:	89 83       	std	Y+1, r24	; 0x01
            if(rval == 0xff){   /* an error occurred */
     a14:	89 81       	ldd	r24, Y+1	; 0x01
     a16:	8f 3f       	cpi	r24, 0xFF	; 255
     a18:	21 f4       	brne	.+8      	; 0xa22 <usbProcessRx+0xcc>
                usbTxLen = USBPID_STALL;
     a1a:	8e e1       	ldi	r24, 0x1E	; 30
     a1c:	80 93 6b 00 	sts	0x006B, r24
     a20:	05 c0       	rjmp	.+10     	; 0xa2c <usbProcessRx+0xd6>
            }else if(rval != 0){    /* This was the final package */
     a22:	89 81       	ldd	r24, Y+1	; 0x01
     a24:	88 23       	and	r24, r24
     a26:	11 f0       	breq	.+4      	; 0xa2c <usbProcessRx+0xd6>
                usbMsgLen = 0;  /* answer with a zero-sized data packet */
     a28:	10 92 6c 00 	sts	0x006C, r1
            }
        }
#endif
    }
}
     a2c:	28 96       	adiw	r28, 0x08	; 8
     a2e:	0f b6       	in	r0, 0x3f	; 63
     a30:	f8 94       	cli
     a32:	de bf       	out	0x3e, r29	; 62
     a34:	0f be       	out	0x3f, r0	; 63
     a36:	cd bf       	out	0x3d, r28	; 61
     a38:	cf 91       	pop	r28
     a3a:	df 91       	pop	r29
     a3c:	08 95       	ret

00000a3e <usbDriverSetup>:

/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
     a3e:	df 93       	push	r29
     a40:	cf 93       	push	r28
     a42:	cd b7       	in	r28, 0x3d	; 61
     a44:	de b7       	in	r29, 0x3e	; 62
     a46:	28 97       	sbiw	r28, 0x08	; 8
     a48:	0f b6       	in	r0, 0x3f	; 63
     a4a:	f8 94       	cli
     a4c:	de bf       	out	0x3e, r29	; 62
     a4e:	0f be       	out	0x3f, r0	; 63
     a50:	cd bf       	out	0x3d, r28	; 61
     a52:	98 87       	std	Y+8, r25	; 0x08
     a54:	8f 83       	std	Y+7, r24	; 0x07
usbMsgLen_t len = 0;
     a56:	1e 82       	std	Y+6, r1	; 0x06
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
     a58:	8d e8       	ldi	r24, 0x8D	; 141
     a5a:	91 e0       	ldi	r25, 0x01	; 1
     a5c:	9d 83       	std	Y+5, r25	; 0x05
     a5e:	8c 83       	std	Y+4, r24	; 0x04
uchar   value = rq->wValue.bytes[0];
     a60:	ef 81       	ldd	r30, Y+7	; 0x07
     a62:	f8 85       	ldd	r31, Y+8	; 0x08
     a64:	82 81       	ldd	r24, Z+2	; 0x02
     a66:	8b 83       	std	Y+3, r24	; 0x03
#if USB_CFG_IMPLEMENT_HALT
uchar   index = rq->wIndex.bytes[0];
#endif

    dataPtr[0] = 0; /* default reply common to USBRQ_GET_STATUS and USBRQ_GET_INTERFACE */
     a68:	ec 81       	ldd	r30, Y+4	; 0x04
     a6a:	fd 81       	ldd	r31, Y+5	; 0x05
     a6c:	10 82       	st	Z, r1
    SWITCH_START(rq->bRequest)
     a6e:	ef 81       	ldd	r30, Y+7	; 0x07
     a70:	f8 85       	ldd	r31, Y+8	; 0x08
     a72:	81 81       	ldd	r24, Z+1	; 0x01
     a74:	8a 83       	std	Y+2, r24	; 0x02
    SWITCH_CASE(USBRQ_GET_STATUS)           /* 0 */
     a76:	8a 81       	ldd	r24, Y+2	; 0x02
     a78:	88 23       	and	r24, r24
     a7a:	69 f4       	brne	.+26     	; 0xa96 <usbDriverSetup+0x58>
        uchar recipient = rq->bmRequestType & USBRQ_RCPT_MASK;  /* assign arith ops to variables to enforce byte size */
     a7c:	ef 81       	ldd	r30, Y+7	; 0x07
     a7e:	f8 85       	ldd	r31, Y+8	; 0x08
     a80:	80 81       	ld	r24, Z
     a82:	8f 71       	andi	r24, 0x1F	; 31
     a84:	89 83       	std	Y+1, r24	; 0x01
            dataPtr[0] =  USB_CFG_IS_SELF_POWERED;
#if USB_CFG_IMPLEMENT_HALT
        if(recipient == USBRQ_RCPT_ENDPOINT && index == 0x81)   /* request status for endpoint 1 */
            dataPtr[0] = usbTxLen1 == USBPID_STALL;
#endif
        dataPtr[1] = 0;
     a86:	8c 81       	ldd	r24, Y+4	; 0x04
     a88:	9d 81       	ldd	r25, Y+5	; 0x05
     a8a:	fc 01       	movw	r30, r24
     a8c:	31 96       	adiw	r30, 0x01	; 1
     a8e:	10 82       	st	Z, r1
        len = 2;
     a90:	82 e0       	ldi	r24, 0x02	; 2
     a92:	8e 83       	std	Y+6, r24	; 0x06
     a94:	26 c0       	rjmp	.+76     	; 0xae2 <usbDriverSetup+0xa4>
        if(value == 0 && index == 0x81){    /* feature 0 == HALT for endpoint == 1 */
            usbTxLen1 = rq->bRequest == USBRQ_CLEAR_FEATURE ? USBPID_NAK : USBPID_STALL;
            usbResetDataToggling();
        }
#endif
    SWITCH_CASE(USBRQ_SET_ADDRESS)          /* 5 */
     a96:	8a 81       	ldd	r24, Y+2	; 0x02
     a98:	85 30       	cpi	r24, 0x05	; 5
     a9a:	21 f4       	brne	.+8      	; 0xaa4 <usbDriverSetup+0x66>
        usbNewDeviceAddr = value;
     a9c:	8b 81       	ldd	r24, Y+3	; 0x03
     a9e:	80 93 95 01 	sts	0x0195, r24
     aa2:	1f c0       	rjmp	.+62     	; 0xae2 <usbDriverSetup+0xa4>
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
     aa4:	8a 81       	ldd	r24, Y+2	; 0x02
     aa6:	86 30       	cpi	r24, 0x06	; 6
     aa8:	29 f4       	brne	.+10     	; 0xab4 <usbDriverSetup+0x76>
        len = usbDriverDescriptor(rq);
     aaa:	8f 81       	ldd	r24, Y+7	; 0x07
     aac:	98 85       	ldd	r25, Y+8	; 0x08
     aae:	29 d0       	rcall	.+82     	; 0xb02 <usbDriverDescriptor>
     ab0:	8e 83       	std	Y+6, r24	; 0x06
     ab2:	1d c0       	rjmp	.+58     	; 0xaee <usbDriverSetup+0xb0>
        goto skipMsgPtrAssignment;
    SWITCH_CASE(USBRQ_GET_CONFIGURATION)    /* 8 */
     ab4:	8a 81       	ldd	r24, Y+2	; 0x02
     ab6:	88 30       	cpi	r24, 0x08	; 8
     ab8:	39 f4       	brne	.+14     	; 0xac8 <usbDriverSetup+0x8a>
        dataPtr = &usbConfiguration;  /* send current configuration value */
     aba:	87 e9       	ldi	r24, 0x97	; 151
     abc:	91 e0       	ldi	r25, 0x01	; 1
     abe:	9d 83       	std	Y+5, r25	; 0x05
     ac0:	8c 83       	std	Y+4, r24	; 0x04
        len = 1;
     ac2:	81 e0       	ldi	r24, 0x01	; 1
     ac4:	8e 83       	std	Y+6, r24	; 0x06
     ac6:	0d c0       	rjmp	.+26     	; 0xae2 <usbDriverSetup+0xa4>
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
     ac8:	8a 81       	ldd	r24, Y+2	; 0x02
     aca:	89 30       	cpi	r24, 0x09	; 9
     acc:	29 f4       	brne	.+10     	; 0xad8 <usbDriverSetup+0x9a>
        usbConfiguration = value;
     ace:	8b 81       	ldd	r24, Y+3	; 0x03
     ad0:	80 93 97 01 	sts	0x0197, r24
        usbResetStall();
     ad4:	b3 d0       	rcall	.+358    	; 0xc3c <usbResetStall>
     ad6:	05 c0       	rjmp	.+10     	; 0xae2 <usbDriverSetup+0xa4>
    SWITCH_CASE(USBRQ_GET_INTERFACE)        /* 10 */
     ad8:	8a 81       	ldd	r24, Y+2	; 0x02
     ada:	8a 30       	cpi	r24, 0x0A	; 10
     adc:	11 f4       	brne	.+4      	; 0xae2 <usbDriverSetup+0xa4>
        len = 1;
     ade:	81 e0       	ldi	r24, 0x01	; 1
     ae0:	8e 83       	std	Y+6, r24	; 0x06
        usbResetStall();
#endif
    SWITCH_DEFAULT                          /* 7=SET_DESCRIPTOR, 12=SYNC_FRAME */
        /* Should we add an optional hook here? */
    SWITCH_END
    usbMsgPtr = dataPtr;
     ae2:	8c 81       	ldd	r24, Y+4	; 0x04
     ae4:	9d 81       	ldd	r25, Y+5	; 0x05
     ae6:	90 93 93 01 	sts	0x0193, r25
     aea:	80 93 92 01 	sts	0x0192, r24
skipMsgPtrAssignment:
    return len;
     aee:	8e 81       	ldd	r24, Y+6	; 0x06
}
     af0:	28 96       	adiw	r28, 0x08	; 8
     af2:	0f b6       	in	r0, 0x3f	; 63
     af4:	f8 94       	cli
     af6:	de bf       	out	0x3e, r29	; 62
     af8:	0f be       	out	0x3f, r0	; 63
     afa:	cd bf       	out	0x3d, r28	; 61
     afc:	cf 91       	pop	r28
     afe:	df 91       	pop	r29
     b00:	08 95       	ret

00000b02 <usbDriverDescriptor>:

/* usbDriverDescriptor() is similar to usbFunctionDescriptor(), but used
 * internally for all types of descriptors.
 */
static inline usbMsgLen_t usbDriverDescriptor(usbRequest_t *rq)
{
     b02:	df 93       	push	r29
     b04:	cf 93       	push	r28
     b06:	00 d0       	rcall	.+0      	; 0xb08 <usbDriverDescriptor+0x6>
     b08:	00 d0       	rcall	.+0      	; 0xb0a <usbDriverDescriptor+0x8>
     b0a:	00 d0       	rcall	.+0      	; 0xb0c <usbDriverDescriptor+0xa>
     b0c:	cd b7       	in	r28, 0x3d	; 61
     b0e:	de b7       	in	r29, 0x3e	; 62
     b10:	9e 83       	std	Y+6, r25	; 0x06
     b12:	8d 83       	std	Y+5, r24	; 0x05
usbMsgLen_t len = 0;
     b14:	1c 82       	std	Y+4, r1	; 0x04
uchar       flags = USB_FLG_MSGPTR_IS_ROM;
     b16:	80 e4       	ldi	r24, 0x40	; 64
     b18:	8b 83       	std	Y+3, r24	; 0x03

    SWITCH_START(rq->wValue.bytes[1])
     b1a:	ed 81       	ldd	r30, Y+5	; 0x05
     b1c:	fe 81       	ldd	r31, Y+6	; 0x06
     b1e:	83 81       	ldd	r24, Z+3	; 0x03
     b20:	8a 83       	std	Y+2, r24	; 0x02
    SWITCH_CASE(USBDESCR_DEVICE)    /* 1 */
     b22:	8a 81       	ldd	r24, Y+2	; 0x02
     b24:	81 30       	cpi	r24, 0x01	; 1
     b26:	49 f4       	brne	.+18     	; 0xb3a <usbDriverDescriptor+0x38>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_DEVICE, usbDescriptorDevice)
     b28:	82 e1       	ldi	r24, 0x12	; 18
     b2a:	8c 83       	std	Y+4, r24	; 0x04
     b2c:	88 e6       	ldi	r24, 0x68	; 104
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	90 93 93 01 	sts	0x0193, r25
     b34:	80 93 92 01 	sts	0x0192, r24
     b38:	36 c0       	rjmp	.+108    	; 0xba6 <usbDriverDescriptor+0xa4>
    SWITCH_CASE(USBDESCR_CONFIG)    /* 2 */
     b3a:	8a 81       	ldd	r24, Y+2	; 0x02
     b3c:	82 30       	cpi	r24, 0x02	; 2
     b3e:	49 f4       	brne	.+18     	; 0xb52 <usbDriverDescriptor+0x50>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_CONFIGURATION, usbDescriptorConfiguration)
     b40:	82 e1       	ldi	r24, 0x12	; 18
     b42:	8c 83       	std	Y+4, r24	; 0x04
     b44:	8a e7       	ldi	r24, 0x7A	; 122
     b46:	90 e0       	ldi	r25, 0x00	; 0
     b48:	90 93 93 01 	sts	0x0193, r25
     b4c:	80 93 92 01 	sts	0x0192, r24
     b50:	2a c0       	rjmp	.+84     	; 0xba6 <usbDriverDescriptor+0xa4>
    SWITCH_CASE(USBDESCR_STRING)    /* 3 */
     b52:	8a 81       	ldd	r24, Y+2	; 0x02
     b54:	83 30       	cpi	r24, 0x03	; 3
     b56:	39 f5       	brne	.+78     	; 0xba6 <usbDriverDescriptor+0xa4>
#if USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC
        if(USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_RAM)
            flags = 0;
        len = usbFunctionDescriptor(rq);
#else   /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
        SWITCH_START(rq->wValue.bytes[0])
     b58:	ed 81       	ldd	r30, Y+5	; 0x05
     b5a:	fe 81       	ldd	r31, Y+6	; 0x06
     b5c:	82 81       	ldd	r24, Z+2	; 0x02
     b5e:	89 83       	std	Y+1, r24	; 0x01
        SWITCH_CASE(0)
     b60:	89 81       	ldd	r24, Y+1	; 0x01
     b62:	88 23       	and	r24, r24
     b64:	49 f4       	brne	.+18     	; 0xb78 <usbDriverDescriptor+0x76>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_0, usbDescriptorString0)
     b66:	84 e0       	ldi	r24, 0x04	; 4
     b68:	8c 83       	std	Y+4, r24	; 0x04
     b6a:	86 e2       	ldi	r24, 0x26	; 38
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	90 93 93 01 	sts	0x0193, r25
     b72:	80 93 92 01 	sts	0x0192, r24
     b76:	17 c0       	rjmp	.+46     	; 0xba6 <usbDriverDescriptor+0xa4>
        SWITCH_CASE(1)
     b78:	89 81       	ldd	r24, Y+1	; 0x01
     b7a:	81 30       	cpi	r24, 0x01	; 1
     b7c:	49 f4       	brne	.+18     	; 0xb90 <usbDriverDescriptor+0x8e>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_VENDOR, usbDescriptorStringVendor)
     b7e:	8e e1       	ldi	r24, 0x1E	; 30
     b80:	8c 83       	std	Y+4, r24	; 0x04
     b82:	8a e2       	ldi	r24, 0x2A	; 42
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	90 93 93 01 	sts	0x0193, r25
     b8a:	80 93 92 01 	sts	0x0192, r24
     b8e:	0b c0       	rjmp	.+22     	; 0xba6 <usbDriverDescriptor+0xa4>
        SWITCH_CASE(2)
     b90:	89 81       	ldd	r24, Y+1	; 0x01
     b92:	82 30       	cpi	r24, 0x02	; 2
     b94:	41 f4       	brne	.+16     	; 0xba6 <usbDriverDescriptor+0xa4>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_PRODUCT, usbDescriptorStringDevice)
     b96:	80 e2       	ldi	r24, 0x20	; 32
     b98:	8c 83       	std	Y+4, r24	; 0x04
     b9a:	88 e4       	ldi	r24, 0x48	; 72
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	90 93 93 01 	sts	0x0193, r25
     ba2:	80 93 92 01 	sts	0x0192, r24
    SWITCH_DEFAULT
        if(USB_CFG_DESCR_PROPS_UNKNOWN & USB_PROP_IS_DYNAMIC){
            len = usbFunctionDescriptor(rq);
        }
    SWITCH_END
    usbMsgFlags = flags;
     ba6:	8b 81       	ldd	r24, Y+3	; 0x03
     ba8:	80 93 7e 00 	sts	0x007E, r24
    return len;
     bac:	8c 81       	ldd	r24, Y+4	; 0x04
}
     bae:	26 96       	adiw	r28, 0x06	; 6
     bb0:	0f b6       	in	r0, 0x3f	; 63
     bb2:	f8 94       	cli
     bb4:	de bf       	out	0x3e, r29	; 62
     bb6:	0f be       	out	0x3f, r0	; 63
     bb8:	cd bf       	out	0x3d, r28	; 61
     bba:	cf 91       	pop	r28
     bbc:	df 91       	pop	r29
     bbe:	08 95       	ret

00000bc0 <usbBuildTxBlock>:

/* usbBuildTxBlock() is called when we have data to transmit and the
 * interrupt routine's transmit buffer is empty.
 */
static inline void usbBuildTxBlock(void)
{
     bc0:	df 93       	push	r29
     bc2:	cf 93       	push	r28
     bc4:	00 d0       	rcall	.+0      	; 0xbc6 <usbBuildTxBlock+0x6>
     bc6:	cd b7       	in	r28, 0x3d	; 61
     bc8:	de b7       	in	r29, 0x3e	; 62
usbMsgLen_t wantLen;
uchar       len;

    wantLen = usbMsgLen;
     bca:	80 91 6c 00 	lds	r24, 0x006C
     bce:	8a 83       	std	Y+2, r24	; 0x02
    if(wantLen > 8)
     bd0:	8a 81       	ldd	r24, Y+2	; 0x02
     bd2:	89 30       	cpi	r24, 0x09	; 9
     bd4:	10 f0       	brcs	.+4      	; 0xbda <usbBuildTxBlock+0x1a>
        wantLen = 8;
     bd6:	88 e0       	ldi	r24, 0x08	; 8
     bd8:	8a 83       	std	Y+2, r24	; 0x02
    usbMsgLen -= wantLen;
     bda:	90 91 6c 00 	lds	r25, 0x006C
     bde:	8a 81       	ldd	r24, Y+2	; 0x02
     be0:	29 2f       	mov	r18, r25
     be2:	28 1b       	sub	r18, r24
     be4:	82 2f       	mov	r24, r18
     be6:	80 93 6c 00 	sts	0x006C, r24
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
     bea:	90 91 84 01 	lds	r25, 0x0184
     bee:	88 e8       	ldi	r24, 0x88	; 136
     bf0:	89 27       	eor	r24, r25
     bf2:	80 93 84 01 	sts	0x0184, r24
    len = usbDeviceRead(usbTxBuf + 1, wantLen);
     bf6:	85 e8       	ldi	r24, 0x85	; 133
     bf8:	91 e0       	ldi	r25, 0x01	; 1
     bfa:	6a 81       	ldd	r22, Y+2	; 0x02
     bfc:	f5 dd       	rcall	.-1046   	; 0x7e8 <usbDeviceRead>
     bfe:	89 83       	std	Y+1, r24	; 0x01
    if(len <= 8){           /* valid data packet */
     c00:	89 81       	ldd	r24, Y+1	; 0x01
     c02:	89 30       	cpi	r24, 0x09	; 9
     c04:	70 f4       	brcc	.+28     	; 0xc22 <usbBuildTxBlock+0x62>
        usbCrc16Append(&usbTxBuf[1], len);
     c06:	85 e8       	ldi	r24, 0x85	; 133
     c08:	91 e0       	ldi	r25, 0x01	; 1
     c0a:	69 81       	ldd	r22, Y+1	; 0x01
     c0c:	5a d0       	rcall	.+180    	; 0xcc2 <usbCrc16Append>
        len += 4;           /* length including sync byte */
     c0e:	89 81       	ldd	r24, Y+1	; 0x01
     c10:	8c 5f       	subi	r24, 0xFC	; 252
     c12:	89 83       	std	Y+1, r24	; 0x01
        if(len < 12)        /* a partial package identifies end of message */
     c14:	89 81       	ldd	r24, Y+1	; 0x01
     c16:	8c 30       	cpi	r24, 0x0C	; 12
     c18:	48 f4       	brcc	.+18     	; 0xc2c <usbBuildTxBlock+0x6c>
            usbMsgLen = USB_NO_MSG;
     c1a:	8f ef       	ldi	r24, 0xFF	; 255
     c1c:	80 93 6c 00 	sts	0x006C, r24
     c20:	05 c0       	rjmp	.+10     	; 0xc2c <usbBuildTxBlock+0x6c>
    }else{
        len = USBPID_STALL;   /* stall the endpoint */
     c22:	8e e1       	ldi	r24, 0x1E	; 30
     c24:	89 83       	std	Y+1, r24	; 0x01
        usbMsgLen = USB_NO_MSG;
     c26:	8f ef       	ldi	r24, 0xFF	; 255
     c28:	80 93 6c 00 	sts	0x006C, r24
    }
    usbTxLen = len;
     c2c:	89 81       	ldd	r24, Y+1	; 0x01
     c2e:	80 93 6b 00 	sts	0x006B, r24
    DBG2(0x20, usbTxBuf, len-1);
}
     c32:	0f 90       	pop	r0
     c34:	0f 90       	pop	r0
     c36:	cf 91       	pop	r28
     c38:	df 91       	pop	r29
     c3a:	08 95       	ret

00000c3c <usbResetStall>:
#   endif
#endif
}

static inline void  usbResetStall(void)
{
     c3c:	df 93       	push	r29
     c3e:	cf 93       	push	r28
     c40:	cd b7       	in	r28, 0x3d	; 61
     c42:	de b7       	in	r29, 0x3e	; 62
        usbTxLen1 = USBPID_NAK;
#if USB_CFG_HAVE_INTRIN_ENDPOINT3
        usbTxLen3 = USBPID_NAK;
#endif
#endif
}
     c44:	cf 91       	pop	r28
     c46:	df 91       	pop	r29
     c48:	08 95       	ret

00000c4a <usbHandleResetHook>:
}

/* ------------------------------------------------------------------------- */

static inline void usbHandleResetHook(uchar notResetState)
{
     c4a:	df 93       	push	r29
     c4c:	cf 93       	push	r28
     c4e:	0f 92       	push	r0
     c50:	cd b7       	in	r28, 0x3d	; 61
     c52:	de b7       	in	r29, 0x3e	; 62
     c54:	89 83       	std	Y+1, r24	; 0x01
        wasReset = isReset;
    }
#else
    notResetState = notResetState;  // avoid compiler warning
#endif
}
     c56:	0f 90       	pop	r0
     c58:	cf 91       	pop	r28
     c5a:	df 91       	pop	r29
     c5c:	08 95       	ret

00000c5e <usbInit>:
}

/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbInit(void)
{
     c5e:	df 93       	push	r29
     c60:	cf 93       	push	r28
     c62:	cd b7       	in	r28, 0x3d	; 61
     c64:	de b7       	in	r29, 0x3e	; 62
#if USB_INTR_CFG_SET != 0
    USB_INTR_CFG |= USB_INTR_CFG_SET;
     c66:	a5 e5       	ldi	r26, 0x55	; 85
     c68:	b0 e0       	ldi	r27, 0x00	; 0
     c6a:	e5 e5       	ldi	r30, 0x55	; 85
     c6c:	f0 e0       	ldi	r31, 0x00	; 0
     c6e:	80 81       	ld	r24, Z
     c70:	82 60       	ori	r24, 0x02	; 2
     c72:	8c 93       	st	X, r24
#endif
#if USB_INTR_CFG_CLR != 0
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
     c74:	ab e5       	ldi	r26, 0x5B	; 91
     c76:	b0 e0       	ldi	r27, 0x00	; 0
     c78:	eb e5       	ldi	r30, 0x5B	; 91
     c7a:	f0 e0       	ldi	r31, 0x00	; 0
     c7c:	80 81       	ld	r24, Z
     c7e:	80 64       	ori	r24, 0x40	; 64
     c80:	8c 93       	st	X, r24
    usbResetDataToggling();
     c82:	03 d0       	rcall	.+6      	; 0xc8a <usbResetDataToggling>
    usbTxLen1 = USBPID_NAK;
#if USB_CFG_HAVE_INTRIN_ENDPOINT3
    usbTxLen3 = USBPID_NAK;
#endif
#endif
}
     c84:	cf 91       	pop	r28
     c86:	df 91       	pop	r29
     c88:	08 95       	ret

00000c8a <usbResetDataToggling>:
#endif

/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
     c8a:	df 93       	push	r29
     c8c:	cf 93       	push	r28
     c8e:	cd b7       	in	r28, 0x3d	; 61
     c90:	de b7       	in	r29, 0x3e	; 62
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
#   if USB_CFG_HAVE_INTRIN_ENDPOINT3
    USB_SET_DATATOKEN3(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
#   endif
#endif
}
     c92:	cf 91       	pop	r28
     c94:	df 91       	pop	r29
     c96:	08 95       	ret

00000c98 <usbCrc16>:
     c98:	a8 2f       	mov	r26, r24
     c9a:	b9 2f       	mov	r27, r25
     c9c:	80 e0       	ldi	r24, 0x00	; 0
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	41 e0       	ldi	r20, 0x01	; 1
     ca2:	50 ea       	ldi	r21, 0xA0	; 160
     ca4:	60 95       	com	r22
     ca6:	30 e0       	ldi	r19, 0x00	; 0
     ca8:	09 c0       	rjmp	.+18     	; 0xcbc <usbCrcLoopEntry>

00000caa <usbCrcByteLoop>:
     caa:	2d 91       	ld	r18, X+
     cac:	82 27       	eor	r24, r18

00000cae <usbCrcBitLoop>:
     cae:	97 95       	ror	r25
     cb0:	87 95       	ror	r24
     cb2:	10 f0       	brcs	.+4      	; 0xcb8 <usbCrcNoXor>
     cb4:	84 27       	eor	r24, r20
     cb6:	95 27       	eor	r25, r21

00000cb8 <usbCrcNoXor>:
     cb8:	30 5e       	subi	r19, 0xE0	; 224
     cba:	c8 f3       	brcs	.-14     	; 0xcae <usbCrcBitLoop>

00000cbc <usbCrcLoopEntry>:
     cbc:	6f 5f       	subi	r22, 0xFF	; 255
     cbe:	a8 f3       	brcs	.-22     	; 0xcaa <usbCrcByteLoop>

00000cc0 <usbCrcReady>:
     cc0:	08 95       	ret

00000cc2 <usbCrc16Append>:
     cc2:	ea df       	rcall	.-44     	; 0xc98 <usbCrc16>
     cc4:	8d 93       	st	X+, r24
     cc6:	9d 93       	st	X+, r25
     cc8:	08 95       	ret

00000cca <__vector_1>:
     cca:	cf 93       	push	r28
     ccc:	cf b7       	in	r28, 0x3f	; 63
     cce:	cf 93       	push	r28

00000cd0 <waitForJ>:
     cd0:	c3 95       	inc	r28
     cd2:	83 9b       	sbis	0x10, 3	; 16
     cd4:	e9 f7       	brne	.-6      	; 0xcd0 <waitForJ>

00000cd6 <waitForK>:
     cd6:	83 9b       	sbis	0x10, 3	; 16
     cd8:	09 c0       	rjmp	.+18     	; 0xcec <foundK>
     cda:	83 9b       	sbis	0x10, 3	; 16
     cdc:	07 c0       	rjmp	.+14     	; 0xcec <foundK>
     cde:	83 9b       	sbis	0x10, 3	; 16
     ce0:	05 c0       	rjmp	.+10     	; 0xcec <foundK>
     ce2:	83 9b       	sbis	0x10, 3	; 16
     ce4:	03 c0       	rjmp	.+6      	; 0xcec <foundK>
     ce6:	83 9b       	sbis	0x10, 3	; 16
     ce8:	01 c0       	rjmp	.+2      	; 0xcec <foundK>
     cea:	a1 c0       	rjmp	.+322    	; 0xe2e <sofError>

00000cec <foundK>:
     cec:	df 93       	push	r29
     cee:	c0 91 91 01 	lds	r28, 0x0191
     cf2:	dd 27       	eor	r29, r29
     cf4:	c8 56       	subi	r28, 0x68	; 104
     cf6:	de 4f       	sbci	r29, 0xFE	; 254
     cf8:	83 9b       	sbis	0x10, 3	; 16
     cfa:	02 c0       	rjmp	.+4      	; 0xd00 <haveTwoBitsK>
     cfc:	df 91       	pop	r29
     cfe:	eb cf       	rjmp	.-42     	; 0xcd6 <waitForK>

00000d00 <haveTwoBitsK>:
     d00:	2f 93       	push	r18
     d02:	0f 93       	push	r16
     d04:	1f 93       	push	r17
     d06:	00 b3       	in	r16, 0x10	; 16
     d08:	2f ef       	ldi	r18, 0xFF	; 255
     d0a:	03 fb       	bst	r16, 3
     d0c:	20 f9       	bld	r18, 0
     d0e:	4f 93       	push	r20
     d10:	3f 93       	push	r19
     d12:	10 b3       	in	r17, 0x10	; 16
     d14:	4f ef       	ldi	r20, 0xFF	; 255
     d16:	01 27       	eor	r16, r17
     d18:	03 fb       	bst	r16, 3
     d1a:	21 f9       	bld	r18, 1
     d1c:	3b e0       	ldi	r19, 0x0B	; 11
     d1e:	31 c0       	rjmp	.+98     	; 0xd82 <rxbit2>

00000d20 <unstuff0>:
     d20:	4e 7f       	andi	r20, 0xFE	; 254
     d22:	01 2f       	mov	r16, r17
     d24:	10 b3       	in	r17, 0x10	; 16
     d26:	21 60       	ori	r18, 0x01	; 1
     d28:	28 c0       	rjmp	.+80     	; 0xd7a <didUnstuff0>

00000d2a <unstuff1>:
     d2a:	10 2f       	mov	r17, r16
     d2c:	4d 7f       	andi	r20, 0xFD	; 253
     d2e:	22 60       	ori	r18, 0x02	; 2
     d30:	00 00       	nop
     d32:	00 b3       	in	r16, 0x10	; 16
     d34:	29 c0       	rjmp	.+82     	; 0xd88 <didUnstuff1>

00000d36 <unstuff2>:
     d36:	4b 7f       	andi	r20, 0xFB	; 251
     d38:	24 60       	ori	r18, 0x04	; 4
     d3a:	01 2f       	mov	r16, r17
     d3c:	00 00       	nop
     d3e:	10 b3       	in	r17, 0x10	; 16
     d40:	2b c0       	rjmp	.+86     	; 0xd98 <didUnstuff2>

00000d42 <unstuff3>:
     d42:	10 b3       	in	r17, 0x10	; 16
     d44:	47 7f       	andi	r20, 0xF7	; 247
     d46:	28 60       	ori	r18, 0x08	; 8
     d48:	2a c0       	rjmp	.+84     	; 0xd9e <didUnstuff3>

00000d4a <unstuff4>:
     d4a:	4f 7e       	andi	r20, 0xEF	; 239
     d4c:	00 b3       	in	r16, 0x10	; 16
     d4e:	20 61       	ori	r18, 0x10	; 16
     d50:	2c c0       	rjmp	.+88     	; 0xdaa <didUnstuff4>

00000d52 <unstuff5>:
     d52:	4f 7d       	andi	r20, 0xDF	; 223
     d54:	10 b3       	in	r17, 0x10	; 16
     d56:	20 62       	ori	r18, 0x20	; 32
     d58:	2f c0       	rjmp	.+94     	; 0xdb8 <didUnstuff5>

00000d5a <unstuff6>:
     d5a:	4f 7b       	andi	r20, 0xBF	; 191
     d5c:	00 b3       	in	r16, 0x10	; 16
     d5e:	20 64       	ori	r18, 0x40	; 64
     d60:	32 c0       	rjmp	.+100    	; 0xdc6 <didUnstuff6>

00000d62 <rxLoop>:
     d62:	42 27       	eor	r20, r18
     d64:	00 b3       	in	r16, 0x10	; 16
     d66:	49 93       	st	Y+, r20
     d68:	4f ef       	ldi	r20, 0xFF	; 255
     d6a:	00 00       	nop
     d6c:	10 27       	eor	r17, r16
     d6e:	13 fb       	bst	r17, 3
     d70:	20 f9       	bld	r18, 0
     d72:	10 b3       	in	r17, 0x10	; 16
     d74:	1c 70       	andi	r17, 0x0C	; 12
     d76:	c9 f1       	breq	.+114    	; 0xdea <se0>
     d78:	29 7f       	andi	r18, 0xF9	; 249

00000d7a <didUnstuff0>:
     d7a:	91 f2       	breq	.-92     	; 0xd20 <unstuff0>
     d7c:	01 27       	eor	r16, r17
     d7e:	03 fb       	bst	r16, 3
     d80:	21 f9       	bld	r18, 1

00000d82 <rxbit2>:
     d82:	00 b3       	in	r16, 0x10	; 16
     d84:	23 7f       	andi	r18, 0xF3	; 243
     d86:	89 f2       	breq	.-94     	; 0xd2a <unstuff1>

00000d88 <didUnstuff1>:
     d88:	31 50       	subi	r19, 0x01	; 1
     d8a:	58 f1       	brcs	.+86     	; 0xde2 <overflow>
     d8c:	10 27       	eor	r17, r16
     d8e:	13 fb       	bst	r17, 3
     d90:	22 f9       	bld	r18, 2
     d92:	10 b3       	in	r17, 0x10	; 16
     d94:	27 7e       	andi	r18, 0xE7	; 231
     d96:	79 f2       	breq	.-98     	; 0xd36 <unstuff2>

00000d98 <didUnstuff2>:
     d98:	01 27       	eor	r16, r17
     d9a:	03 fb       	bst	r16, 3
     d9c:	23 f9       	bld	r18, 3

00000d9e <didUnstuff3>:
     d9e:	2f 7c       	andi	r18, 0xCF	; 207
     da0:	81 f2       	breq	.-96     	; 0xd42 <unstuff3>
     da2:	00 b3       	in	r16, 0x10	; 16
     da4:	10 27       	eor	r17, r16
     da6:	13 fb       	bst	r17, 3
     da8:	24 f9       	bld	r18, 4

00000daa <didUnstuff4>:
     daa:	2f 79       	andi	r18, 0x9F	; 159
     dac:	71 f2       	breq	.-100    	; 0xd4a <unstuff4>
     dae:	00 c0       	rjmp	.+0      	; 0xdb0 <didUnstuff4+0x6>
     db0:	10 b3       	in	r17, 0x10	; 16
     db2:	01 27       	eor	r16, r17
     db4:	03 fb       	bst	r16, 3
     db6:	25 f9       	bld	r18, 5

00000db8 <didUnstuff5>:
     db8:	2f 73       	andi	r18, 0x3F	; 63
     dba:	59 f2       	breq	.-106    	; 0xd52 <unstuff5>
     dbc:	00 c0       	rjmp	.+0      	; 0xdbe <didUnstuff5+0x6>
     dbe:	00 b3       	in	r16, 0x10	; 16
     dc0:	10 27       	eor	r17, r16
     dc2:	13 fb       	bst	r17, 3
     dc4:	26 f9       	bld	r18, 6

00000dc6 <didUnstuff6>:
     dc6:	22 30       	cpi	r18, 0x02	; 2
     dc8:	40 f2       	brcs	.-112    	; 0xd5a <unstuff6>
     dca:	00 c0       	rjmp	.+0      	; 0xdcc <didUnstuff6+0x6>
     dcc:	10 b3       	in	r17, 0x10	; 16
     dce:	01 27       	eor	r16, r17
     dd0:	03 fb       	bst	r16, 3
     dd2:	27 f9       	bld	r18, 7

00000dd4 <didUnstuff7>:
     dd4:	24 30       	cpi	r18, 0x04	; 4
     dd6:	28 f6       	brcc	.-118    	; 0xd62 <rxLoop>

00000dd8 <unstuff7>:
     dd8:	4f 77       	andi	r20, 0x7F	; 127
     dda:	20 68       	ori	r18, 0x80	; 128
     ddc:	10 b3       	in	r17, 0x10	; 16
     dde:	00 00       	nop
     de0:	f9 cf       	rjmp	.-14     	; 0xdd4 <didUnstuff7>

00000de2 <overflow>:
     de2:	10 e4       	ldi	r17, 0x40	; 64
     de4:	1a bf       	out	0x3a, r17	; 58

00000de6 <ignorePacket>:
     de6:	00 27       	eor	r16, r16
     de8:	17 c0       	rjmp	.+46     	; 0xe18 <handleSetupOrOut>

00000dea <se0>:
     dea:	3b 50       	subi	r19, 0x0B	; 11
     dec:	31 95       	neg	r19
     dee:	c3 1b       	sub	r28, r19
     df0:	d0 40       	sbci	r29, 0x00	; 0
     df2:	10 e4       	ldi	r17, 0x40	; 64
     df4:	1a bf       	out	0x3a, r17	; 58
     df6:	08 81       	ld	r16, Y
     df8:	03 3c       	cpi	r16, 0xC3	; 195
     dfa:	e9 f0       	breq	.+58     	; 0xe36 <handleData>
     dfc:	0b 34       	cpi	r16, 0x4B	; 75
     dfe:	d9 f0       	breq	.+54     	; 0xe36 <handleData>
     e00:	20 91 8f 01 	lds	r18, 0x018F
     e04:	19 81       	ldd	r17, Y+1	; 0x01
     e06:	11 0f       	add	r17, r17
     e08:	12 13       	cpse	r17, r18
     e0a:	ed cf       	rjmp	.-38     	; 0xde6 <ignorePacket>
     e0c:	09 36       	cpi	r16, 0x69	; 105
     e0e:	41 f1       	breq	.+80     	; 0xe60 <handleIn>
     e10:	0d 32       	cpi	r16, 0x2D	; 45
     e12:	11 f0       	breq	.+4      	; 0xe18 <handleSetupOrOut>
     e14:	01 3e       	cpi	r16, 0xE1	; 225
     e16:	39 f7       	brne	.-50     	; 0xde6 <ignorePacket>

00000e18 <handleSetupOrOut>:
     e18:	00 93 96 01 	sts	0x0196, r16

00000e1c <doReturn>:
     e1c:	3f 91       	pop	r19
     e1e:	4f 91       	pop	r20
     e20:	1f 91       	pop	r17
     e22:	0f 91       	pop	r16
     e24:	2f 91       	pop	r18
     e26:	df 91       	pop	r29
     e28:	ca b7       	in	r28, 0x3a	; 58
     e2a:	c6 fd       	sbrc	r28, 6
     e2c:	51 cf       	rjmp	.-350    	; 0xcd0 <waitForJ>

00000e2e <sofError>:
     e2e:	cf 91       	pop	r28
     e30:	cf bf       	out	0x3f, r28	; 63
     e32:	cf 91       	pop	r28
     e34:	18 95       	reti

00000e36 <handleData>:
     e36:	20 91 96 01 	lds	r18, 0x0196
     e3a:	22 23       	and	r18, r18
     e3c:	79 f3       	breq	.-34     	; 0xe1c <doReturn>
     e3e:	10 91 94 01 	lds	r17, 0x0194
     e42:	11 23       	and	r17, r17
     e44:	11 f5       	brne	.+68     	; 0xe8a <sendNakAndReti>
     e46:	34 30       	cpi	r19, 0x04	; 4
     e48:	12 f1       	brmi	.+68     	; 0xe8e <sendAckAndReti>
     e4a:	30 93 94 01 	sts	0x0194, r19
     e4e:	20 93 90 01 	sts	0x0190, r18
     e52:	10 91 91 01 	lds	r17, 0x0191
     e56:	3b e0       	ldi	r19, 0x0B	; 11
     e58:	31 1b       	sub	r19, r17
     e5a:	30 93 91 01 	sts	0x0191, r19
     e5e:	17 c0       	rjmp	.+46     	; 0xe8e <sendAckAndReti>

00000e60 <handleIn>:
     e60:	00 91 94 01 	lds	r16, 0x0194
     e64:	01 30       	cpi	r16, 0x01	; 1
     e66:	8c f4       	brge	.+34     	; 0xe8a <sendNakAndReti>
     e68:	0a e5       	ldi	r16, 0x5A	; 90
     e6a:	30 91 6b 00 	lds	r19, 0x006B
     e6e:	34 fd       	sbrc	r19, 4
     e70:	10 c0       	rjmp	.+32     	; 0xe92 <sendCntAndReti>
     e72:	00 93 6b 00 	sts	0x006B, r16
     e76:	c4 e8       	ldi	r28, 0x84	; 132
     e78:	d1 e0       	ldi	r29, 0x01	; 1
     e7a:	0f c0       	rjmp	.+30     	; 0xe9a <usbSendAndReti>

00000e7c <stuffN1Delay>:
     e7c:	27 95       	ror	r18
     e7e:	a8 f4       	brcc	.+42     	; 0xeaa <doExorN1>
     e80:	51 50       	subi	r21, 0x01	; 1
     e82:	a9 f4       	brne	.+42     	; 0xeae <commonN1>
     e84:	22 0f       	add	r18, r18
     e86:	00 00       	nop
     e88:	f9 cf       	rjmp	.-14     	; 0xe7c <stuffN1Delay>

00000e8a <sendNakAndReti>:
     e8a:	4a e5       	ldi	r20, 0x5A	; 90
     e8c:	03 c0       	rjmp	.+6      	; 0xe94 <usbSendX3>

00000e8e <sendAckAndReti>:
     e8e:	42 ed       	ldi	r20, 0xD2	; 210
     e90:	01 c0       	rjmp	.+2      	; 0xe94 <usbSendX3>

00000e92 <sendCntAndReti>:
     e92:	43 2f       	mov	r20, r19

00000e94 <usbSendX3>:
     e94:	c4 e1       	ldi	r28, 0x14	; 20
     e96:	d0 e0       	ldi	r29, 0x00	; 0
     e98:	32 e0       	ldi	r19, 0x02	; 2

00000e9a <usbSendAndReti>:
     e9a:	11 b3       	in	r17, 0x11	; 17
     e9c:	1c 60       	ori	r17, 0x0C	; 12
     e9e:	93 9a       	sbi	0x12, 3	; 18
     ea0:	11 bb       	out	0x11, r17	; 17
     ea2:	02 b3       	in	r16, 0x12	; 18
     ea4:	20 e4       	ldi	r18, 0x40	; 64
     ea6:	1c e0       	ldi	r17, 0x0C	; 12
     ea8:	5f 93       	push	r21

00000eaa <doExorN1>:
     eaa:	01 27       	eor	r16, r17
     eac:	56 e0       	ldi	r21, 0x06	; 6

00000eae <commonN1>:
     eae:	02 bb       	out	0x12, r16	; 18
     eb0:	27 95       	ror	r18
     eb2:	20 f4       	brcc	.+8      	; 0xebc <doExorN2>
     eb4:	51 50       	subi	r21, 0x01	; 1
     eb6:	21 f4       	brne	.+8      	; 0xec0 <commonN2>
     eb8:	22 0f       	add	r18, r18
     eba:	f9 cf       	rjmp	.-14     	; 0xeae <commonN1>

00000ebc <doExorN2>:
     ebc:	01 27       	eor	r16, r17
     ebe:	56 e0       	ldi	r21, 0x06	; 6

00000ec0 <commonN2>:
     ec0:	00 00       	nop
     ec2:	3b 5a       	subi	r19, 0xAB	; 171
     ec4:	02 bb       	out	0x12, r16	; 18
     ec6:	d0 f2       	brcs	.-76     	; 0xe7c <stuffN1Delay>

00000ec8 <stuff6Delay>:
     ec8:	27 95       	ror	r18
     eca:	28 f4       	brcc	.+10     	; 0xed6 <doExor6>
     ecc:	51 50       	subi	r21, 0x01	; 1
     ece:	29 f4       	brne	.+10     	; 0xeda <common6>
     ed0:	22 0f       	add	r18, r18
     ed2:	00 00       	nop
     ed4:	f9 cf       	rjmp	.-14     	; 0xec8 <stuff6Delay>

00000ed6 <doExor6>:
     ed6:	01 27       	eor	r16, r17
     ed8:	56 e0       	ldi	r21, 0x06	; 6

00000eda <common6>:
     eda:	27 95       	ror	r18
     edc:	02 bb       	out	0x12, r16	; 18
     ede:	20 f4       	brcc	.+8      	; 0xee8 <doExor7>
     ee0:	51 50       	subi	r21, 0x01	; 1
     ee2:	21 f4       	brne	.+8      	; 0xeec <common7>
     ee4:	22 0f       	add	r18, r18
     ee6:	f9 cf       	rjmp	.-14     	; 0xeda <common6>

00000ee8 <doExor7>:
     ee8:	01 27       	eor	r16, r17
     eea:	56 e0       	ldi	r21, 0x06	; 6

00000eec <common7>:
     eec:	29 91       	ld	r18, Y+
     eee:	33 23       	and	r19, r19
     ef0:	02 bb       	out	0x12, r16	; 18
     ef2:	21 f6       	brne	.-120    	; 0xe7c <stuffN1Delay>
     ef4:	03 7f       	andi	r16, 0xF3	; 243
     ef6:	10 91 95 01 	lds	r17, 0x0195
     efa:	11 0f       	add	r17, r17
     efc:	c6 51       	subi	r28, 0x16	; 22
     efe:	d0 40       	sbci	r29, 0x00	; 0
     f00:	02 bb       	out	0x12, r16	; 18
     f02:	11 f0       	breq	.+4      	; 0xf08 <skipAddrAssign>
     f04:	10 93 8f 01 	sts	0x018F, r17

00000f08 <skipAddrAssign>:
     f08:	10 e4       	ldi	r17, 0x40	; 64
     f0a:	1a bf       	out	0x3a, r17	; 58
     f0c:	08 60       	ori	r16, 0x08	; 8
     f0e:	11 b3       	in	r17, 0x11	; 17
     f10:	13 7f       	andi	r17, 0xF3	; 243
     f12:	40 2f       	mov	r20, r16
     f14:	43 7f       	andi	r20, 0xF3	; 243
     f16:	5f 91       	pop	r21
     f18:	00 c0       	rjmp	.+0      	; 0xf1a <skipAddrAssign+0x12>
     f1a:	00 c0       	rjmp	.+0      	; 0xf1c <skipAddrAssign+0x14>
     f1c:	02 bb       	out	0x12, r16	; 18
     f1e:	11 bb       	out	0x11, r17	; 17
     f20:	42 bb       	out	0x12, r20	; 18
     f22:	7c cf       	rjmp	.-264    	; 0xe1c <doReturn>

00000f24 <cpuIoInit>:

#define IO_WATCHDOG_TOP    200 // 2 seconds if timer0 counts up to 100 with 1024 prescaler at 20MHz.
uint16_t g_ioWatchdog = 0;

void cpuIoInit( void )
{
     f24:	df 93       	push	r29
     f26:	cf 93       	push	r28
     f28:	cd b7       	in	r28, 0x3d	; 61
     f2a:	de b7       	in	r29, 0x3e	; 62
    TCCR0 = 0; // disable timer0;
     f2c:	e3 e5       	ldi	r30, 0x53	; 83
     f2e:	f0 e0       	ldi	r31, 0x00	; 0
     f30:	10 82       	st	Z, r1
    TCNT0 = 0; // reset it's counter;
     f32:	e2 e5       	ldi	r30, 0x52	; 82
     f34:	f0 e0       	ldi	r31, 0x00	; 0
     f36:	10 82       	st	Z, r1
    TCCR0 = (1 << CS02) | (1 << CS00); // run timer0 with x1024 prescaler.
     f38:	e3 e5       	ldi	r30, 0x53	; 83
     f3a:	f0 e0       	ldi	r31, 0x00	; 0
     f3c:	85 e0       	ldi	r24, 0x05	; 5
     f3e:	80 83       	st	Z, r24
}
     f40:	cf 91       	pop	r28
     f42:	df 91       	pop	r29
     f44:	08 95       	ret

00000f46 <cpuIoPoll>:

void cpuIoPoll( void )
{
     f46:	df 93       	push	r29
     f48:	cf 93       	push	r28
     f4a:	cd b7       	in	r28, 0x3d	; 61
     f4c:	de b7       	in	r29, 0x3e	; 62
    if ( TCNT0 >= 100 )
     f4e:	e2 e5       	ldi	r30, 0x52	; 82
     f50:	f0 e0       	ldi	r31, 0x00	; 0
     f52:	80 81       	ld	r24, Z
     f54:	84 36       	cpi	r24, 0x64	; 100
     f56:	90 f0       	brcs	.+36     	; 0xf7c <cpuIoPoll+0x36>
    {
        g_ioWatchdog++;
     f58:	80 91 82 00 	lds	r24, 0x0082
     f5c:	90 91 83 00 	lds	r25, 0x0083
     f60:	01 96       	adiw	r24, 0x01	; 1
     f62:	90 93 83 00 	sts	0x0083, r25
     f66:	80 93 82 00 	sts	0x0082, r24
        if ( g_ioWatchdog > IO_WATCHDOG_TOP )
     f6a:	80 91 82 00 	lds	r24, 0x0082
     f6e:	90 91 83 00 	lds	r25, 0x0083
     f72:	89 3c       	cpi	r24, 0xC9	; 201
     f74:	91 05       	cpc	r25, r1
     f76:	08 f0       	brcs	.+2      	; 0xf7a <cpuIoPoll+0x34>
        {
            cpuIoReset();
     f78:	04 d0       	rcall	.+8      	; 0xf82 <cpuIoReset>
            //blinkLed0();
        }
        cpuIoInit();
     f7a:	d4 df       	rcall	.-88     	; 0xf24 <cpuIoInit>
    }
}
     f7c:	cf 91       	pop	r28
     f7e:	df 91       	pop	r29
     f80:	08 95       	ret

00000f82 <cpuIoReset>:

void cpuIoReset( void )
{
     f82:	df 93       	push	r29
     f84:	cf 93       	push	r28
     f86:	cd b7       	in	r28, 0x3d	; 61
     f88:	de b7       	in	r29, 0x3e	; 62
    // IO watchdog reset.
    g_ioWatchdog = 0;
     f8a:	10 92 83 00 	sts	0x0083, r1
     f8e:	10 92 82 00 	sts	0x0082, r1

    g_ioExpected = 0;
     f92:	10 92 7f 00 	sts	0x007F, r1
    g_ioWrPtr = 0;
     f96:	10 92 80 00 	sts	0x0080, r1
    g_ioRdPtr = 0;
     f9a:	10 92 81 00 	sts	0x0081, r1
}
     f9e:	cf 91       	pop	r28
     fa0:	df 91       	pop	r29
     fa2:	08 95       	ret

00000fa4 <cpuIoPush>:

void cpuIoPush( uchar * in, uchar cnt )
{
     fa4:	df 93       	push	r29
     fa6:	cf 93       	push	r28
     fa8:	cd b7       	in	r28, 0x3d	; 61
     faa:	de b7       	in	r29, 0x3e	; 62
     fac:	27 97       	sbiw	r28, 0x07	; 7
     fae:	0f b6       	in	r0, 0x3f	; 63
     fb0:	f8 94       	cli
     fb2:	de bf       	out	0x3e, r29	; 62
     fb4:	0f be       	out	0x3f, r0	; 63
     fb6:	cd bf       	out	0x3d, r28	; 61
     fb8:	9c 83       	std	Y+4, r25	; 0x04
     fba:	8b 83       	std	Y+3, r24	; 0x03
     fbc:	6d 83       	std	Y+5, r22	; 0x05
    // IO watchdog reset.
    g_ioWatchdog = 0;
     fbe:	10 92 83 00 	sts	0x0083, r1
     fc2:	10 92 82 00 	sts	0x0082, r1

    uchar ind;
    if ( g_ioExpected == 0 )
     fc6:	80 91 7f 00 	lds	r24, 0x007F
     fca:	88 23       	and	r24, r24
     fcc:	41 f4       	brne	.+16     	; 0xfde <cpuIoPush+0x3a>
    {
        g_ioExpected = in[0];
     fce:	eb 81       	ldd	r30, Y+3	; 0x03
     fd0:	fc 81       	ldd	r31, Y+4	; 0x04
     fd2:	80 81       	ld	r24, Z
     fd4:	80 93 7f 00 	sts	0x007F, r24
        ind = 1;
     fd8:	81 e0       	ldi	r24, 0x01	; 1
     fda:	8a 83       	std	Y+2, r24	; 0x02
     fdc:	01 c0       	rjmp	.+2      	; 0xfe0 <cpuIoPush+0x3c>
    }
    else
        ind = 0;
     fde:	1a 82       	std	Y+2, r1	; 0x02

    if ( g_ioExpected > 0 )
     fe0:	80 91 7f 00 	lds	r24, 0x007F
     fe4:	88 23       	and	r24, r24
     fe6:	c1 f1       	breq	.+112    	; 0x1058 <cpuIoPush+0xb4>
    {
        // Filling buffer with arguments.
        uchar i;
        for ( i=ind; i<cnt; i++ )
     fe8:	8a 81       	ldd	r24, Y+2	; 0x02
     fea:	89 83       	std	Y+1, r24	; 0x01
     fec:	30 c0       	rjmp	.+96     	; 0x104e <cpuIoPush+0xaa>
        {
            if ( g_ioExpected-- > 0 )
     fee:	80 91 7f 00 	lds	r24, 0x007F
     ff2:	8e 83       	std	Y+6, r24	; 0x06
     ff4:	8e 81       	ldd	r24, Y+6	; 0x06
     ff6:	8f 83       	std	Y+7, r24	; 0x07
     ff8:	8f 81       	ldd	r24, Y+7	; 0x07
     ffa:	88 23       	and	r24, r24
     ffc:	11 f0       	breq	.+4      	; 0x1002 <cpuIoPush+0x5e>
     ffe:	81 e0       	ldi	r24, 0x01	; 1
    1000:	8f 83       	std	Y+7, r24	; 0x07
    1002:	9f 81       	ldd	r25, Y+7	; 0x07
    1004:	8e 81       	ldd	r24, Y+6	; 0x06
    1006:	81 50       	subi	r24, 0x01	; 1
    1008:	80 93 7f 00 	sts	0x007F, r24
    100c:	99 23       	and	r25, r25
    100e:	71 f1       	breq	.+92     	; 0x106c <cpuIoPush+0xc8>
            {
                g_ioBuffer[ g_ioWrPtr ] = in[i];
    1010:	80 91 80 00 	lds	r24, 0x0080
    1014:	48 2f       	mov	r20, r24
    1016:	50 e0       	ldi	r21, 0x00	; 0
    1018:	89 81       	ldd	r24, Y+1	; 0x01
    101a:	28 2f       	mov	r18, r24
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	8b 81       	ldd	r24, Y+3	; 0x03
    1020:	9c 81       	ldd	r25, Y+4	; 0x04
    1022:	fc 01       	movw	r30, r24
    1024:	e2 0f       	add	r30, r18
    1026:	f3 1f       	adc	r31, r19
    1028:	80 81       	ld	r24, Z
    102a:	fa 01       	movw	r30, r20
    102c:	e2 55       	subi	r30, 0x52	; 82
    102e:	fe 4f       	sbci	r31, 0xFE	; 254
    1030:	80 83       	st	Z, r24
                g_ioWrPtr = (g_ioWrPtr + 1) % BUFFER_SZ;
    1032:	80 91 80 00 	lds	r24, 0x0080
    1036:	88 2f       	mov	r24, r24
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	01 96       	adiw	r24, 0x01	; 1
    103c:	20 e2       	ldi	r18, 0x20	; 32
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	b9 01       	movw	r22, r18
    1042:	87 d5       	rcall	.+2830   	; 0x1b52 <__divmodhi4>
    1044:	80 93 80 00 	sts	0x0080, r24

    if ( g_ioExpected > 0 )
    {
        // Filling buffer with arguments.
        uchar i;
        for ( i=ind; i<cnt; i++ )
    1048:	89 81       	ldd	r24, Y+1	; 0x01
    104a:	8f 5f       	subi	r24, 0xFF	; 255
    104c:	89 83       	std	Y+1, r24	; 0x01
    104e:	99 81       	ldd	r25, Y+1	; 0x01
    1050:	8d 81       	ldd	r24, Y+5	; 0x05
    1052:	98 17       	cp	r25, r24
    1054:	60 f2       	brcs	.-104    	; 0xfee <cpuIoPush+0x4a>
    1056:	0a c0       	rjmp	.+20     	; 0x106c <cpuIoPush+0xc8>
        }
    }
    else
    {
        // Function invocation.
        cpuIoReset();
    1058:	94 df       	rcall	.-216    	; 0xf82 <cpuIoReset>
        invoke( in[1], g_ioBuffer );
    105a:	8b 81       	ldd	r24, Y+3	; 0x03
    105c:	9c 81       	ldd	r25, Y+4	; 0x04
    105e:	fc 01       	movw	r30, r24
    1060:	31 96       	adiw	r30, 0x01	; 1
    1062:	80 81       	ld	r24, Z
    1064:	2e ea       	ldi	r18, 0xAE	; 174
    1066:	31 e0       	ldi	r19, 0x01	; 1
    1068:	b9 01       	movw	r22, r18
    106a:	c2 d8       	rcall	.-3708   	; 0x1f0 <invoke>
    }
}
    106c:	27 96       	adiw	r28, 0x07	; 7
    106e:	0f b6       	in	r0, 0x3f	; 63
    1070:	f8 94       	cli
    1072:	de bf       	out	0x3e, r29	; 62
    1074:	0f be       	out	0x3f, r0	; 63
    1076:	cd bf       	out	0x3d, r28	; 61
    1078:	cf 91       	pop	r28
    107a:	df 91       	pop	r29
    107c:	08 95       	ret

0000107e <cpuIoPop>:

void cpuIoPop( uchar * out, uchar cnt )
{
    107e:	df 93       	push	r29
    1080:	cf 93       	push	r28
    1082:	00 d0       	rcall	.+0      	; 0x1084 <cpuIoPop+0x6>
    1084:	00 d0       	rcall	.+0      	; 0x1086 <cpuIoPop+0x8>
    1086:	cd b7       	in	r28, 0x3d	; 61
    1088:	de b7       	in	r29, 0x3e	; 62
    108a:	9b 83       	std	Y+3, r25	; 0x03
    108c:	8a 83       	std	Y+2, r24	; 0x02
    108e:	6c 83       	std	Y+4, r22	; 0x04
    // IO watchdog reset.
    g_ioWatchdog = 0;
    1090:	10 92 83 00 	sts	0x0083, r1
    1094:	10 92 82 00 	sts	0x0082, r1

    uchar i;
    for ( i=0; i<cnt; i++ )
    1098:	19 82       	std	Y+1, r1	; 0x01
    109a:	1f c0       	rjmp	.+62     	; 0x10da <cpuIoPop+0x5c>
    {
        out[i] = g_ioBuffer[ g_ioRdPtr ];
    109c:	89 81       	ldd	r24, Y+1	; 0x01
    109e:	28 2f       	mov	r18, r24
    10a0:	30 e0       	ldi	r19, 0x00	; 0
    10a2:	8a 81       	ldd	r24, Y+2	; 0x02
    10a4:	9b 81       	ldd	r25, Y+3	; 0x03
    10a6:	dc 01       	movw	r26, r24
    10a8:	a2 0f       	add	r26, r18
    10aa:	b3 1f       	adc	r27, r19
    10ac:	80 91 81 00 	lds	r24, 0x0081
    10b0:	88 2f       	mov	r24, r24
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	fc 01       	movw	r30, r24
    10b6:	e2 55       	subi	r30, 0x52	; 82
    10b8:	fe 4f       	sbci	r31, 0xFE	; 254
    10ba:	80 81       	ld	r24, Z
    10bc:	8c 93       	st	X, r24
        g_ioRdPtr = ( g_ioRdPtr + 1 ) % BUFFER_SZ;
    10be:	80 91 81 00 	lds	r24, 0x0081
    10c2:	88 2f       	mov	r24, r24
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	01 96       	adiw	r24, 0x01	; 1
    10c8:	20 e2       	ldi	r18, 0x20	; 32
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	b9 01       	movw	r22, r18
    10ce:	41 d5       	rcall	.+2690   	; 0x1b52 <__divmodhi4>
    10d0:	80 93 81 00 	sts	0x0081, r24
{
    // IO watchdog reset.
    g_ioWatchdog = 0;

    uchar i;
    for ( i=0; i<cnt; i++ )
    10d4:	89 81       	ldd	r24, Y+1	; 0x01
    10d6:	8f 5f       	subi	r24, 0xFF	; 255
    10d8:	89 83       	std	Y+1, r24	; 0x01
    10da:	99 81       	ldd	r25, Y+1	; 0x01
    10dc:	8c 81       	ldd	r24, Y+4	; 0x04
    10de:	98 17       	cp	r25, r24
    10e0:	e8 f2       	brcs	.-70     	; 0x109c <cpuIoPop+0x1e>
    {
        out[i] = g_ioBuffer[ g_ioRdPtr ];
        g_ioRdPtr = ( g_ioRdPtr + 1 ) % BUFFER_SZ;
    }
}
    10e2:	0f 90       	pop	r0
    10e4:	0f 90       	pop	r0
    10e6:	0f 90       	pop	r0
    10e8:	0f 90       	pop	r0
    10ea:	cf 91       	pop	r28
    10ec:	df 91       	pop	r29
    10ee:	08 95       	ret

000010f0 <__fixunssfsi>:
    10f0:	ef 92       	push	r14
    10f2:	ff 92       	push	r15
    10f4:	0f 93       	push	r16
    10f6:	1f 93       	push	r17
    10f8:	7b 01       	movw	r14, r22
    10fa:	8c 01       	movw	r16, r24
    10fc:	20 e0       	ldi	r18, 0x00	; 0
    10fe:	30 e0       	ldi	r19, 0x00	; 0
    1100:	40 e0       	ldi	r20, 0x00	; 0
    1102:	5f e4       	ldi	r21, 0x4F	; 79
    1104:	d9 d2       	rcall	.+1458   	; 0x16b8 <__gesf2>
    1106:	88 23       	and	r24, r24
    1108:	7c f0       	brlt	.+30     	; 0x1128 <__fixunssfsi+0x38>
    110a:	c8 01       	movw	r24, r16
    110c:	b7 01       	movw	r22, r14
    110e:	20 e0       	ldi	r18, 0x00	; 0
    1110:	30 e0       	ldi	r19, 0x00	; 0
    1112:	40 e0       	ldi	r20, 0x00	; 0
    1114:	5f e4       	ldi	r21, 0x4F	; 79
    1116:	5e d1       	rcall	.+700    	; 0x13d4 <__subsf3>
    1118:	25 d3       	rcall	.+1610   	; 0x1764 <__fixsfsi>
    111a:	9b 01       	movw	r18, r22
    111c:	ac 01       	movw	r20, r24
    111e:	20 50       	subi	r18, 0x00	; 0
    1120:	30 40       	sbci	r19, 0x00	; 0
    1122:	40 40       	sbci	r20, 0x00	; 0
    1124:	50 48       	sbci	r21, 0x80	; 128
    1126:	05 c0       	rjmp	.+10     	; 0x1132 <__fixunssfsi+0x42>
    1128:	c8 01       	movw	r24, r16
    112a:	b7 01       	movw	r22, r14
    112c:	1b d3       	rcall	.+1590   	; 0x1764 <__fixsfsi>
    112e:	9b 01       	movw	r18, r22
    1130:	ac 01       	movw	r20, r24
    1132:	b9 01       	movw	r22, r18
    1134:	ca 01       	movw	r24, r20
    1136:	1f 91       	pop	r17
    1138:	0f 91       	pop	r16
    113a:	ff 90       	pop	r15
    113c:	ef 90       	pop	r14
    113e:	08 95       	ret

00001140 <_fpadd_parts>:
    1140:	a0 e0       	ldi	r26, 0x00	; 0
    1142:	b0 e0       	ldi	r27, 0x00	; 0
    1144:	e5 ea       	ldi	r30, 0xA5	; 165
    1146:	f8 e0       	ldi	r31, 0x08	; 8
    1148:	2b c5       	rjmp	.+2646   	; 0x1ba0 <__prologue_saves__>
    114a:	dc 01       	movw	r26, r24
    114c:	2b 01       	movw	r4, r22
    114e:	fa 01       	movw	r30, r20
    1150:	9c 91       	ld	r25, X
    1152:	92 30       	cpi	r25, 0x02	; 2
    1154:	08 f4       	brcc	.+2      	; 0x1158 <_fpadd_parts+0x18>
    1156:	39 c1       	rjmp	.+626    	; 0x13ca <_fpadd_parts+0x28a>
    1158:	eb 01       	movw	r28, r22
    115a:	88 81       	ld	r24, Y
    115c:	82 30       	cpi	r24, 0x02	; 2
    115e:	08 f4       	brcc	.+2      	; 0x1162 <_fpadd_parts+0x22>
    1160:	33 c1       	rjmp	.+614    	; 0x13c8 <_fpadd_parts+0x288>
    1162:	94 30       	cpi	r25, 0x04	; 4
    1164:	69 f4       	brne	.+26     	; 0x1180 <_fpadd_parts+0x40>
    1166:	84 30       	cpi	r24, 0x04	; 4
    1168:	09 f0       	breq	.+2      	; 0x116c <_fpadd_parts+0x2c>
    116a:	2f c1       	rjmp	.+606    	; 0x13ca <_fpadd_parts+0x28a>
    116c:	11 96       	adiw	r26, 0x01	; 1
    116e:	9c 91       	ld	r25, X
    1170:	11 97       	sbiw	r26, 0x01	; 1
    1172:	89 81       	ldd	r24, Y+1	; 0x01
    1174:	98 17       	cp	r25, r24
    1176:	09 f4       	brne	.+2      	; 0x117a <_fpadd_parts+0x3a>
    1178:	28 c1       	rjmp	.+592    	; 0x13ca <_fpadd_parts+0x28a>
    117a:	ad e6       	ldi	r26, 0x6D	; 109
    117c:	b0 e0       	ldi	r27, 0x00	; 0
    117e:	25 c1       	rjmp	.+586    	; 0x13ca <_fpadd_parts+0x28a>
    1180:	84 30       	cpi	r24, 0x04	; 4
    1182:	09 f4       	brne	.+2      	; 0x1186 <_fpadd_parts+0x46>
    1184:	21 c1       	rjmp	.+578    	; 0x13c8 <_fpadd_parts+0x288>
    1186:	82 30       	cpi	r24, 0x02	; 2
    1188:	a9 f4       	brne	.+42     	; 0x11b4 <_fpadd_parts+0x74>
    118a:	92 30       	cpi	r25, 0x02	; 2
    118c:	09 f0       	breq	.+2      	; 0x1190 <_fpadd_parts+0x50>
    118e:	1d c1       	rjmp	.+570    	; 0x13ca <_fpadd_parts+0x28a>
    1190:	9a 01       	movw	r18, r20
    1192:	ad 01       	movw	r20, r26
    1194:	88 e0       	ldi	r24, 0x08	; 8
    1196:	ea 01       	movw	r28, r20
    1198:	09 90       	ld	r0, Y+
    119a:	ae 01       	movw	r20, r28
    119c:	e9 01       	movw	r28, r18
    119e:	09 92       	st	Y+, r0
    11a0:	9e 01       	movw	r18, r28
    11a2:	81 50       	subi	r24, 0x01	; 1
    11a4:	c1 f7       	brne	.-16     	; 0x1196 <_fpadd_parts+0x56>
    11a6:	e2 01       	movw	r28, r4
    11a8:	89 81       	ldd	r24, Y+1	; 0x01
    11aa:	11 96       	adiw	r26, 0x01	; 1
    11ac:	9c 91       	ld	r25, X
    11ae:	89 23       	and	r24, r25
    11b0:	81 83       	std	Z+1, r24	; 0x01
    11b2:	08 c1       	rjmp	.+528    	; 0x13c4 <_fpadd_parts+0x284>
    11b4:	92 30       	cpi	r25, 0x02	; 2
    11b6:	09 f4       	brne	.+2      	; 0x11ba <_fpadd_parts+0x7a>
    11b8:	07 c1       	rjmp	.+526    	; 0x13c8 <_fpadd_parts+0x288>
    11ba:	12 96       	adiw	r26, 0x02	; 2
    11bc:	2d 90       	ld	r2, X+
    11be:	3c 90       	ld	r3, X
    11c0:	13 97       	sbiw	r26, 0x03	; 3
    11c2:	eb 01       	movw	r28, r22
    11c4:	8a 81       	ldd	r24, Y+2	; 0x02
    11c6:	9b 81       	ldd	r25, Y+3	; 0x03
    11c8:	14 96       	adiw	r26, 0x04	; 4
    11ca:	ad 90       	ld	r10, X+
    11cc:	bd 90       	ld	r11, X+
    11ce:	cd 90       	ld	r12, X+
    11d0:	dc 90       	ld	r13, X
    11d2:	17 97       	sbiw	r26, 0x07	; 7
    11d4:	ec 80       	ldd	r14, Y+4	; 0x04
    11d6:	fd 80       	ldd	r15, Y+5	; 0x05
    11d8:	0e 81       	ldd	r16, Y+6	; 0x06
    11da:	1f 81       	ldd	r17, Y+7	; 0x07
    11dc:	91 01       	movw	r18, r2
    11de:	28 1b       	sub	r18, r24
    11e0:	39 0b       	sbc	r19, r25
    11e2:	b9 01       	movw	r22, r18
    11e4:	37 ff       	sbrs	r19, 7
    11e6:	04 c0       	rjmp	.+8      	; 0x11f0 <_fpadd_parts+0xb0>
    11e8:	66 27       	eor	r22, r22
    11ea:	77 27       	eor	r23, r23
    11ec:	62 1b       	sub	r22, r18
    11ee:	73 0b       	sbc	r23, r19
    11f0:	60 32       	cpi	r22, 0x20	; 32
    11f2:	71 05       	cpc	r23, r1
    11f4:	0c f0       	brlt	.+2      	; 0x11f8 <_fpadd_parts+0xb8>
    11f6:	61 c0       	rjmp	.+194    	; 0x12ba <_fpadd_parts+0x17a>
    11f8:	12 16       	cp	r1, r18
    11fa:	13 06       	cpc	r1, r19
    11fc:	6c f5       	brge	.+90     	; 0x1258 <_fpadd_parts+0x118>
    11fe:	37 01       	movw	r6, r14
    1200:	48 01       	movw	r8, r16
    1202:	06 2e       	mov	r0, r22
    1204:	04 c0       	rjmp	.+8      	; 0x120e <_fpadd_parts+0xce>
    1206:	96 94       	lsr	r9
    1208:	87 94       	ror	r8
    120a:	77 94       	ror	r7
    120c:	67 94       	ror	r6
    120e:	0a 94       	dec	r0
    1210:	d2 f7       	brpl	.-12     	; 0x1206 <_fpadd_parts+0xc6>
    1212:	21 e0       	ldi	r18, 0x01	; 1
    1214:	30 e0       	ldi	r19, 0x00	; 0
    1216:	40 e0       	ldi	r20, 0x00	; 0
    1218:	50 e0       	ldi	r21, 0x00	; 0
    121a:	04 c0       	rjmp	.+8      	; 0x1224 <_fpadd_parts+0xe4>
    121c:	22 0f       	add	r18, r18
    121e:	33 1f       	adc	r19, r19
    1220:	44 1f       	adc	r20, r20
    1222:	55 1f       	adc	r21, r21
    1224:	6a 95       	dec	r22
    1226:	d2 f7       	brpl	.-12     	; 0x121c <_fpadd_parts+0xdc>
    1228:	21 50       	subi	r18, 0x01	; 1
    122a:	30 40       	sbci	r19, 0x00	; 0
    122c:	40 40       	sbci	r20, 0x00	; 0
    122e:	50 40       	sbci	r21, 0x00	; 0
    1230:	2e 21       	and	r18, r14
    1232:	3f 21       	and	r19, r15
    1234:	40 23       	and	r20, r16
    1236:	51 23       	and	r21, r17
    1238:	21 15       	cp	r18, r1
    123a:	31 05       	cpc	r19, r1
    123c:	41 05       	cpc	r20, r1
    123e:	51 05       	cpc	r21, r1
    1240:	21 f0       	breq	.+8      	; 0x124a <_fpadd_parts+0x10a>
    1242:	21 e0       	ldi	r18, 0x01	; 1
    1244:	30 e0       	ldi	r19, 0x00	; 0
    1246:	40 e0       	ldi	r20, 0x00	; 0
    1248:	50 e0       	ldi	r21, 0x00	; 0
    124a:	79 01       	movw	r14, r18
    124c:	8a 01       	movw	r16, r20
    124e:	e6 28       	or	r14, r6
    1250:	f7 28       	or	r15, r7
    1252:	08 29       	or	r16, r8
    1254:	19 29       	or	r17, r9
    1256:	3c c0       	rjmp	.+120    	; 0x12d0 <_fpadd_parts+0x190>
    1258:	23 2b       	or	r18, r19
    125a:	d1 f1       	breq	.+116    	; 0x12d0 <_fpadd_parts+0x190>
    125c:	26 0e       	add	r2, r22
    125e:	37 1e       	adc	r3, r23
    1260:	35 01       	movw	r6, r10
    1262:	46 01       	movw	r8, r12
    1264:	06 2e       	mov	r0, r22
    1266:	04 c0       	rjmp	.+8      	; 0x1270 <_fpadd_parts+0x130>
    1268:	96 94       	lsr	r9
    126a:	87 94       	ror	r8
    126c:	77 94       	ror	r7
    126e:	67 94       	ror	r6
    1270:	0a 94       	dec	r0
    1272:	d2 f7       	brpl	.-12     	; 0x1268 <_fpadd_parts+0x128>
    1274:	21 e0       	ldi	r18, 0x01	; 1
    1276:	30 e0       	ldi	r19, 0x00	; 0
    1278:	40 e0       	ldi	r20, 0x00	; 0
    127a:	50 e0       	ldi	r21, 0x00	; 0
    127c:	04 c0       	rjmp	.+8      	; 0x1286 <_fpadd_parts+0x146>
    127e:	22 0f       	add	r18, r18
    1280:	33 1f       	adc	r19, r19
    1282:	44 1f       	adc	r20, r20
    1284:	55 1f       	adc	r21, r21
    1286:	6a 95       	dec	r22
    1288:	d2 f7       	brpl	.-12     	; 0x127e <_fpadd_parts+0x13e>
    128a:	21 50       	subi	r18, 0x01	; 1
    128c:	30 40       	sbci	r19, 0x00	; 0
    128e:	40 40       	sbci	r20, 0x00	; 0
    1290:	50 40       	sbci	r21, 0x00	; 0
    1292:	2a 21       	and	r18, r10
    1294:	3b 21       	and	r19, r11
    1296:	4c 21       	and	r20, r12
    1298:	5d 21       	and	r21, r13
    129a:	21 15       	cp	r18, r1
    129c:	31 05       	cpc	r19, r1
    129e:	41 05       	cpc	r20, r1
    12a0:	51 05       	cpc	r21, r1
    12a2:	21 f0       	breq	.+8      	; 0x12ac <_fpadd_parts+0x16c>
    12a4:	21 e0       	ldi	r18, 0x01	; 1
    12a6:	30 e0       	ldi	r19, 0x00	; 0
    12a8:	40 e0       	ldi	r20, 0x00	; 0
    12aa:	50 e0       	ldi	r21, 0x00	; 0
    12ac:	59 01       	movw	r10, r18
    12ae:	6a 01       	movw	r12, r20
    12b0:	a6 28       	or	r10, r6
    12b2:	b7 28       	or	r11, r7
    12b4:	c8 28       	or	r12, r8
    12b6:	d9 28       	or	r13, r9
    12b8:	0b c0       	rjmp	.+22     	; 0x12d0 <_fpadd_parts+0x190>
    12ba:	82 15       	cp	r24, r2
    12bc:	93 05       	cpc	r25, r3
    12be:	2c f0       	brlt	.+10     	; 0x12ca <_fpadd_parts+0x18a>
    12c0:	1c 01       	movw	r2, r24
    12c2:	aa 24       	eor	r10, r10
    12c4:	bb 24       	eor	r11, r11
    12c6:	65 01       	movw	r12, r10
    12c8:	03 c0       	rjmp	.+6      	; 0x12d0 <_fpadd_parts+0x190>
    12ca:	ee 24       	eor	r14, r14
    12cc:	ff 24       	eor	r15, r15
    12ce:	87 01       	movw	r16, r14
    12d0:	11 96       	adiw	r26, 0x01	; 1
    12d2:	9c 91       	ld	r25, X
    12d4:	d2 01       	movw	r26, r4
    12d6:	11 96       	adiw	r26, 0x01	; 1
    12d8:	8c 91       	ld	r24, X
    12da:	98 17       	cp	r25, r24
    12dc:	09 f4       	brne	.+2      	; 0x12e0 <_fpadd_parts+0x1a0>
    12de:	45 c0       	rjmp	.+138    	; 0x136a <_fpadd_parts+0x22a>
    12e0:	99 23       	and	r25, r25
    12e2:	39 f0       	breq	.+14     	; 0x12f2 <_fpadd_parts+0x1b2>
    12e4:	a8 01       	movw	r20, r16
    12e6:	97 01       	movw	r18, r14
    12e8:	2a 19       	sub	r18, r10
    12ea:	3b 09       	sbc	r19, r11
    12ec:	4c 09       	sbc	r20, r12
    12ee:	5d 09       	sbc	r21, r13
    12f0:	06 c0       	rjmp	.+12     	; 0x12fe <_fpadd_parts+0x1be>
    12f2:	a6 01       	movw	r20, r12
    12f4:	95 01       	movw	r18, r10
    12f6:	2e 19       	sub	r18, r14
    12f8:	3f 09       	sbc	r19, r15
    12fa:	40 0b       	sbc	r20, r16
    12fc:	51 0b       	sbc	r21, r17
    12fe:	57 fd       	sbrc	r21, 7
    1300:	08 c0       	rjmp	.+16     	; 0x1312 <_fpadd_parts+0x1d2>
    1302:	11 82       	std	Z+1, r1	; 0x01
    1304:	33 82       	std	Z+3, r3	; 0x03
    1306:	22 82       	std	Z+2, r2	; 0x02
    1308:	24 83       	std	Z+4, r18	; 0x04
    130a:	35 83       	std	Z+5, r19	; 0x05
    130c:	46 83       	std	Z+6, r20	; 0x06
    130e:	57 83       	std	Z+7, r21	; 0x07
    1310:	1d c0       	rjmp	.+58     	; 0x134c <_fpadd_parts+0x20c>
    1312:	81 e0       	ldi	r24, 0x01	; 1
    1314:	81 83       	std	Z+1, r24	; 0x01
    1316:	33 82       	std	Z+3, r3	; 0x03
    1318:	22 82       	std	Z+2, r2	; 0x02
    131a:	88 27       	eor	r24, r24
    131c:	99 27       	eor	r25, r25
    131e:	dc 01       	movw	r26, r24
    1320:	82 1b       	sub	r24, r18
    1322:	93 0b       	sbc	r25, r19
    1324:	a4 0b       	sbc	r26, r20
    1326:	b5 0b       	sbc	r27, r21
    1328:	84 83       	std	Z+4, r24	; 0x04
    132a:	95 83       	std	Z+5, r25	; 0x05
    132c:	a6 83       	std	Z+6, r26	; 0x06
    132e:	b7 83       	std	Z+7, r27	; 0x07
    1330:	0d c0       	rjmp	.+26     	; 0x134c <_fpadd_parts+0x20c>
    1332:	22 0f       	add	r18, r18
    1334:	33 1f       	adc	r19, r19
    1336:	44 1f       	adc	r20, r20
    1338:	55 1f       	adc	r21, r21
    133a:	24 83       	std	Z+4, r18	; 0x04
    133c:	35 83       	std	Z+5, r19	; 0x05
    133e:	46 83       	std	Z+6, r20	; 0x06
    1340:	57 83       	std	Z+7, r21	; 0x07
    1342:	82 81       	ldd	r24, Z+2	; 0x02
    1344:	93 81       	ldd	r25, Z+3	; 0x03
    1346:	01 97       	sbiw	r24, 0x01	; 1
    1348:	93 83       	std	Z+3, r25	; 0x03
    134a:	82 83       	std	Z+2, r24	; 0x02
    134c:	24 81       	ldd	r18, Z+4	; 0x04
    134e:	35 81       	ldd	r19, Z+5	; 0x05
    1350:	46 81       	ldd	r20, Z+6	; 0x06
    1352:	57 81       	ldd	r21, Z+7	; 0x07
    1354:	da 01       	movw	r26, r20
    1356:	c9 01       	movw	r24, r18
    1358:	01 97       	sbiw	r24, 0x01	; 1
    135a:	a1 09       	sbc	r26, r1
    135c:	b1 09       	sbc	r27, r1
    135e:	8f 5f       	subi	r24, 0xFF	; 255
    1360:	9f 4f       	sbci	r25, 0xFF	; 255
    1362:	af 4f       	sbci	r26, 0xFF	; 255
    1364:	bf 43       	sbci	r27, 0x3F	; 63
    1366:	28 f3       	brcs	.-54     	; 0x1332 <_fpadd_parts+0x1f2>
    1368:	0b c0       	rjmp	.+22     	; 0x1380 <_fpadd_parts+0x240>
    136a:	91 83       	std	Z+1, r25	; 0x01
    136c:	33 82       	std	Z+3, r3	; 0x03
    136e:	22 82       	std	Z+2, r2	; 0x02
    1370:	ea 0c       	add	r14, r10
    1372:	fb 1c       	adc	r15, r11
    1374:	0c 1d       	adc	r16, r12
    1376:	1d 1d       	adc	r17, r13
    1378:	e4 82       	std	Z+4, r14	; 0x04
    137a:	f5 82       	std	Z+5, r15	; 0x05
    137c:	06 83       	std	Z+6, r16	; 0x06
    137e:	17 83       	std	Z+7, r17	; 0x07
    1380:	83 e0       	ldi	r24, 0x03	; 3
    1382:	80 83       	st	Z, r24
    1384:	24 81       	ldd	r18, Z+4	; 0x04
    1386:	35 81       	ldd	r19, Z+5	; 0x05
    1388:	46 81       	ldd	r20, Z+6	; 0x06
    138a:	57 81       	ldd	r21, Z+7	; 0x07
    138c:	57 ff       	sbrs	r21, 7
    138e:	1a c0       	rjmp	.+52     	; 0x13c4 <_fpadd_parts+0x284>
    1390:	c9 01       	movw	r24, r18
    1392:	aa 27       	eor	r26, r26
    1394:	97 fd       	sbrc	r25, 7
    1396:	a0 95       	com	r26
    1398:	ba 2f       	mov	r27, r26
    139a:	81 70       	andi	r24, 0x01	; 1
    139c:	90 70       	andi	r25, 0x00	; 0
    139e:	a0 70       	andi	r26, 0x00	; 0
    13a0:	b0 70       	andi	r27, 0x00	; 0
    13a2:	56 95       	lsr	r21
    13a4:	47 95       	ror	r20
    13a6:	37 95       	ror	r19
    13a8:	27 95       	ror	r18
    13aa:	82 2b       	or	r24, r18
    13ac:	93 2b       	or	r25, r19
    13ae:	a4 2b       	or	r26, r20
    13b0:	b5 2b       	or	r27, r21
    13b2:	84 83       	std	Z+4, r24	; 0x04
    13b4:	95 83       	std	Z+5, r25	; 0x05
    13b6:	a6 83       	std	Z+6, r26	; 0x06
    13b8:	b7 83       	std	Z+7, r27	; 0x07
    13ba:	82 81       	ldd	r24, Z+2	; 0x02
    13bc:	93 81       	ldd	r25, Z+3	; 0x03
    13be:	01 96       	adiw	r24, 0x01	; 1
    13c0:	93 83       	std	Z+3, r25	; 0x03
    13c2:	82 83       	std	Z+2, r24	; 0x02
    13c4:	df 01       	movw	r26, r30
    13c6:	01 c0       	rjmp	.+2      	; 0x13ca <_fpadd_parts+0x28a>
    13c8:	d2 01       	movw	r26, r4
    13ca:	cd 01       	movw	r24, r26
    13cc:	cd b7       	in	r28, 0x3d	; 61
    13ce:	de b7       	in	r29, 0x3e	; 62
    13d0:	e2 e1       	ldi	r30, 0x12	; 18
    13d2:	02 c4       	rjmp	.+2052   	; 0x1bd8 <__epilogue_restores__>

000013d4 <__subsf3>:
    13d4:	a0 e2       	ldi	r26, 0x20	; 32
    13d6:	b0 e0       	ldi	r27, 0x00	; 0
    13d8:	ef ee       	ldi	r30, 0xEF	; 239
    13da:	f9 e0       	ldi	r31, 0x09	; 9
    13dc:	ed c3       	rjmp	.+2010   	; 0x1bb8 <__prologue_saves__+0x18>
    13de:	69 83       	std	Y+1, r22	; 0x01
    13e0:	7a 83       	std	Y+2, r23	; 0x02
    13e2:	8b 83       	std	Y+3, r24	; 0x03
    13e4:	9c 83       	std	Y+4, r25	; 0x04
    13e6:	2d 83       	std	Y+5, r18	; 0x05
    13e8:	3e 83       	std	Y+6, r19	; 0x06
    13ea:	4f 83       	std	Y+7, r20	; 0x07
    13ec:	58 87       	std	Y+8, r21	; 0x08
    13ee:	e9 e0       	ldi	r30, 0x09	; 9
    13f0:	ee 2e       	mov	r14, r30
    13f2:	f1 2c       	mov	r15, r1
    13f4:	ec 0e       	add	r14, r28
    13f6:	fd 1e       	adc	r15, r29
    13f8:	ce 01       	movw	r24, r28
    13fa:	01 96       	adiw	r24, 0x01	; 1
    13fc:	b7 01       	movw	r22, r14
    13fe:	d8 d2       	rcall	.+1456   	; 0x19b0 <__unpack_f>
    1400:	8e 01       	movw	r16, r28
    1402:	0f 5e       	subi	r16, 0xEF	; 239
    1404:	1f 4f       	sbci	r17, 0xFF	; 255
    1406:	ce 01       	movw	r24, r28
    1408:	05 96       	adiw	r24, 0x05	; 5
    140a:	b8 01       	movw	r22, r16
    140c:	d1 d2       	rcall	.+1442   	; 0x19b0 <__unpack_f>
    140e:	8a 89       	ldd	r24, Y+18	; 0x12
    1410:	91 e0       	ldi	r25, 0x01	; 1
    1412:	89 27       	eor	r24, r25
    1414:	8a 8b       	std	Y+18, r24	; 0x12
    1416:	c7 01       	movw	r24, r14
    1418:	b8 01       	movw	r22, r16
    141a:	ae 01       	movw	r20, r28
    141c:	47 5e       	subi	r20, 0xE7	; 231
    141e:	5f 4f       	sbci	r21, 0xFF	; 255
    1420:	8f de       	rcall	.-738    	; 0x1140 <_fpadd_parts>
    1422:	f1 d1       	rcall	.+994    	; 0x1806 <__pack_f>
    1424:	a0 96       	adiw	r28, 0x20	; 32
    1426:	e6 e0       	ldi	r30, 0x06	; 6
    1428:	e3 c3       	rjmp	.+1990   	; 0x1bf0 <__epilogue_restores__+0x18>

0000142a <__addsf3>:
    142a:	a0 e2       	ldi	r26, 0x20	; 32
    142c:	b0 e0       	ldi	r27, 0x00	; 0
    142e:	ea e1       	ldi	r30, 0x1A	; 26
    1430:	fa e0       	ldi	r31, 0x0A	; 10
    1432:	c2 c3       	rjmp	.+1924   	; 0x1bb8 <__prologue_saves__+0x18>
    1434:	69 83       	std	Y+1, r22	; 0x01
    1436:	7a 83       	std	Y+2, r23	; 0x02
    1438:	8b 83       	std	Y+3, r24	; 0x03
    143a:	9c 83       	std	Y+4, r25	; 0x04
    143c:	2d 83       	std	Y+5, r18	; 0x05
    143e:	3e 83       	std	Y+6, r19	; 0x06
    1440:	4f 83       	std	Y+7, r20	; 0x07
    1442:	58 87       	std	Y+8, r21	; 0x08
    1444:	f9 e0       	ldi	r31, 0x09	; 9
    1446:	ef 2e       	mov	r14, r31
    1448:	f1 2c       	mov	r15, r1
    144a:	ec 0e       	add	r14, r28
    144c:	fd 1e       	adc	r15, r29
    144e:	ce 01       	movw	r24, r28
    1450:	01 96       	adiw	r24, 0x01	; 1
    1452:	b7 01       	movw	r22, r14
    1454:	ad d2       	rcall	.+1370   	; 0x19b0 <__unpack_f>
    1456:	8e 01       	movw	r16, r28
    1458:	0f 5e       	subi	r16, 0xEF	; 239
    145a:	1f 4f       	sbci	r17, 0xFF	; 255
    145c:	ce 01       	movw	r24, r28
    145e:	05 96       	adiw	r24, 0x05	; 5
    1460:	b8 01       	movw	r22, r16
    1462:	a6 d2       	rcall	.+1356   	; 0x19b0 <__unpack_f>
    1464:	c7 01       	movw	r24, r14
    1466:	b8 01       	movw	r22, r16
    1468:	ae 01       	movw	r20, r28
    146a:	47 5e       	subi	r20, 0xE7	; 231
    146c:	5f 4f       	sbci	r21, 0xFF	; 255
    146e:	68 de       	rcall	.-816    	; 0x1140 <_fpadd_parts>
    1470:	ca d1       	rcall	.+916    	; 0x1806 <__pack_f>
    1472:	a0 96       	adiw	r28, 0x20	; 32
    1474:	e6 e0       	ldi	r30, 0x06	; 6
    1476:	bc c3       	rjmp	.+1912   	; 0x1bf0 <__epilogue_restores__+0x18>

00001478 <__mulsf3>:
    1478:	a0 e2       	ldi	r26, 0x20	; 32
    147a:	b0 e0       	ldi	r27, 0x00	; 0
    147c:	e1 e4       	ldi	r30, 0x41	; 65
    147e:	fa e0       	ldi	r31, 0x0A	; 10
    1480:	8f c3       	rjmp	.+1822   	; 0x1ba0 <__prologue_saves__>
    1482:	69 83       	std	Y+1, r22	; 0x01
    1484:	7a 83       	std	Y+2, r23	; 0x02
    1486:	8b 83       	std	Y+3, r24	; 0x03
    1488:	9c 83       	std	Y+4, r25	; 0x04
    148a:	2d 83       	std	Y+5, r18	; 0x05
    148c:	3e 83       	std	Y+6, r19	; 0x06
    148e:	4f 83       	std	Y+7, r20	; 0x07
    1490:	58 87       	std	Y+8, r21	; 0x08
    1492:	ce 01       	movw	r24, r28
    1494:	01 96       	adiw	r24, 0x01	; 1
    1496:	be 01       	movw	r22, r28
    1498:	67 5f       	subi	r22, 0xF7	; 247
    149a:	7f 4f       	sbci	r23, 0xFF	; 255
    149c:	89 d2       	rcall	.+1298   	; 0x19b0 <__unpack_f>
    149e:	ce 01       	movw	r24, r28
    14a0:	05 96       	adiw	r24, 0x05	; 5
    14a2:	be 01       	movw	r22, r28
    14a4:	6f 5e       	subi	r22, 0xEF	; 239
    14a6:	7f 4f       	sbci	r23, 0xFF	; 255
    14a8:	83 d2       	rcall	.+1286   	; 0x19b0 <__unpack_f>
    14aa:	99 85       	ldd	r25, Y+9	; 0x09
    14ac:	92 30       	cpi	r25, 0x02	; 2
    14ae:	88 f0       	brcs	.+34     	; 0x14d2 <__mulsf3+0x5a>
    14b0:	89 89       	ldd	r24, Y+17	; 0x11
    14b2:	82 30       	cpi	r24, 0x02	; 2
    14b4:	c8 f0       	brcs	.+50     	; 0x14e8 <__mulsf3+0x70>
    14b6:	94 30       	cpi	r25, 0x04	; 4
    14b8:	19 f4       	brne	.+6      	; 0x14c0 <__mulsf3+0x48>
    14ba:	82 30       	cpi	r24, 0x02	; 2
    14bc:	51 f4       	brne	.+20     	; 0x14d2 <__mulsf3+0x5a>
    14be:	04 c0       	rjmp	.+8      	; 0x14c8 <__mulsf3+0x50>
    14c0:	84 30       	cpi	r24, 0x04	; 4
    14c2:	29 f4       	brne	.+10     	; 0x14ce <__mulsf3+0x56>
    14c4:	92 30       	cpi	r25, 0x02	; 2
    14c6:	81 f4       	brne	.+32     	; 0x14e8 <__mulsf3+0x70>
    14c8:	8d e6       	ldi	r24, 0x6D	; 109
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	c6 c0       	rjmp	.+396    	; 0x165a <__mulsf3+0x1e2>
    14ce:	92 30       	cpi	r25, 0x02	; 2
    14d0:	49 f4       	brne	.+18     	; 0x14e4 <__mulsf3+0x6c>
    14d2:	20 e0       	ldi	r18, 0x00	; 0
    14d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    14d6:	8a 89       	ldd	r24, Y+18	; 0x12
    14d8:	98 13       	cpse	r25, r24
    14da:	21 e0       	ldi	r18, 0x01	; 1
    14dc:	2a 87       	std	Y+10, r18	; 0x0a
    14de:	ce 01       	movw	r24, r28
    14e0:	09 96       	adiw	r24, 0x09	; 9
    14e2:	bb c0       	rjmp	.+374    	; 0x165a <__mulsf3+0x1e2>
    14e4:	82 30       	cpi	r24, 0x02	; 2
    14e6:	49 f4       	brne	.+18     	; 0x14fa <__mulsf3+0x82>
    14e8:	20 e0       	ldi	r18, 0x00	; 0
    14ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    14ec:	8a 89       	ldd	r24, Y+18	; 0x12
    14ee:	98 13       	cpse	r25, r24
    14f0:	21 e0       	ldi	r18, 0x01	; 1
    14f2:	2a 8b       	std	Y+18, r18	; 0x12
    14f4:	ce 01       	movw	r24, r28
    14f6:	41 96       	adiw	r24, 0x11	; 17
    14f8:	b0 c0       	rjmp	.+352    	; 0x165a <__mulsf3+0x1e2>
    14fa:	2d 84       	ldd	r2, Y+13	; 0x0d
    14fc:	3e 84       	ldd	r3, Y+14	; 0x0e
    14fe:	4f 84       	ldd	r4, Y+15	; 0x0f
    1500:	58 88       	ldd	r5, Y+16	; 0x10
    1502:	6d 88       	ldd	r6, Y+21	; 0x15
    1504:	7e 88       	ldd	r7, Y+22	; 0x16
    1506:	8f 88       	ldd	r8, Y+23	; 0x17
    1508:	98 8c       	ldd	r9, Y+24	; 0x18
    150a:	ee 24       	eor	r14, r14
    150c:	ff 24       	eor	r15, r15
    150e:	87 01       	movw	r16, r14
    1510:	aa 24       	eor	r10, r10
    1512:	bb 24       	eor	r11, r11
    1514:	65 01       	movw	r12, r10
    1516:	40 e0       	ldi	r20, 0x00	; 0
    1518:	50 e0       	ldi	r21, 0x00	; 0
    151a:	60 e0       	ldi	r22, 0x00	; 0
    151c:	70 e0       	ldi	r23, 0x00	; 0
    151e:	e0 e0       	ldi	r30, 0x00	; 0
    1520:	f0 e0       	ldi	r31, 0x00	; 0
    1522:	c1 01       	movw	r24, r2
    1524:	81 70       	andi	r24, 0x01	; 1
    1526:	90 70       	andi	r25, 0x00	; 0
    1528:	89 2b       	or	r24, r25
    152a:	e9 f0       	breq	.+58     	; 0x1566 <__mulsf3+0xee>
    152c:	e6 0c       	add	r14, r6
    152e:	f7 1c       	adc	r15, r7
    1530:	08 1d       	adc	r16, r8
    1532:	19 1d       	adc	r17, r9
    1534:	9a 01       	movw	r18, r20
    1536:	ab 01       	movw	r20, r22
    1538:	2a 0d       	add	r18, r10
    153a:	3b 1d       	adc	r19, r11
    153c:	4c 1d       	adc	r20, r12
    153e:	5d 1d       	adc	r21, r13
    1540:	80 e0       	ldi	r24, 0x00	; 0
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	a0 e0       	ldi	r26, 0x00	; 0
    1546:	b0 e0       	ldi	r27, 0x00	; 0
    1548:	e6 14       	cp	r14, r6
    154a:	f7 04       	cpc	r15, r7
    154c:	08 05       	cpc	r16, r8
    154e:	19 05       	cpc	r17, r9
    1550:	20 f4       	brcc	.+8      	; 0x155a <__mulsf3+0xe2>
    1552:	81 e0       	ldi	r24, 0x01	; 1
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	a0 e0       	ldi	r26, 0x00	; 0
    1558:	b0 e0       	ldi	r27, 0x00	; 0
    155a:	ba 01       	movw	r22, r20
    155c:	a9 01       	movw	r20, r18
    155e:	48 0f       	add	r20, r24
    1560:	59 1f       	adc	r21, r25
    1562:	6a 1f       	adc	r22, r26
    1564:	7b 1f       	adc	r23, r27
    1566:	aa 0c       	add	r10, r10
    1568:	bb 1c       	adc	r11, r11
    156a:	cc 1c       	adc	r12, r12
    156c:	dd 1c       	adc	r13, r13
    156e:	97 fe       	sbrs	r9, 7
    1570:	08 c0       	rjmp	.+16     	; 0x1582 <__mulsf3+0x10a>
    1572:	81 e0       	ldi	r24, 0x01	; 1
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	a0 e0       	ldi	r26, 0x00	; 0
    1578:	b0 e0       	ldi	r27, 0x00	; 0
    157a:	a8 2a       	or	r10, r24
    157c:	b9 2a       	or	r11, r25
    157e:	ca 2a       	or	r12, r26
    1580:	db 2a       	or	r13, r27
    1582:	31 96       	adiw	r30, 0x01	; 1
    1584:	e0 32       	cpi	r30, 0x20	; 32
    1586:	f1 05       	cpc	r31, r1
    1588:	49 f0       	breq	.+18     	; 0x159c <__mulsf3+0x124>
    158a:	66 0c       	add	r6, r6
    158c:	77 1c       	adc	r7, r7
    158e:	88 1c       	adc	r8, r8
    1590:	99 1c       	adc	r9, r9
    1592:	56 94       	lsr	r5
    1594:	47 94       	ror	r4
    1596:	37 94       	ror	r3
    1598:	27 94       	ror	r2
    159a:	c3 cf       	rjmp	.-122    	; 0x1522 <__mulsf3+0xaa>
    159c:	fa 85       	ldd	r31, Y+10	; 0x0a
    159e:	ea 89       	ldd	r30, Y+18	; 0x12
    15a0:	2b 89       	ldd	r18, Y+19	; 0x13
    15a2:	3c 89       	ldd	r19, Y+20	; 0x14
    15a4:	8b 85       	ldd	r24, Y+11	; 0x0b
    15a6:	9c 85       	ldd	r25, Y+12	; 0x0c
    15a8:	28 0f       	add	r18, r24
    15aa:	39 1f       	adc	r19, r25
    15ac:	2e 5f       	subi	r18, 0xFE	; 254
    15ae:	3f 4f       	sbci	r19, 0xFF	; 255
    15b0:	17 c0       	rjmp	.+46     	; 0x15e0 <__mulsf3+0x168>
    15b2:	ca 01       	movw	r24, r20
    15b4:	81 70       	andi	r24, 0x01	; 1
    15b6:	90 70       	andi	r25, 0x00	; 0
    15b8:	89 2b       	or	r24, r25
    15ba:	61 f0       	breq	.+24     	; 0x15d4 <__mulsf3+0x15c>
    15bc:	16 95       	lsr	r17
    15be:	07 95       	ror	r16
    15c0:	f7 94       	ror	r15
    15c2:	e7 94       	ror	r14
    15c4:	80 e0       	ldi	r24, 0x00	; 0
    15c6:	90 e0       	ldi	r25, 0x00	; 0
    15c8:	a0 e0       	ldi	r26, 0x00	; 0
    15ca:	b0 e8       	ldi	r27, 0x80	; 128
    15cc:	e8 2a       	or	r14, r24
    15ce:	f9 2a       	or	r15, r25
    15d0:	0a 2b       	or	r16, r26
    15d2:	1b 2b       	or	r17, r27
    15d4:	76 95       	lsr	r23
    15d6:	67 95       	ror	r22
    15d8:	57 95       	ror	r21
    15da:	47 95       	ror	r20
    15dc:	2f 5f       	subi	r18, 0xFF	; 255
    15de:	3f 4f       	sbci	r19, 0xFF	; 255
    15e0:	77 fd       	sbrc	r23, 7
    15e2:	e7 cf       	rjmp	.-50     	; 0x15b2 <__mulsf3+0x13a>
    15e4:	0c c0       	rjmp	.+24     	; 0x15fe <__mulsf3+0x186>
    15e6:	44 0f       	add	r20, r20
    15e8:	55 1f       	adc	r21, r21
    15ea:	66 1f       	adc	r22, r22
    15ec:	77 1f       	adc	r23, r23
    15ee:	17 fd       	sbrc	r17, 7
    15f0:	41 60       	ori	r20, 0x01	; 1
    15f2:	ee 0c       	add	r14, r14
    15f4:	ff 1c       	adc	r15, r15
    15f6:	00 1f       	adc	r16, r16
    15f8:	11 1f       	adc	r17, r17
    15fa:	21 50       	subi	r18, 0x01	; 1
    15fc:	30 40       	sbci	r19, 0x00	; 0
    15fe:	40 30       	cpi	r20, 0x00	; 0
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	59 07       	cpc	r21, r25
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	69 07       	cpc	r22, r25
    1608:	90 e4       	ldi	r25, 0x40	; 64
    160a:	79 07       	cpc	r23, r25
    160c:	60 f3       	brcs	.-40     	; 0x15e6 <__mulsf3+0x16e>
    160e:	2b 8f       	std	Y+27, r18	; 0x1b
    1610:	3c 8f       	std	Y+28, r19	; 0x1c
    1612:	db 01       	movw	r26, r22
    1614:	ca 01       	movw	r24, r20
    1616:	8f 77       	andi	r24, 0x7F	; 127
    1618:	90 70       	andi	r25, 0x00	; 0
    161a:	a0 70       	andi	r26, 0x00	; 0
    161c:	b0 70       	andi	r27, 0x00	; 0
    161e:	80 34       	cpi	r24, 0x40	; 64
    1620:	91 05       	cpc	r25, r1
    1622:	a1 05       	cpc	r26, r1
    1624:	b1 05       	cpc	r27, r1
    1626:	61 f4       	brne	.+24     	; 0x1640 <__mulsf3+0x1c8>
    1628:	47 fd       	sbrc	r20, 7
    162a:	0a c0       	rjmp	.+20     	; 0x1640 <__mulsf3+0x1c8>
    162c:	e1 14       	cp	r14, r1
    162e:	f1 04       	cpc	r15, r1
    1630:	01 05       	cpc	r16, r1
    1632:	11 05       	cpc	r17, r1
    1634:	29 f0       	breq	.+10     	; 0x1640 <__mulsf3+0x1c8>
    1636:	40 5c       	subi	r20, 0xC0	; 192
    1638:	5f 4f       	sbci	r21, 0xFF	; 255
    163a:	6f 4f       	sbci	r22, 0xFF	; 255
    163c:	7f 4f       	sbci	r23, 0xFF	; 255
    163e:	40 78       	andi	r20, 0x80	; 128
    1640:	1a 8e       	std	Y+26, r1	; 0x1a
    1642:	fe 17       	cp	r31, r30
    1644:	11 f0       	breq	.+4      	; 0x164a <__mulsf3+0x1d2>
    1646:	81 e0       	ldi	r24, 0x01	; 1
    1648:	8a 8f       	std	Y+26, r24	; 0x1a
    164a:	4d 8f       	std	Y+29, r20	; 0x1d
    164c:	5e 8f       	std	Y+30, r21	; 0x1e
    164e:	6f 8f       	std	Y+31, r22	; 0x1f
    1650:	78 a3       	std	Y+32, r23	; 0x20
    1652:	83 e0       	ldi	r24, 0x03	; 3
    1654:	89 8f       	std	Y+25, r24	; 0x19
    1656:	ce 01       	movw	r24, r28
    1658:	49 96       	adiw	r24, 0x19	; 25
    165a:	d5 d0       	rcall	.+426    	; 0x1806 <__pack_f>
    165c:	a0 96       	adiw	r28, 0x20	; 32
    165e:	e2 e1       	ldi	r30, 0x12	; 18
    1660:	bb c2       	rjmp	.+1398   	; 0x1bd8 <__epilogue_restores__>

00001662 <__gtsf2>:
    1662:	a8 e1       	ldi	r26, 0x18	; 24
    1664:	b0 e0       	ldi	r27, 0x00	; 0
    1666:	e6 e3       	ldi	r30, 0x36	; 54
    1668:	fb e0       	ldi	r31, 0x0B	; 11
    166a:	a6 c2       	rjmp	.+1356   	; 0x1bb8 <__prologue_saves__+0x18>
    166c:	69 83       	std	Y+1, r22	; 0x01
    166e:	7a 83       	std	Y+2, r23	; 0x02
    1670:	8b 83       	std	Y+3, r24	; 0x03
    1672:	9c 83       	std	Y+4, r25	; 0x04
    1674:	2d 83       	std	Y+5, r18	; 0x05
    1676:	3e 83       	std	Y+6, r19	; 0x06
    1678:	4f 83       	std	Y+7, r20	; 0x07
    167a:	58 87       	std	Y+8, r21	; 0x08
    167c:	89 e0       	ldi	r24, 0x09	; 9
    167e:	e8 2e       	mov	r14, r24
    1680:	f1 2c       	mov	r15, r1
    1682:	ec 0e       	add	r14, r28
    1684:	fd 1e       	adc	r15, r29
    1686:	ce 01       	movw	r24, r28
    1688:	01 96       	adiw	r24, 0x01	; 1
    168a:	b7 01       	movw	r22, r14
    168c:	91 d1       	rcall	.+802    	; 0x19b0 <__unpack_f>
    168e:	8e 01       	movw	r16, r28
    1690:	0f 5e       	subi	r16, 0xEF	; 239
    1692:	1f 4f       	sbci	r17, 0xFF	; 255
    1694:	ce 01       	movw	r24, r28
    1696:	05 96       	adiw	r24, 0x05	; 5
    1698:	b8 01       	movw	r22, r16
    169a:	8a d1       	rcall	.+788    	; 0x19b0 <__unpack_f>
    169c:	89 85       	ldd	r24, Y+9	; 0x09
    169e:	82 30       	cpi	r24, 0x02	; 2
    16a0:	38 f0       	brcs	.+14     	; 0x16b0 <__gtsf2+0x4e>
    16a2:	89 89       	ldd	r24, Y+17	; 0x11
    16a4:	82 30       	cpi	r24, 0x02	; 2
    16a6:	20 f0       	brcs	.+8      	; 0x16b0 <__gtsf2+0x4e>
    16a8:	c7 01       	movw	r24, r14
    16aa:	b8 01       	movw	r22, r16
    16ac:	f9 d1       	rcall	.+1010   	; 0x1aa0 <__fpcmp_parts_f>
    16ae:	01 c0       	rjmp	.+2      	; 0x16b2 <__gtsf2+0x50>
    16b0:	8f ef       	ldi	r24, 0xFF	; 255
    16b2:	68 96       	adiw	r28, 0x18	; 24
    16b4:	e6 e0       	ldi	r30, 0x06	; 6
    16b6:	9c c2       	rjmp	.+1336   	; 0x1bf0 <__epilogue_restores__+0x18>

000016b8 <__gesf2>:
    16b8:	a8 e1       	ldi	r26, 0x18	; 24
    16ba:	b0 e0       	ldi	r27, 0x00	; 0
    16bc:	e1 e6       	ldi	r30, 0x61	; 97
    16be:	fb e0       	ldi	r31, 0x0B	; 11
    16c0:	7b c2       	rjmp	.+1270   	; 0x1bb8 <__prologue_saves__+0x18>
    16c2:	69 83       	std	Y+1, r22	; 0x01
    16c4:	7a 83       	std	Y+2, r23	; 0x02
    16c6:	8b 83       	std	Y+3, r24	; 0x03
    16c8:	9c 83       	std	Y+4, r25	; 0x04
    16ca:	2d 83       	std	Y+5, r18	; 0x05
    16cc:	3e 83       	std	Y+6, r19	; 0x06
    16ce:	4f 83       	std	Y+7, r20	; 0x07
    16d0:	58 87       	std	Y+8, r21	; 0x08
    16d2:	89 e0       	ldi	r24, 0x09	; 9
    16d4:	e8 2e       	mov	r14, r24
    16d6:	f1 2c       	mov	r15, r1
    16d8:	ec 0e       	add	r14, r28
    16da:	fd 1e       	adc	r15, r29
    16dc:	ce 01       	movw	r24, r28
    16de:	01 96       	adiw	r24, 0x01	; 1
    16e0:	b7 01       	movw	r22, r14
    16e2:	66 d1       	rcall	.+716    	; 0x19b0 <__unpack_f>
    16e4:	8e 01       	movw	r16, r28
    16e6:	0f 5e       	subi	r16, 0xEF	; 239
    16e8:	1f 4f       	sbci	r17, 0xFF	; 255
    16ea:	ce 01       	movw	r24, r28
    16ec:	05 96       	adiw	r24, 0x05	; 5
    16ee:	b8 01       	movw	r22, r16
    16f0:	5f d1       	rcall	.+702    	; 0x19b0 <__unpack_f>
    16f2:	89 85       	ldd	r24, Y+9	; 0x09
    16f4:	82 30       	cpi	r24, 0x02	; 2
    16f6:	38 f0       	brcs	.+14     	; 0x1706 <__gesf2+0x4e>
    16f8:	89 89       	ldd	r24, Y+17	; 0x11
    16fa:	82 30       	cpi	r24, 0x02	; 2
    16fc:	20 f0       	brcs	.+8      	; 0x1706 <__gesf2+0x4e>
    16fe:	c7 01       	movw	r24, r14
    1700:	b8 01       	movw	r22, r16
    1702:	ce d1       	rcall	.+924    	; 0x1aa0 <__fpcmp_parts_f>
    1704:	01 c0       	rjmp	.+2      	; 0x1708 <__gesf2+0x50>
    1706:	8f ef       	ldi	r24, 0xFF	; 255
    1708:	68 96       	adiw	r28, 0x18	; 24
    170a:	e6 e0       	ldi	r30, 0x06	; 6
    170c:	71 c2       	rjmp	.+1250   	; 0x1bf0 <__epilogue_restores__+0x18>

0000170e <__ltsf2>:
    170e:	a8 e1       	ldi	r26, 0x18	; 24
    1710:	b0 e0       	ldi	r27, 0x00	; 0
    1712:	ec e8       	ldi	r30, 0x8C	; 140
    1714:	fb e0       	ldi	r31, 0x0B	; 11
    1716:	50 c2       	rjmp	.+1184   	; 0x1bb8 <__prologue_saves__+0x18>
    1718:	69 83       	std	Y+1, r22	; 0x01
    171a:	7a 83       	std	Y+2, r23	; 0x02
    171c:	8b 83       	std	Y+3, r24	; 0x03
    171e:	9c 83       	std	Y+4, r25	; 0x04
    1720:	2d 83       	std	Y+5, r18	; 0x05
    1722:	3e 83       	std	Y+6, r19	; 0x06
    1724:	4f 83       	std	Y+7, r20	; 0x07
    1726:	58 87       	std	Y+8, r21	; 0x08
    1728:	89 e0       	ldi	r24, 0x09	; 9
    172a:	e8 2e       	mov	r14, r24
    172c:	f1 2c       	mov	r15, r1
    172e:	ec 0e       	add	r14, r28
    1730:	fd 1e       	adc	r15, r29
    1732:	ce 01       	movw	r24, r28
    1734:	01 96       	adiw	r24, 0x01	; 1
    1736:	b7 01       	movw	r22, r14
    1738:	3b d1       	rcall	.+630    	; 0x19b0 <__unpack_f>
    173a:	8e 01       	movw	r16, r28
    173c:	0f 5e       	subi	r16, 0xEF	; 239
    173e:	1f 4f       	sbci	r17, 0xFF	; 255
    1740:	ce 01       	movw	r24, r28
    1742:	05 96       	adiw	r24, 0x05	; 5
    1744:	b8 01       	movw	r22, r16
    1746:	34 d1       	rcall	.+616    	; 0x19b0 <__unpack_f>
    1748:	89 85       	ldd	r24, Y+9	; 0x09
    174a:	82 30       	cpi	r24, 0x02	; 2
    174c:	38 f0       	brcs	.+14     	; 0x175c <__ltsf2+0x4e>
    174e:	89 89       	ldd	r24, Y+17	; 0x11
    1750:	82 30       	cpi	r24, 0x02	; 2
    1752:	20 f0       	brcs	.+8      	; 0x175c <__ltsf2+0x4e>
    1754:	c7 01       	movw	r24, r14
    1756:	b8 01       	movw	r22, r16
    1758:	a3 d1       	rcall	.+838    	; 0x1aa0 <__fpcmp_parts_f>
    175a:	01 c0       	rjmp	.+2      	; 0x175e <__ltsf2+0x50>
    175c:	81 e0       	ldi	r24, 0x01	; 1
    175e:	68 96       	adiw	r28, 0x18	; 24
    1760:	e6 e0       	ldi	r30, 0x06	; 6
    1762:	46 c2       	rjmp	.+1164   	; 0x1bf0 <__epilogue_restores__+0x18>

00001764 <__fixsfsi>:
    1764:	ac e0       	ldi	r26, 0x0C	; 12
    1766:	b0 e0       	ldi	r27, 0x00	; 0
    1768:	e7 eb       	ldi	r30, 0xB7	; 183
    176a:	fb e0       	ldi	r31, 0x0B	; 11
    176c:	29 c2       	rjmp	.+1106   	; 0x1bc0 <__prologue_saves__+0x20>
    176e:	69 83       	std	Y+1, r22	; 0x01
    1770:	7a 83       	std	Y+2, r23	; 0x02
    1772:	8b 83       	std	Y+3, r24	; 0x03
    1774:	9c 83       	std	Y+4, r25	; 0x04
    1776:	ce 01       	movw	r24, r28
    1778:	01 96       	adiw	r24, 0x01	; 1
    177a:	be 01       	movw	r22, r28
    177c:	6b 5f       	subi	r22, 0xFB	; 251
    177e:	7f 4f       	sbci	r23, 0xFF	; 255
    1780:	17 d1       	rcall	.+558    	; 0x19b0 <__unpack_f>
    1782:	8d 81       	ldd	r24, Y+5	; 0x05
    1784:	82 30       	cpi	r24, 0x02	; 2
    1786:	61 f1       	breq	.+88     	; 0x17e0 <__fixsfsi+0x7c>
    1788:	82 30       	cpi	r24, 0x02	; 2
    178a:	50 f1       	brcs	.+84     	; 0x17e0 <__fixsfsi+0x7c>
    178c:	84 30       	cpi	r24, 0x04	; 4
    178e:	21 f4       	brne	.+8      	; 0x1798 <__fixsfsi+0x34>
    1790:	8e 81       	ldd	r24, Y+6	; 0x06
    1792:	88 23       	and	r24, r24
    1794:	51 f1       	breq	.+84     	; 0x17ea <__fixsfsi+0x86>
    1796:	2e c0       	rjmp	.+92     	; 0x17f4 <__fixsfsi+0x90>
    1798:	2f 81       	ldd	r18, Y+7	; 0x07
    179a:	38 85       	ldd	r19, Y+8	; 0x08
    179c:	37 fd       	sbrc	r19, 7
    179e:	20 c0       	rjmp	.+64     	; 0x17e0 <__fixsfsi+0x7c>
    17a0:	6e 81       	ldd	r22, Y+6	; 0x06
    17a2:	2f 31       	cpi	r18, 0x1F	; 31
    17a4:	31 05       	cpc	r19, r1
    17a6:	1c f0       	brlt	.+6      	; 0x17ae <__fixsfsi+0x4a>
    17a8:	66 23       	and	r22, r22
    17aa:	f9 f0       	breq	.+62     	; 0x17ea <__fixsfsi+0x86>
    17ac:	23 c0       	rjmp	.+70     	; 0x17f4 <__fixsfsi+0x90>
    17ae:	8e e1       	ldi	r24, 0x1E	; 30
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	82 1b       	sub	r24, r18
    17b4:	93 0b       	sbc	r25, r19
    17b6:	29 85       	ldd	r18, Y+9	; 0x09
    17b8:	3a 85       	ldd	r19, Y+10	; 0x0a
    17ba:	4b 85       	ldd	r20, Y+11	; 0x0b
    17bc:	5c 85       	ldd	r21, Y+12	; 0x0c
    17be:	04 c0       	rjmp	.+8      	; 0x17c8 <__fixsfsi+0x64>
    17c0:	56 95       	lsr	r21
    17c2:	47 95       	ror	r20
    17c4:	37 95       	ror	r19
    17c6:	27 95       	ror	r18
    17c8:	8a 95       	dec	r24
    17ca:	d2 f7       	brpl	.-12     	; 0x17c0 <__fixsfsi+0x5c>
    17cc:	66 23       	and	r22, r22
    17ce:	b1 f0       	breq	.+44     	; 0x17fc <__fixsfsi+0x98>
    17d0:	50 95       	com	r21
    17d2:	40 95       	com	r20
    17d4:	30 95       	com	r19
    17d6:	21 95       	neg	r18
    17d8:	3f 4f       	sbci	r19, 0xFF	; 255
    17da:	4f 4f       	sbci	r20, 0xFF	; 255
    17dc:	5f 4f       	sbci	r21, 0xFF	; 255
    17de:	0e c0       	rjmp	.+28     	; 0x17fc <__fixsfsi+0x98>
    17e0:	20 e0       	ldi	r18, 0x00	; 0
    17e2:	30 e0       	ldi	r19, 0x00	; 0
    17e4:	40 e0       	ldi	r20, 0x00	; 0
    17e6:	50 e0       	ldi	r21, 0x00	; 0
    17e8:	09 c0       	rjmp	.+18     	; 0x17fc <__fixsfsi+0x98>
    17ea:	2f ef       	ldi	r18, 0xFF	; 255
    17ec:	3f ef       	ldi	r19, 0xFF	; 255
    17ee:	4f ef       	ldi	r20, 0xFF	; 255
    17f0:	5f e7       	ldi	r21, 0x7F	; 127
    17f2:	04 c0       	rjmp	.+8      	; 0x17fc <__fixsfsi+0x98>
    17f4:	20 e0       	ldi	r18, 0x00	; 0
    17f6:	30 e0       	ldi	r19, 0x00	; 0
    17f8:	40 e0       	ldi	r20, 0x00	; 0
    17fa:	50 e8       	ldi	r21, 0x80	; 128
    17fc:	b9 01       	movw	r22, r18
    17fe:	ca 01       	movw	r24, r20
    1800:	2c 96       	adiw	r28, 0x0c	; 12
    1802:	e2 e0       	ldi	r30, 0x02	; 2
    1804:	f9 c1       	rjmp	.+1010   	; 0x1bf8 <__epilogue_restores__+0x20>

00001806 <__pack_f>:
    1806:	df 92       	push	r13
    1808:	ef 92       	push	r14
    180a:	ff 92       	push	r15
    180c:	0f 93       	push	r16
    180e:	1f 93       	push	r17
    1810:	fc 01       	movw	r30, r24
    1812:	e4 80       	ldd	r14, Z+4	; 0x04
    1814:	f5 80       	ldd	r15, Z+5	; 0x05
    1816:	06 81       	ldd	r16, Z+6	; 0x06
    1818:	17 81       	ldd	r17, Z+7	; 0x07
    181a:	d1 80       	ldd	r13, Z+1	; 0x01
    181c:	80 81       	ld	r24, Z
    181e:	82 30       	cpi	r24, 0x02	; 2
    1820:	48 f4       	brcc	.+18     	; 0x1834 <__pack_f+0x2e>
    1822:	80 e0       	ldi	r24, 0x00	; 0
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	a0 e1       	ldi	r26, 0x10	; 16
    1828:	b0 e0       	ldi	r27, 0x00	; 0
    182a:	e8 2a       	or	r14, r24
    182c:	f9 2a       	or	r15, r25
    182e:	0a 2b       	or	r16, r26
    1830:	1b 2b       	or	r17, r27
    1832:	a5 c0       	rjmp	.+330    	; 0x197e <__pack_f+0x178>
    1834:	84 30       	cpi	r24, 0x04	; 4
    1836:	09 f4       	brne	.+2      	; 0x183a <__pack_f+0x34>
    1838:	9f c0       	rjmp	.+318    	; 0x1978 <__pack_f+0x172>
    183a:	82 30       	cpi	r24, 0x02	; 2
    183c:	21 f4       	brne	.+8      	; 0x1846 <__pack_f+0x40>
    183e:	ee 24       	eor	r14, r14
    1840:	ff 24       	eor	r15, r15
    1842:	87 01       	movw	r16, r14
    1844:	05 c0       	rjmp	.+10     	; 0x1850 <__pack_f+0x4a>
    1846:	e1 14       	cp	r14, r1
    1848:	f1 04       	cpc	r15, r1
    184a:	01 05       	cpc	r16, r1
    184c:	11 05       	cpc	r17, r1
    184e:	19 f4       	brne	.+6      	; 0x1856 <__pack_f+0x50>
    1850:	e0 e0       	ldi	r30, 0x00	; 0
    1852:	f0 e0       	ldi	r31, 0x00	; 0
    1854:	96 c0       	rjmp	.+300    	; 0x1982 <__pack_f+0x17c>
    1856:	62 81       	ldd	r22, Z+2	; 0x02
    1858:	73 81       	ldd	r23, Z+3	; 0x03
    185a:	9f ef       	ldi	r25, 0xFF	; 255
    185c:	62 38       	cpi	r22, 0x82	; 130
    185e:	79 07       	cpc	r23, r25
    1860:	0c f0       	brlt	.+2      	; 0x1864 <__pack_f+0x5e>
    1862:	5b c0       	rjmp	.+182    	; 0x191a <__pack_f+0x114>
    1864:	22 e8       	ldi	r18, 0x82	; 130
    1866:	3f ef       	ldi	r19, 0xFF	; 255
    1868:	26 1b       	sub	r18, r22
    186a:	37 0b       	sbc	r19, r23
    186c:	2a 31       	cpi	r18, 0x1A	; 26
    186e:	31 05       	cpc	r19, r1
    1870:	2c f0       	brlt	.+10     	; 0x187c <__pack_f+0x76>
    1872:	20 e0       	ldi	r18, 0x00	; 0
    1874:	30 e0       	ldi	r19, 0x00	; 0
    1876:	40 e0       	ldi	r20, 0x00	; 0
    1878:	50 e0       	ldi	r21, 0x00	; 0
    187a:	2a c0       	rjmp	.+84     	; 0x18d0 <__pack_f+0xca>
    187c:	b8 01       	movw	r22, r16
    187e:	a7 01       	movw	r20, r14
    1880:	02 2e       	mov	r0, r18
    1882:	04 c0       	rjmp	.+8      	; 0x188c <__pack_f+0x86>
    1884:	76 95       	lsr	r23
    1886:	67 95       	ror	r22
    1888:	57 95       	ror	r21
    188a:	47 95       	ror	r20
    188c:	0a 94       	dec	r0
    188e:	d2 f7       	brpl	.-12     	; 0x1884 <__pack_f+0x7e>
    1890:	81 e0       	ldi	r24, 0x01	; 1
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	a0 e0       	ldi	r26, 0x00	; 0
    1896:	b0 e0       	ldi	r27, 0x00	; 0
    1898:	04 c0       	rjmp	.+8      	; 0x18a2 <__pack_f+0x9c>
    189a:	88 0f       	add	r24, r24
    189c:	99 1f       	adc	r25, r25
    189e:	aa 1f       	adc	r26, r26
    18a0:	bb 1f       	adc	r27, r27
    18a2:	2a 95       	dec	r18
    18a4:	d2 f7       	brpl	.-12     	; 0x189a <__pack_f+0x94>
    18a6:	01 97       	sbiw	r24, 0x01	; 1
    18a8:	a1 09       	sbc	r26, r1
    18aa:	b1 09       	sbc	r27, r1
    18ac:	8e 21       	and	r24, r14
    18ae:	9f 21       	and	r25, r15
    18b0:	a0 23       	and	r26, r16
    18b2:	b1 23       	and	r27, r17
    18b4:	00 97       	sbiw	r24, 0x00	; 0
    18b6:	a1 05       	cpc	r26, r1
    18b8:	b1 05       	cpc	r27, r1
    18ba:	21 f0       	breq	.+8      	; 0x18c4 <__pack_f+0xbe>
    18bc:	81 e0       	ldi	r24, 0x01	; 1
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	a0 e0       	ldi	r26, 0x00	; 0
    18c2:	b0 e0       	ldi	r27, 0x00	; 0
    18c4:	9a 01       	movw	r18, r20
    18c6:	ab 01       	movw	r20, r22
    18c8:	28 2b       	or	r18, r24
    18ca:	39 2b       	or	r19, r25
    18cc:	4a 2b       	or	r20, r26
    18ce:	5b 2b       	or	r21, r27
    18d0:	da 01       	movw	r26, r20
    18d2:	c9 01       	movw	r24, r18
    18d4:	8f 77       	andi	r24, 0x7F	; 127
    18d6:	90 70       	andi	r25, 0x00	; 0
    18d8:	a0 70       	andi	r26, 0x00	; 0
    18da:	b0 70       	andi	r27, 0x00	; 0
    18dc:	80 34       	cpi	r24, 0x40	; 64
    18de:	91 05       	cpc	r25, r1
    18e0:	a1 05       	cpc	r26, r1
    18e2:	b1 05       	cpc	r27, r1
    18e4:	39 f4       	brne	.+14     	; 0x18f4 <__pack_f+0xee>
    18e6:	27 ff       	sbrs	r18, 7
    18e8:	09 c0       	rjmp	.+18     	; 0x18fc <__pack_f+0xf6>
    18ea:	20 5c       	subi	r18, 0xC0	; 192
    18ec:	3f 4f       	sbci	r19, 0xFF	; 255
    18ee:	4f 4f       	sbci	r20, 0xFF	; 255
    18f0:	5f 4f       	sbci	r21, 0xFF	; 255
    18f2:	04 c0       	rjmp	.+8      	; 0x18fc <__pack_f+0xf6>
    18f4:	21 5c       	subi	r18, 0xC1	; 193
    18f6:	3f 4f       	sbci	r19, 0xFF	; 255
    18f8:	4f 4f       	sbci	r20, 0xFF	; 255
    18fa:	5f 4f       	sbci	r21, 0xFF	; 255
    18fc:	e0 e0       	ldi	r30, 0x00	; 0
    18fe:	f0 e0       	ldi	r31, 0x00	; 0
    1900:	20 30       	cpi	r18, 0x00	; 0
    1902:	a0 e0       	ldi	r26, 0x00	; 0
    1904:	3a 07       	cpc	r19, r26
    1906:	a0 e0       	ldi	r26, 0x00	; 0
    1908:	4a 07       	cpc	r20, r26
    190a:	a0 e4       	ldi	r26, 0x40	; 64
    190c:	5a 07       	cpc	r21, r26
    190e:	10 f0       	brcs	.+4      	; 0x1914 <__pack_f+0x10e>
    1910:	e1 e0       	ldi	r30, 0x01	; 1
    1912:	f0 e0       	ldi	r31, 0x00	; 0
    1914:	79 01       	movw	r14, r18
    1916:	8a 01       	movw	r16, r20
    1918:	27 c0       	rjmp	.+78     	; 0x1968 <__pack_f+0x162>
    191a:	60 38       	cpi	r22, 0x80	; 128
    191c:	71 05       	cpc	r23, r1
    191e:	64 f5       	brge	.+88     	; 0x1978 <__pack_f+0x172>
    1920:	fb 01       	movw	r30, r22
    1922:	e1 58       	subi	r30, 0x81	; 129
    1924:	ff 4f       	sbci	r31, 0xFF	; 255
    1926:	d8 01       	movw	r26, r16
    1928:	c7 01       	movw	r24, r14
    192a:	8f 77       	andi	r24, 0x7F	; 127
    192c:	90 70       	andi	r25, 0x00	; 0
    192e:	a0 70       	andi	r26, 0x00	; 0
    1930:	b0 70       	andi	r27, 0x00	; 0
    1932:	80 34       	cpi	r24, 0x40	; 64
    1934:	91 05       	cpc	r25, r1
    1936:	a1 05       	cpc	r26, r1
    1938:	b1 05       	cpc	r27, r1
    193a:	39 f4       	brne	.+14     	; 0x194a <__pack_f+0x144>
    193c:	e7 fe       	sbrs	r14, 7
    193e:	0d c0       	rjmp	.+26     	; 0x195a <__pack_f+0x154>
    1940:	80 e4       	ldi	r24, 0x40	; 64
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	a0 e0       	ldi	r26, 0x00	; 0
    1946:	b0 e0       	ldi	r27, 0x00	; 0
    1948:	04 c0       	rjmp	.+8      	; 0x1952 <__pack_f+0x14c>
    194a:	8f e3       	ldi	r24, 0x3F	; 63
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	a0 e0       	ldi	r26, 0x00	; 0
    1950:	b0 e0       	ldi	r27, 0x00	; 0
    1952:	e8 0e       	add	r14, r24
    1954:	f9 1e       	adc	r15, r25
    1956:	0a 1f       	adc	r16, r26
    1958:	1b 1f       	adc	r17, r27
    195a:	17 ff       	sbrs	r17, 7
    195c:	05 c0       	rjmp	.+10     	; 0x1968 <__pack_f+0x162>
    195e:	16 95       	lsr	r17
    1960:	07 95       	ror	r16
    1962:	f7 94       	ror	r15
    1964:	e7 94       	ror	r14
    1966:	31 96       	adiw	r30, 0x01	; 1
    1968:	87 e0       	ldi	r24, 0x07	; 7
    196a:	16 95       	lsr	r17
    196c:	07 95       	ror	r16
    196e:	f7 94       	ror	r15
    1970:	e7 94       	ror	r14
    1972:	8a 95       	dec	r24
    1974:	d1 f7       	brne	.-12     	; 0x196a <__pack_f+0x164>
    1976:	05 c0       	rjmp	.+10     	; 0x1982 <__pack_f+0x17c>
    1978:	ee 24       	eor	r14, r14
    197a:	ff 24       	eor	r15, r15
    197c:	87 01       	movw	r16, r14
    197e:	ef ef       	ldi	r30, 0xFF	; 255
    1980:	f0 e0       	ldi	r31, 0x00	; 0
    1982:	6e 2f       	mov	r22, r30
    1984:	67 95       	ror	r22
    1986:	66 27       	eor	r22, r22
    1988:	67 95       	ror	r22
    198a:	90 2f       	mov	r25, r16
    198c:	9f 77       	andi	r25, 0x7F	; 127
    198e:	d7 94       	ror	r13
    1990:	dd 24       	eor	r13, r13
    1992:	d7 94       	ror	r13
    1994:	8e 2f       	mov	r24, r30
    1996:	86 95       	lsr	r24
    1998:	49 2f       	mov	r20, r25
    199a:	46 2b       	or	r20, r22
    199c:	58 2f       	mov	r21, r24
    199e:	5d 29       	or	r21, r13
    19a0:	b7 01       	movw	r22, r14
    19a2:	ca 01       	movw	r24, r20
    19a4:	1f 91       	pop	r17
    19a6:	0f 91       	pop	r16
    19a8:	ff 90       	pop	r15
    19aa:	ef 90       	pop	r14
    19ac:	df 90       	pop	r13
    19ae:	08 95       	ret

000019b0 <__unpack_f>:
    19b0:	fc 01       	movw	r30, r24
    19b2:	db 01       	movw	r26, r22
    19b4:	40 81       	ld	r20, Z
    19b6:	51 81       	ldd	r21, Z+1	; 0x01
    19b8:	22 81       	ldd	r18, Z+2	; 0x02
    19ba:	62 2f       	mov	r22, r18
    19bc:	6f 77       	andi	r22, 0x7F	; 127
    19be:	70 e0       	ldi	r23, 0x00	; 0
    19c0:	22 1f       	adc	r18, r18
    19c2:	22 27       	eor	r18, r18
    19c4:	22 1f       	adc	r18, r18
    19c6:	93 81       	ldd	r25, Z+3	; 0x03
    19c8:	89 2f       	mov	r24, r25
    19ca:	88 0f       	add	r24, r24
    19cc:	82 2b       	or	r24, r18
    19ce:	28 2f       	mov	r18, r24
    19d0:	30 e0       	ldi	r19, 0x00	; 0
    19d2:	99 1f       	adc	r25, r25
    19d4:	99 27       	eor	r25, r25
    19d6:	99 1f       	adc	r25, r25
    19d8:	11 96       	adiw	r26, 0x01	; 1
    19da:	9c 93       	st	X, r25
    19dc:	11 97       	sbiw	r26, 0x01	; 1
    19de:	21 15       	cp	r18, r1
    19e0:	31 05       	cpc	r19, r1
    19e2:	a9 f5       	brne	.+106    	; 0x1a4e <__unpack_f+0x9e>
    19e4:	41 15       	cp	r20, r1
    19e6:	51 05       	cpc	r21, r1
    19e8:	61 05       	cpc	r22, r1
    19ea:	71 05       	cpc	r23, r1
    19ec:	11 f4       	brne	.+4      	; 0x19f2 <__unpack_f+0x42>
    19ee:	82 e0       	ldi	r24, 0x02	; 2
    19f0:	37 c0       	rjmp	.+110    	; 0x1a60 <__unpack_f+0xb0>
    19f2:	82 e8       	ldi	r24, 0x82	; 130
    19f4:	9f ef       	ldi	r25, 0xFF	; 255
    19f6:	13 96       	adiw	r26, 0x03	; 3
    19f8:	9c 93       	st	X, r25
    19fa:	8e 93       	st	-X, r24
    19fc:	12 97       	sbiw	r26, 0x02	; 2
    19fe:	9a 01       	movw	r18, r20
    1a00:	ab 01       	movw	r20, r22
    1a02:	67 e0       	ldi	r22, 0x07	; 7
    1a04:	22 0f       	add	r18, r18
    1a06:	33 1f       	adc	r19, r19
    1a08:	44 1f       	adc	r20, r20
    1a0a:	55 1f       	adc	r21, r21
    1a0c:	6a 95       	dec	r22
    1a0e:	d1 f7       	brne	.-12     	; 0x1a04 <__unpack_f+0x54>
    1a10:	83 e0       	ldi	r24, 0x03	; 3
    1a12:	8c 93       	st	X, r24
    1a14:	0d c0       	rjmp	.+26     	; 0x1a30 <__unpack_f+0x80>
    1a16:	22 0f       	add	r18, r18
    1a18:	33 1f       	adc	r19, r19
    1a1a:	44 1f       	adc	r20, r20
    1a1c:	55 1f       	adc	r21, r21
    1a1e:	12 96       	adiw	r26, 0x02	; 2
    1a20:	8d 91       	ld	r24, X+
    1a22:	9c 91       	ld	r25, X
    1a24:	13 97       	sbiw	r26, 0x03	; 3
    1a26:	01 97       	sbiw	r24, 0x01	; 1
    1a28:	13 96       	adiw	r26, 0x03	; 3
    1a2a:	9c 93       	st	X, r25
    1a2c:	8e 93       	st	-X, r24
    1a2e:	12 97       	sbiw	r26, 0x02	; 2
    1a30:	20 30       	cpi	r18, 0x00	; 0
    1a32:	80 e0       	ldi	r24, 0x00	; 0
    1a34:	38 07       	cpc	r19, r24
    1a36:	80 e0       	ldi	r24, 0x00	; 0
    1a38:	48 07       	cpc	r20, r24
    1a3a:	80 e4       	ldi	r24, 0x40	; 64
    1a3c:	58 07       	cpc	r21, r24
    1a3e:	58 f3       	brcs	.-42     	; 0x1a16 <__unpack_f+0x66>
    1a40:	14 96       	adiw	r26, 0x04	; 4
    1a42:	2d 93       	st	X+, r18
    1a44:	3d 93       	st	X+, r19
    1a46:	4d 93       	st	X+, r20
    1a48:	5c 93       	st	X, r21
    1a4a:	17 97       	sbiw	r26, 0x07	; 7
    1a4c:	08 95       	ret
    1a4e:	2f 3f       	cpi	r18, 0xFF	; 255
    1a50:	31 05       	cpc	r19, r1
    1a52:	79 f4       	brne	.+30     	; 0x1a72 <__unpack_f+0xc2>
    1a54:	41 15       	cp	r20, r1
    1a56:	51 05       	cpc	r21, r1
    1a58:	61 05       	cpc	r22, r1
    1a5a:	71 05       	cpc	r23, r1
    1a5c:	19 f4       	brne	.+6      	; 0x1a64 <__unpack_f+0xb4>
    1a5e:	84 e0       	ldi	r24, 0x04	; 4
    1a60:	8c 93       	st	X, r24
    1a62:	08 95       	ret
    1a64:	64 ff       	sbrs	r22, 4
    1a66:	03 c0       	rjmp	.+6      	; 0x1a6e <__unpack_f+0xbe>
    1a68:	81 e0       	ldi	r24, 0x01	; 1
    1a6a:	8c 93       	st	X, r24
    1a6c:	12 c0       	rjmp	.+36     	; 0x1a92 <__unpack_f+0xe2>
    1a6e:	1c 92       	st	X, r1
    1a70:	10 c0       	rjmp	.+32     	; 0x1a92 <__unpack_f+0xe2>
    1a72:	2f 57       	subi	r18, 0x7F	; 127
    1a74:	30 40       	sbci	r19, 0x00	; 0
    1a76:	13 96       	adiw	r26, 0x03	; 3
    1a78:	3c 93       	st	X, r19
    1a7a:	2e 93       	st	-X, r18
    1a7c:	12 97       	sbiw	r26, 0x02	; 2
    1a7e:	83 e0       	ldi	r24, 0x03	; 3
    1a80:	8c 93       	st	X, r24
    1a82:	87 e0       	ldi	r24, 0x07	; 7
    1a84:	44 0f       	add	r20, r20
    1a86:	55 1f       	adc	r21, r21
    1a88:	66 1f       	adc	r22, r22
    1a8a:	77 1f       	adc	r23, r23
    1a8c:	8a 95       	dec	r24
    1a8e:	d1 f7       	brne	.-12     	; 0x1a84 <__unpack_f+0xd4>
    1a90:	70 64       	ori	r23, 0x40	; 64
    1a92:	14 96       	adiw	r26, 0x04	; 4
    1a94:	4d 93       	st	X+, r20
    1a96:	5d 93       	st	X+, r21
    1a98:	6d 93       	st	X+, r22
    1a9a:	7c 93       	st	X, r23
    1a9c:	17 97       	sbiw	r26, 0x07	; 7
    1a9e:	08 95       	ret

00001aa0 <__fpcmp_parts_f>:
    1aa0:	1f 93       	push	r17
    1aa2:	dc 01       	movw	r26, r24
    1aa4:	fb 01       	movw	r30, r22
    1aa6:	9c 91       	ld	r25, X
    1aa8:	92 30       	cpi	r25, 0x02	; 2
    1aaa:	08 f4       	brcc	.+2      	; 0x1aae <__fpcmp_parts_f+0xe>
    1aac:	47 c0       	rjmp	.+142    	; 0x1b3c <__fpcmp_parts_f+0x9c>
    1aae:	80 81       	ld	r24, Z
    1ab0:	82 30       	cpi	r24, 0x02	; 2
    1ab2:	08 f4       	brcc	.+2      	; 0x1ab6 <__fpcmp_parts_f+0x16>
    1ab4:	43 c0       	rjmp	.+134    	; 0x1b3c <__fpcmp_parts_f+0x9c>
    1ab6:	94 30       	cpi	r25, 0x04	; 4
    1ab8:	51 f4       	brne	.+20     	; 0x1ace <__fpcmp_parts_f+0x2e>
    1aba:	11 96       	adiw	r26, 0x01	; 1
    1abc:	1c 91       	ld	r17, X
    1abe:	84 30       	cpi	r24, 0x04	; 4
    1ac0:	99 f5       	brne	.+102    	; 0x1b28 <__fpcmp_parts_f+0x88>
    1ac2:	81 81       	ldd	r24, Z+1	; 0x01
    1ac4:	68 2f       	mov	r22, r24
    1ac6:	70 e0       	ldi	r23, 0x00	; 0
    1ac8:	61 1b       	sub	r22, r17
    1aca:	71 09       	sbc	r23, r1
    1acc:	3f c0       	rjmp	.+126    	; 0x1b4c <__fpcmp_parts_f+0xac>
    1ace:	84 30       	cpi	r24, 0x04	; 4
    1ad0:	21 f0       	breq	.+8      	; 0x1ada <__fpcmp_parts_f+0x3a>
    1ad2:	92 30       	cpi	r25, 0x02	; 2
    1ad4:	31 f4       	brne	.+12     	; 0x1ae2 <__fpcmp_parts_f+0x42>
    1ad6:	82 30       	cpi	r24, 0x02	; 2
    1ad8:	b9 f1       	breq	.+110    	; 0x1b48 <__fpcmp_parts_f+0xa8>
    1ada:	81 81       	ldd	r24, Z+1	; 0x01
    1adc:	88 23       	and	r24, r24
    1ade:	89 f1       	breq	.+98     	; 0x1b42 <__fpcmp_parts_f+0xa2>
    1ae0:	2d c0       	rjmp	.+90     	; 0x1b3c <__fpcmp_parts_f+0x9c>
    1ae2:	11 96       	adiw	r26, 0x01	; 1
    1ae4:	1c 91       	ld	r17, X
    1ae6:	11 97       	sbiw	r26, 0x01	; 1
    1ae8:	82 30       	cpi	r24, 0x02	; 2
    1aea:	f1 f0       	breq	.+60     	; 0x1b28 <__fpcmp_parts_f+0x88>
    1aec:	81 81       	ldd	r24, Z+1	; 0x01
    1aee:	18 17       	cp	r17, r24
    1af0:	d9 f4       	brne	.+54     	; 0x1b28 <__fpcmp_parts_f+0x88>
    1af2:	12 96       	adiw	r26, 0x02	; 2
    1af4:	2d 91       	ld	r18, X+
    1af6:	3c 91       	ld	r19, X
    1af8:	13 97       	sbiw	r26, 0x03	; 3
    1afa:	82 81       	ldd	r24, Z+2	; 0x02
    1afc:	93 81       	ldd	r25, Z+3	; 0x03
    1afe:	82 17       	cp	r24, r18
    1b00:	93 07       	cpc	r25, r19
    1b02:	94 f0       	brlt	.+36     	; 0x1b28 <__fpcmp_parts_f+0x88>
    1b04:	28 17       	cp	r18, r24
    1b06:	39 07       	cpc	r19, r25
    1b08:	bc f0       	brlt	.+46     	; 0x1b38 <__fpcmp_parts_f+0x98>
    1b0a:	14 96       	adiw	r26, 0x04	; 4
    1b0c:	8d 91       	ld	r24, X+
    1b0e:	9d 91       	ld	r25, X+
    1b10:	0d 90       	ld	r0, X+
    1b12:	bc 91       	ld	r27, X
    1b14:	a0 2d       	mov	r26, r0
    1b16:	24 81       	ldd	r18, Z+4	; 0x04
    1b18:	35 81       	ldd	r19, Z+5	; 0x05
    1b1a:	46 81       	ldd	r20, Z+6	; 0x06
    1b1c:	57 81       	ldd	r21, Z+7	; 0x07
    1b1e:	28 17       	cp	r18, r24
    1b20:	39 07       	cpc	r19, r25
    1b22:	4a 07       	cpc	r20, r26
    1b24:	5b 07       	cpc	r21, r27
    1b26:	18 f4       	brcc	.+6      	; 0x1b2e <__fpcmp_parts_f+0x8e>
    1b28:	11 23       	and	r17, r17
    1b2a:	41 f0       	breq	.+16     	; 0x1b3c <__fpcmp_parts_f+0x9c>
    1b2c:	0a c0       	rjmp	.+20     	; 0x1b42 <__fpcmp_parts_f+0xa2>
    1b2e:	82 17       	cp	r24, r18
    1b30:	93 07       	cpc	r25, r19
    1b32:	a4 07       	cpc	r26, r20
    1b34:	b5 07       	cpc	r27, r21
    1b36:	40 f4       	brcc	.+16     	; 0x1b48 <__fpcmp_parts_f+0xa8>
    1b38:	11 23       	and	r17, r17
    1b3a:	19 f0       	breq	.+6      	; 0x1b42 <__fpcmp_parts_f+0xa2>
    1b3c:	61 e0       	ldi	r22, 0x01	; 1
    1b3e:	70 e0       	ldi	r23, 0x00	; 0
    1b40:	05 c0       	rjmp	.+10     	; 0x1b4c <__fpcmp_parts_f+0xac>
    1b42:	6f ef       	ldi	r22, 0xFF	; 255
    1b44:	7f ef       	ldi	r23, 0xFF	; 255
    1b46:	02 c0       	rjmp	.+4      	; 0x1b4c <__fpcmp_parts_f+0xac>
    1b48:	60 e0       	ldi	r22, 0x00	; 0
    1b4a:	70 e0       	ldi	r23, 0x00	; 0
    1b4c:	cb 01       	movw	r24, r22
    1b4e:	1f 91       	pop	r17
    1b50:	08 95       	ret

00001b52 <__divmodhi4>:
    1b52:	97 fb       	bst	r25, 7
    1b54:	09 2e       	mov	r0, r25
    1b56:	07 26       	eor	r0, r23
    1b58:	0a d0       	rcall	.+20     	; 0x1b6e <__divmodhi4_neg1>
    1b5a:	77 fd       	sbrc	r23, 7
    1b5c:	04 d0       	rcall	.+8      	; 0x1b66 <__divmodhi4_neg2>
    1b5e:	0c d0       	rcall	.+24     	; 0x1b78 <__udivmodhi4>
    1b60:	06 d0       	rcall	.+12     	; 0x1b6e <__divmodhi4_neg1>
    1b62:	00 20       	and	r0, r0
    1b64:	1a f4       	brpl	.+6      	; 0x1b6c <__divmodhi4_exit>

00001b66 <__divmodhi4_neg2>:
    1b66:	70 95       	com	r23
    1b68:	61 95       	neg	r22
    1b6a:	7f 4f       	sbci	r23, 0xFF	; 255

00001b6c <__divmodhi4_exit>:
    1b6c:	08 95       	ret

00001b6e <__divmodhi4_neg1>:
    1b6e:	f6 f7       	brtc	.-4      	; 0x1b6c <__divmodhi4_exit>
    1b70:	90 95       	com	r25
    1b72:	81 95       	neg	r24
    1b74:	9f 4f       	sbci	r25, 0xFF	; 255
    1b76:	08 95       	ret

00001b78 <__udivmodhi4>:
    1b78:	aa 1b       	sub	r26, r26
    1b7a:	bb 1b       	sub	r27, r27
    1b7c:	51 e1       	ldi	r21, 0x11	; 17
    1b7e:	07 c0       	rjmp	.+14     	; 0x1b8e <__udivmodhi4_ep>

00001b80 <__udivmodhi4_loop>:
    1b80:	aa 1f       	adc	r26, r26
    1b82:	bb 1f       	adc	r27, r27
    1b84:	a6 17       	cp	r26, r22
    1b86:	b7 07       	cpc	r27, r23
    1b88:	10 f0       	brcs	.+4      	; 0x1b8e <__udivmodhi4_ep>
    1b8a:	a6 1b       	sub	r26, r22
    1b8c:	b7 0b       	sbc	r27, r23

00001b8e <__udivmodhi4_ep>:
    1b8e:	88 1f       	adc	r24, r24
    1b90:	99 1f       	adc	r25, r25
    1b92:	5a 95       	dec	r21
    1b94:	a9 f7       	brne	.-22     	; 0x1b80 <__udivmodhi4_loop>
    1b96:	80 95       	com	r24
    1b98:	90 95       	com	r25
    1b9a:	bc 01       	movw	r22, r24
    1b9c:	cd 01       	movw	r24, r26
    1b9e:	08 95       	ret

00001ba0 <__prologue_saves__>:
    1ba0:	2f 92       	push	r2
    1ba2:	3f 92       	push	r3
    1ba4:	4f 92       	push	r4
    1ba6:	5f 92       	push	r5
    1ba8:	6f 92       	push	r6
    1baa:	7f 92       	push	r7
    1bac:	8f 92       	push	r8
    1bae:	9f 92       	push	r9
    1bb0:	af 92       	push	r10
    1bb2:	bf 92       	push	r11
    1bb4:	cf 92       	push	r12
    1bb6:	df 92       	push	r13
    1bb8:	ef 92       	push	r14
    1bba:	ff 92       	push	r15
    1bbc:	0f 93       	push	r16
    1bbe:	1f 93       	push	r17
    1bc0:	cf 93       	push	r28
    1bc2:	df 93       	push	r29
    1bc4:	cd b7       	in	r28, 0x3d	; 61
    1bc6:	de b7       	in	r29, 0x3e	; 62
    1bc8:	ca 1b       	sub	r28, r26
    1bca:	db 0b       	sbc	r29, r27
    1bcc:	0f b6       	in	r0, 0x3f	; 63
    1bce:	f8 94       	cli
    1bd0:	de bf       	out	0x3e, r29	; 62
    1bd2:	0f be       	out	0x3f, r0	; 63
    1bd4:	cd bf       	out	0x3d, r28	; 61
    1bd6:	09 94       	ijmp

00001bd8 <__epilogue_restores__>:
    1bd8:	2a 88       	ldd	r2, Y+18	; 0x12
    1bda:	39 88       	ldd	r3, Y+17	; 0x11
    1bdc:	48 88       	ldd	r4, Y+16	; 0x10
    1bde:	5f 84       	ldd	r5, Y+15	; 0x0f
    1be0:	6e 84       	ldd	r6, Y+14	; 0x0e
    1be2:	7d 84       	ldd	r7, Y+13	; 0x0d
    1be4:	8c 84       	ldd	r8, Y+12	; 0x0c
    1be6:	9b 84       	ldd	r9, Y+11	; 0x0b
    1be8:	aa 84       	ldd	r10, Y+10	; 0x0a
    1bea:	b9 84       	ldd	r11, Y+9	; 0x09
    1bec:	c8 84       	ldd	r12, Y+8	; 0x08
    1bee:	df 80       	ldd	r13, Y+7	; 0x07
    1bf0:	ee 80       	ldd	r14, Y+6	; 0x06
    1bf2:	fd 80       	ldd	r15, Y+5	; 0x05
    1bf4:	0c 81       	ldd	r16, Y+4	; 0x04
    1bf6:	1b 81       	ldd	r17, Y+3	; 0x03
    1bf8:	aa 81       	ldd	r26, Y+2	; 0x02
    1bfa:	b9 81       	ldd	r27, Y+1	; 0x01
    1bfc:	ce 0f       	add	r28, r30
    1bfe:	d1 1d       	adc	r29, r1
    1c00:	0f b6       	in	r0, 0x3f	; 63
    1c02:	f8 94       	cli
    1c04:	de bf       	out	0x3e, r29	; 62
    1c06:	0f be       	out	0x3f, r0	; 63
    1c08:	cd bf       	out	0x3d, r28	; 61
    1c0a:	ed 01       	movw	r28, r26
    1c0c:	08 95       	ret

00001c0e <_exit>:
    1c0e:	f8 94       	cli

00001c10 <__stop_program>:
    1c10:	ff cf       	rjmp	.-2      	; 0x1c10 <__stop_program>
